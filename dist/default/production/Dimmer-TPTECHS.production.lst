

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Nov 05 21:34:44 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    27                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    28                           	psect	inittext,global,class=CODE,delta=2
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    33                           	psect	text1,local,class=CODE,merge=1,delta=2
    34                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text8,local,class=CODE,merge=1,delta=2
    41                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text13,local,class=CODE,merge=1,delta=2
    46                           	psect	text14,local,class=CODE,merge=1,delta=2
    47                           	psect	text15,local,class=CODE,merge=1,delta=2
    48                           	psect	text16,local,class=CODE,merge=1,delta=2
    49                           	psect	text17,local,class=CODE,merge=1,delta=2
    50                           	psect	text18,local,class=CODE,merge=1,delta=2
    51                           	psect	text19,local,class=CODE,merge=1,delta=2
    52                           	psect	text20,local,class=CODE,merge=1,delta=2
    53                           	psect	text21,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2
    55                           	psect	text23,local,class=CODE,merge=1,delta=2
    56                           	psect	text24,local,class=CODE,merge=1,delta=2
    57                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text26,local,class=CODE,merge=1,delta=2
    59                           	psect	text27,local,class=CODE,merge=1,delta=2
    60                           	psect	text28,local,class=CODE,merge=1,delta=2
    61                           	psect	text29,local,class=CODE,merge=1,delta=2
    62                           	psect	text30,local,class=CODE,merge=1,delta=2
    63                           	psect	text31,local,class=CODE,merge=1,delta=2
    64                           	psect	text32,local,class=CODE,merge=1,delta=2
    65                           	psect	text33,local,class=CODE,merge=1,delta=2
    66                           	psect	text34,local,class=CODE,merge=1,delta=2
    67                           	psect	text35,local,class=CODE,merge=1,delta=2
    68                           	psect	text36,local,class=CODE,merge=1,delta=2
    69                           	psect	text37,local,class=CODE,merge=1,delta=2
    70                           	psect	text38,local,class=CODE,merge=1,delta=2
    71                           	psect	text39,local,class=CODE,merge=1,delta=2
    72                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text41,local,class=CODE,merge=1,delta=2
    74                           	psect	text42,local,class=CODE,merge=1,delta=2
    75                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text44,local,class=CODE,merge=1,delta=2
    77                           	psect	text45,local,class=CODE,merge=1,delta=2
    78                           	psect	text46,local,class=CODE,merge=1,delta=2
    79                           	psect	text47,local,class=CODE,merge=1,delta=2
    80                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text50,local,class=CODE,merge=1,delta=2
    83                           	psect	text51,local,class=CODE,merge=1,delta=2
    84                           	psect	text52,local,class=CODE,merge=1,delta=2
    85                           	psect	text53,local,class=CODE,merge=1,delta=2
    86                           	psect	text54,local,class=CODE,merge=1,delta=2
    87                           	psect	text55,local,class=CODE,merge=1,delta=2
    88                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text57,local,class=CODE,merge=1,delta=2
    90                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text59,local,class=CODE,merge=1,delta=2
    92                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text64,local,class=CODE,merge=1,delta=2
    97                           	psect	text65,local,class=CODE,merge=1,delta=2
    98                           	psect	text66,local,class=CODE,merge=1,delta=2
    99                           	psect	text67,local,class=CODE,merge=1,delta=2
   100                           	psect	text68,local,class=CODE,merge=1,delta=2
   101                           	psect	text69,local,class=CODE,merge=1,delta=2
   102                           	psect	text70,local,class=CODE,merge=1,delta=2
   103                           	psect	text71,local,class=CODE,merge=1,delta=2
   104                           	psect	text72,local,class=CODE,merge=1,delta=2
   105                           	psect	text73,local,class=CODE,merge=1,delta=2
   106                           	psect	text74,local,class=CODE,merge=1,delta=2
   107                           	psect	text75,local,class=CODE,merge=1,delta=2
   108                           	psect	text76,local,class=CODE,merge=1,delta=2
   109                           	psect	text77,local,class=CODE,merge=1,delta=2
   110                           	psect	text78,local,class=CODE,merge=1,delta=2
   111                           	psect	text79,local,class=CODE,merge=1,delta=2
   112                           	psect	text80,local,class=CODE,merge=1,delta=2
   113                           	psect	text81,local,class=CODE,merge=1,delta=2
   114                           	psect	text82,local,class=CODE,merge=1,delta=2
   115                           	psect	text83,local,class=CODE,merge=1,delta=2
   116                           	psect	text84,local,class=CODE,merge=1,delta=2
   117                           	psect	text85,local,class=CODE,merge=1,delta=2
   118                           	psect	text86,local,class=CODE,merge=1,delta=2
   119                           	psect	text87,local,class=CODE,merge=1,delta=2,group=1
   120                           	psect	text88,local,class=CODE,merge=1,delta=2
   121                           	psect	text89,local,class=CODE,merge=1,delta=2
   122                           	psect	text90,local,class=CODE,merge=1,delta=2
   123                           	psect	text91,local,class=CODE,merge=1,delta=2
   124                           	psect	text92,local,class=CODE,merge=1,delta=2
   125                           	psect	text93,local,class=CODE,merge=1,delta=2
   126                           	psect	text94,local,class=CODE,merge=1,delta=2
   127                           	psect	text95,local,class=CODE,merge=1,delta=2
   128                           	psect	text96,local,class=CODE,merge=1,delta=2
   129                           	psect	text97,local,class=CODE,merge=1,delta=2
   130                           	psect	text98,local,class=CODE,merge=1,delta=2
   131                           	psect	text99,local,class=CODE,merge=1,delta=2
   132                           	psect	text100,local,class=CODE,merge=1,delta=2
   133                           	psect	text101,local,class=CODE,merge=1,delta=2
   134                           	psect	text102,local,class=CODE,merge=1,delta=2
   135                           	psect	text103,local,class=CODE,merge=1,delta=2
   136                           	psect	text104,local,class=CODE,merge=1,delta=2
   137                           	psect	intentry,global,class=CODE,delta=2
   138                           	psect	text106,local,class=CODE,merge=1,delta=2
   139                           	psect	text107,local,class=CODE,merge=1,delta=2
   140                           	psect	text108,local,class=CODE,merge=1,delta=2
   141                           	psect	text109,local,class=CODE,merge=1,delta=2
   142                           	psect	text110,local,class=CODE,merge=1,delta=2
   143                           	psect	text111,local,class=CODE,merge=1,delta=2
   144                           	psect	text112,local,class=CODE,merge=1,delta=2
   145                           	psect	text113,local,class=CODE,merge=1,delta=2
   146                           	psect	text114,local,class=CODE,merge=1,delta=2
   147                           	psect	text115,local,class=CODE,merge=1,delta=2
   148                           	psect	text116,local,class=CODE,merge=1,delta=2
   149                           	psect	text117,local,class=CODE,merge=1,delta=2
   150                           	psect	text118,local,class=CODE,merge=1,delta=2
   151                           	psect	text119,local,class=CODE,merge=1,delta=2
   152                           	psect	text120,local,class=CODE,merge=1,delta=2
   153                           	dabs	1,0x7E,2
   154  0000                     
   155                           ; Version 2.10
   156                           ; Generated 31/07/2019 GMT
   157                           ; 
   158                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   159                           ; All rights reserved.
   160                           ; 
   161                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   162                           ; 
   163                           ; Redistribution and use in source and binary forms, with or without modification, are
   164                           ; permitted provided that the following conditions are met:
   165                           ; 
   166                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   167                           ;        conditions and the following disclaimer.
   168                           ; 
   169                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   170                           ;        of conditions and the following disclaimer in the documentation and/or other
   171                           ;        materials provided with the distribution.
   172                           ; 
   173                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   174                           ;        software without specific prior written permission.
   175                           ; 
   176                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   177                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   178                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   179                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   180                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   181                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   182                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   183                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   184                           ; 
   185                           ; 
   186                           ; Code-generator required, PIC16LF1559 Definitions
   187                           ; 
   188                           ; SFR Addresses
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  000D                     	;# 
   203  000E                     	;# 
   204  0011                     	;# 
   205  0012                     	;# 
   206  0015                     	;# 
   207  0016                     	;# 
   208  0016                     	;# 
   209  0017                     	;# 
   210  0018                     	;# 
   211  0019                     	;# 
   212  001A                     	;# 
   213  001B                     	;# 
   214  001C                     	;# 
   215  008C                     	;# 
   216  008D                     	;# 
   217  008E                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0095                     	;# 
   221  0096                     	;# 
   222  0097                     	;# 
   223  0099                     	;# 
   224  009A                     	;# 
   225  009B                     	;# 
   226  009B                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  0116                     	;# 
   235  0117                     	;# 
   236  011D                     	;# 
   237  018C                     	;# 
   238  018D                     	;# 
   239  018E                     	;# 
   240  0191                     	;# 
   241  0191                     	;# 
   242  0192                     	;# 
   243  0193                     	;# 
   244  0193                     	;# 
   245  0194                     	;# 
   246  0195                     	;# 
   247  0196                     	;# 
   248  0199                     	;# 
   249  019A                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019C                     	;# 
   253  019D                     	;# 
   254  019E                     	;# 
   255  019F                     	;# 
   256  020C                     	;# 
   257  020D                     	;# 
   258  0211                     	;# 
   259  0211                     	;# 
   260  0212                     	;# 
   261  0212                     	;# 
   262  0213                     	;# 
   263  0213                     	;# 
   264  0214                     	;# 
   265  0214                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0216                     	;# 
   270  0216                     	;# 
   271  0217                     	;# 
   272  0217                     	;# 
   273  0391                     	;# 
   274  0392                     	;# 
   275  0393                     	;# 
   276  0394                     	;# 
   277  0395                     	;# 
   278  0396                     	;# 
   279  0611                     	;# 
   280  0612                     	;# 
   281  0613                     	;# 
   282  0613                     	;# 
   283  0614                     	;# 
   284  0615                     	;# 
   285  0616                     	;# 
   286  0616                     	;# 
   287  0711                     	;# 
   288  0711                     	;# 
   289  0711                     	;# 
   290  0712                     	;# 
   291  0712                     	;# 
   292  0713                     	;# 
   293  0713                     	;# 
   294  0713                     	;# 
   295  0714                     	;# 
   296  0714                     	;# 
   297  0714                     	;# 
   298  0715                     	;# 
   299  0715                     	;# 
   300  0716                     	;# 
   301  0716                     	;# 
   302  0716                     	;# 
   303  0716                     	;# 
   304  0717                     	;# 
   305  0717                     	;# 
   306  0717                     	;# 
   307  0717                     	;# 
   308  0718                     	;# 
   309  0718                     	;# 
   310  0718                     	;# 
   311  0719                     	;# 
   312  0719                     	;# 
   313  0719                     	;# 
   314  0719                     	;# 
   315  071A                     	;# 
   316  071A                     	;# 
   317  071A                     	;# 
   318  071A                     	;# 
   319  071A                     	;# 
   320  071B                     	;# 
   321  071B                     	;# 
   322  071C                     	;# 
   323  071C                     	;# 
   324  071C                     	;# 
   325  071C                     	;# 
   326  071C                     	;# 
   327  071D                     	;# 
   328  071D                     	;# 
   329  071E                     	;# 
   330  071E                     	;# 
   331  0791                     	;# 
   332  0791                     	;# 
   333  0793                     	;# 
   334  0793                     	;# 
   335  0794                     	;# 
   336  0794                     	;# 
   337  0796                     	;# 
   338  0796                     	;# 
   339  0796                     	;# 
   340  0797                     	;# 
   341  0797                     	;# 
   342  0797                     	;# 
   343  0798                     	;# 
   344  0798                     	;# 
   345  0799                     	;# 
   346  0799                     	;# 
   347  0799                     	;# 
   348  079A                     	;# 
   349  079A                     	;# 
   350  079A                     	;# 
   351  079B                     	;# 
   352  079C                     	;# 
   353  079C                     	;# 
   354  079C                     	;# 
   355  079D                     	;# 
   356  079E                     	;# 
   357  079E                     	;# 
   358  0F8C                     	;# 
   359  0F8D                     	;# 
   360  0F91                     	;# 
   361  0F96                     	;# 
   362  0F97                     	;# 
   363  0F9C                     	;# 
   364  0F9D                     	;# 
   365  0F9E                     	;# 
   366  0FE3                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0091                     	;# 
   408  0092                     	;# 
   409  0095                     	;# 
   410  0096                     	;# 
   411  0097                     	;# 
   412  0099                     	;# 
   413  009A                     	;# 
   414  009B                     	;# 
   415  009B                     	;# 
   416  009C                     	;# 
   417  009D                     	;# 
   418  009E                     	;# 
   419  009F                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0199                     	;# 
   438  019A                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019C                     	;# 
   442  019D                     	;# 
   443  019E                     	;# 
   444  019F                     	;# 
   445  020C                     	;# 
   446  020D                     	;# 
   447  0211                     	;# 
   448  0211                     	;# 
   449  0212                     	;# 
   450  0212                     	;# 
   451  0213                     	;# 
   452  0213                     	;# 
   453  0214                     	;# 
   454  0214                     	;# 
   455  0215                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0216                     	;# 
   459  0216                     	;# 
   460  0217                     	;# 
   461  0217                     	;# 
   462  0391                     	;# 
   463  0392                     	;# 
   464  0393                     	;# 
   465  0394                     	;# 
   466  0395                     	;# 
   467  0396                     	;# 
   468  0611                     	;# 
   469  0612                     	;# 
   470  0613                     	;# 
   471  0613                     	;# 
   472  0614                     	;# 
   473  0615                     	;# 
   474  0616                     	;# 
   475  0616                     	;# 
   476  0711                     	;# 
   477  0711                     	;# 
   478  0711                     	;# 
   479  0712                     	;# 
   480  0712                     	;# 
   481  0713                     	;# 
   482  0713                     	;# 
   483  0713                     	;# 
   484  0714                     	;# 
   485  0714                     	;# 
   486  0714                     	;# 
   487  0715                     	;# 
   488  0715                     	;# 
   489  0716                     	;# 
   490  0716                     	;# 
   491  0716                     	;# 
   492  0716                     	;# 
   493  0717                     	;# 
   494  0717                     	;# 
   495  0717                     	;# 
   496  0717                     	;# 
   497  0718                     	;# 
   498  0718                     	;# 
   499  0718                     	;# 
   500  0719                     	;# 
   501  0719                     	;# 
   502  0719                     	;# 
   503  0719                     	;# 
   504  071A                     	;# 
   505  071A                     	;# 
   506  071A                     	;# 
   507  071A                     	;# 
   508  071A                     	;# 
   509  071B                     	;# 
   510  071B                     	;# 
   511  071C                     	;# 
   512  071C                     	;# 
   513  071C                     	;# 
   514  071C                     	;# 
   515  071C                     	;# 
   516  071D                     	;# 
   517  071D                     	;# 
   518  071E                     	;# 
   519  071E                     	;# 
   520  0791                     	;# 
   521  0791                     	;# 
   522  0793                     	;# 
   523  0793                     	;# 
   524  0794                     	;# 
   525  0794                     	;# 
   526  0796                     	;# 
   527  0796                     	;# 
   528  0796                     	;# 
   529  0797                     	;# 
   530  0797                     	;# 
   531  0797                     	;# 
   532  0798                     	;# 
   533  0798                     	;# 
   534  0799                     	;# 
   535  0799                     	;# 
   536  0799                     	;# 
   537  079A                     	;# 
   538  079A                     	;# 
   539  079A                     	;# 
   540  079B                     	;# 
   541  079C                     	;# 
   542  079C                     	;# 
   543  079C                     	;# 
   544  079D                     	;# 
   545  079E                     	;# 
   546  079E                     	;# 
   547  0F8C                     	;# 
   548  0F8D                     	;# 
   549  0F91                     	;# 
   550  0F96                     	;# 
   551  0F97                     	;# 
   552  0F9C                     	;# 
   553  0F9D                     	;# 
   554  0F9E                     	;# 
   555  0FE3                     	;# 
   556  0FE4                     	;# 
   557  0FE5                     	;# 
   558  0FE6                     	;# 
   559  0FE7                     	;# 
   560  0FE8                     	;# 
   561  0FE9                     	;# 
   562  0FEA                     	;# 
   563  0FEB                     	;# 
   564  0FED                     	;# 
   565  0FEE                     	;# 
   566  0FEF                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  000E                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  0091                     	;# 
   597  0092                     	;# 
   598  0095                     	;# 
   599  0096                     	;# 
   600  0097                     	;# 
   601  0099                     	;# 
   602  009A                     	;# 
   603  009B                     	;# 
   604  009B                     	;# 
   605  009C                     	;# 
   606  009D                     	;# 
   607  009E                     	;# 
   608  009F                     	;# 
   609  010C                     	;# 
   610  010D                     	;# 
   611  010E                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  011D                     	;# 
   615  018C                     	;# 
   616  018D                     	;# 
   617  018E                     	;# 
   618  0191                     	;# 
   619  0191                     	;# 
   620  0192                     	;# 
   621  0193                     	;# 
   622  0193                     	;# 
   623  0194                     	;# 
   624  0195                     	;# 
   625  0196                     	;# 
   626  0199                     	;# 
   627  019A                     	;# 
   628  019B                     	;# 
   629  019B                     	;# 
   630  019C                     	;# 
   631  019D                     	;# 
   632  019E                     	;# 
   633  019F                     	;# 
   634  020C                     	;# 
   635  020D                     	;# 
   636  0211                     	;# 
   637  0211                     	;# 
   638  0212                     	;# 
   639  0212                     	;# 
   640  0213                     	;# 
   641  0213                     	;# 
   642  0214                     	;# 
   643  0214                     	;# 
   644  0215                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0216                     	;# 
   648  0216                     	;# 
   649  0217                     	;# 
   650  0217                     	;# 
   651  0391                     	;# 
   652  0392                     	;# 
   653  0393                     	;# 
   654  0394                     	;# 
   655  0395                     	;# 
   656  0396                     	;# 
   657  0611                     	;# 
   658  0612                     	;# 
   659  0613                     	;# 
   660  0613                     	;# 
   661  0614                     	;# 
   662  0615                     	;# 
   663  0616                     	;# 
   664  0616                     	;# 
   665  0711                     	;# 
   666  0711                     	;# 
   667  0711                     	;# 
   668  0712                     	;# 
   669  0712                     	;# 
   670  0713                     	;# 
   671  0713                     	;# 
   672  0713                     	;# 
   673  0714                     	;# 
   674  0714                     	;# 
   675  0714                     	;# 
   676  0715                     	;# 
   677  0715                     	;# 
   678  0716                     	;# 
   679  0716                     	;# 
   680  0716                     	;# 
   681  0716                     	;# 
   682  0717                     	;# 
   683  0717                     	;# 
   684  0717                     	;# 
   685  0717                     	;# 
   686  0718                     	;# 
   687  0718                     	;# 
   688  0718                     	;# 
   689  0719                     	;# 
   690  0719                     	;# 
   691  0719                     	;# 
   692  0719                     	;# 
   693  071A                     	;# 
   694  071A                     	;# 
   695  071A                     	;# 
   696  071A                     	;# 
   697  071A                     	;# 
   698  071B                     	;# 
   699  071B                     	;# 
   700  071C                     	;# 
   701  071C                     	;# 
   702  071C                     	;# 
   703  071C                     	;# 
   704  071C                     	;# 
   705  071D                     	;# 
   706  071D                     	;# 
   707  071E                     	;# 
   708  071E                     	;# 
   709  0791                     	;# 
   710  0791                     	;# 
   711  0793                     	;# 
   712  0793                     	;# 
   713  0794                     	;# 
   714  0794                     	;# 
   715  0796                     	;# 
   716  0796                     	;# 
   717  0796                     	;# 
   718  0797                     	;# 
   719  0797                     	;# 
   720  0797                     	;# 
   721  0798                     	;# 
   722  0798                     	;# 
   723  0799                     	;# 
   724  0799                     	;# 
   725  0799                     	;# 
   726  079A                     	;# 
   727  079A                     	;# 
   728  079A                     	;# 
   729  079B                     	;# 
   730  079C                     	;# 
   731  079C                     	;# 
   732  079C                     	;# 
   733  079D                     	;# 
   734  079E                     	;# 
   735  079E                     	;# 
   736  0F8C                     	;# 
   737  0F8D                     	;# 
   738  0F91                     	;# 
   739  0F96                     	;# 
   740  0F97                     	;# 
   741  0F9C                     	;# 
   742  0F9D                     	;# 
   743  0F9E                     	;# 
   744  0FE3                     	;# 
   745  0FE4                     	;# 
   746  0FE5                     	;# 
   747  0FE6                     	;# 
   748  0FE7                     	;# 
   749  0FE8                     	;# 
   750  0FE9                     	;# 
   751  0FEA                     	;# 
   752  0FEB                     	;# 
   753  0FED                     	;# 
   754  0FEE                     	;# 
   755  0FEF                     	;# 
   756  0000                     	;# 
   757  0001                     	;# 
   758  0002                     	;# 
   759  0003                     	;# 
   760  0004                     	;# 
   761  0005                     	;# 
   762  0006                     	;# 
   763  0007                     	;# 
   764  0008                     	;# 
   765  0009                     	;# 
   766  000A                     	;# 
   767  000B                     	;# 
   768  000C                     	;# 
   769  000D                     	;# 
   770  000E                     	;# 
   771  0011                     	;# 
   772  0012                     	;# 
   773  0015                     	;# 
   774  0016                     	;# 
   775  0016                     	;# 
   776  0017                     	;# 
   777  0018                     	;# 
   778  0019                     	;# 
   779  001A                     	;# 
   780  001B                     	;# 
   781  001C                     	;# 
   782  008C                     	;# 
   783  008D                     	;# 
   784  008E                     	;# 
   785  0091                     	;# 
   786  0092                     	;# 
   787  0095                     	;# 
   788  0096                     	;# 
   789  0097                     	;# 
   790  0099                     	;# 
   791  009A                     	;# 
   792  009B                     	;# 
   793  009B                     	;# 
   794  009C                     	;# 
   795  009D                     	;# 
   796  009E                     	;# 
   797  009F                     	;# 
   798  010C                     	;# 
   799  010D                     	;# 
   800  010E                     	;# 
   801  0116                     	;# 
   802  0117                     	;# 
   803  011D                     	;# 
   804  018C                     	;# 
   805  018D                     	;# 
   806  018E                     	;# 
   807  0191                     	;# 
   808  0191                     	;# 
   809  0192                     	;# 
   810  0193                     	;# 
   811  0193                     	;# 
   812  0194                     	;# 
   813  0195                     	;# 
   814  0196                     	;# 
   815  0199                     	;# 
   816  019A                     	;# 
   817  019B                     	;# 
   818  019B                     	;# 
   819  019C                     	;# 
   820  019D                     	;# 
   821  019E                     	;# 
   822  019F                     	;# 
   823  020C                     	;# 
   824  020D                     	;# 
   825  0211                     	;# 
   826  0211                     	;# 
   827  0212                     	;# 
   828  0212                     	;# 
   829  0213                     	;# 
   830  0213                     	;# 
   831  0214                     	;# 
   832  0214                     	;# 
   833  0215                     	;# 
   834  0215                     	;# 
   835  0215                     	;# 
   836  0216                     	;# 
   837  0216                     	;# 
   838  0217                     	;# 
   839  0217                     	;# 
   840  0391                     	;# 
   841  0392                     	;# 
   842  0393                     	;# 
   843  0394                     	;# 
   844  0395                     	;# 
   845  0396                     	;# 
   846  0611                     	;# 
   847  0612                     	;# 
   848  0613                     	;# 
   849  0613                     	;# 
   850  0614                     	;# 
   851  0615                     	;# 
   852  0616                     	;# 
   853  0616                     	;# 
   854  0711                     	;# 
   855  0711                     	;# 
   856  0711                     	;# 
   857  0712                     	;# 
   858  0712                     	;# 
   859  0713                     	;# 
   860  0713                     	;# 
   861  0713                     	;# 
   862  0714                     	;# 
   863  0714                     	;# 
   864  0714                     	;# 
   865  0715                     	;# 
   866  0715                     	;# 
   867  0716                     	;# 
   868  0716                     	;# 
   869  0716                     	;# 
   870  0716                     	;# 
   871  0717                     	;# 
   872  0717                     	;# 
   873  0717                     	;# 
   874  0717                     	;# 
   875  0718                     	;# 
   876  0718                     	;# 
   877  0718                     	;# 
   878  0719                     	;# 
   879  0719                     	;# 
   880  0719                     	;# 
   881  0719                     	;# 
   882  071A                     	;# 
   883  071A                     	;# 
   884  071A                     	;# 
   885  071A                     	;# 
   886  071A                     	;# 
   887  071B                     	;# 
   888  071B                     	;# 
   889  071C                     	;# 
   890  071C                     	;# 
   891  071C                     	;# 
   892  071C                     	;# 
   893  071C                     	;# 
   894  071D                     	;# 
   895  071D                     	;# 
   896  071E                     	;# 
   897  071E                     	;# 
   898  0791                     	;# 
   899  0791                     	;# 
   900  0793                     	;# 
   901  0793                     	;# 
   902  0794                     	;# 
   903  0794                     	;# 
   904  0796                     	;# 
   905  0796                     	;# 
   906  0796                     	;# 
   907  0797                     	;# 
   908  0797                     	;# 
   909  0797                     	;# 
   910  0798                     	;# 
   911  0798                     	;# 
   912  0799                     	;# 
   913  0799                     	;# 
   914  0799                     	;# 
   915  079A                     	;# 
   916  079A                     	;# 
   917  079A                     	;# 
   918  079B                     	;# 
   919  079C                     	;# 
   920  079C                     	;# 
   921  079C                     	;# 
   922  079D                     	;# 
   923  079E                     	;# 
   924  079E                     	;# 
   925  0F8C                     	;# 
   926  0F8D                     	;# 
   927  0F91                     	;# 
   928  0F96                     	;# 
   929  0F97                     	;# 
   930  0F9C                     	;# 
   931  0F9D                     	;# 
   932  0F9E                     	;# 
   933  0FE3                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  009F                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019E                     	;# 
  1011  019F                     	;# 
  1012  020C                     	;# 
  1013  020D                     	;# 
  1014  0211                     	;# 
  1015  0211                     	;# 
  1016  0212                     	;# 
  1017  0212                     	;# 
  1018  0213                     	;# 
  1019  0213                     	;# 
  1020  0214                     	;# 
  1021  0214                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0216                     	;# 
  1026  0216                     	;# 
  1027  0217                     	;# 
  1028  0217                     	;# 
  1029  0391                     	;# 
  1030  0392                     	;# 
  1031  0393                     	;# 
  1032  0394                     	;# 
  1033  0395                     	;# 
  1034  0396                     	;# 
  1035  0611                     	;# 
  1036  0612                     	;# 
  1037  0613                     	;# 
  1038  0613                     	;# 
  1039  0614                     	;# 
  1040  0615                     	;# 
  1041  0616                     	;# 
  1042  0616                     	;# 
  1043  0711                     	;# 
  1044  0711                     	;# 
  1045  0711                     	;# 
  1046  0712                     	;# 
  1047  0712                     	;# 
  1048  0713                     	;# 
  1049  0713                     	;# 
  1050  0713                     	;# 
  1051  0714                     	;# 
  1052  0714                     	;# 
  1053  0714                     	;# 
  1054  0715                     	;# 
  1055  0715                     	;# 
  1056  0716                     	;# 
  1057  0716                     	;# 
  1058  0716                     	;# 
  1059  0716                     	;# 
  1060  0717                     	;# 
  1061  0717                     	;# 
  1062  0717                     	;# 
  1063  0717                     	;# 
  1064  0718                     	;# 
  1065  0718                     	;# 
  1066  0718                     	;# 
  1067  0719                     	;# 
  1068  0719                     	;# 
  1069  0719                     	;# 
  1070  0719                     	;# 
  1071  071A                     	;# 
  1072  071A                     	;# 
  1073  071A                     	;# 
  1074  071A                     	;# 
  1075  071A                     	;# 
  1076  071B                     	;# 
  1077  071B                     	;# 
  1078  071C                     	;# 
  1079  071C                     	;# 
  1080  071C                     	;# 
  1081  071C                     	;# 
  1082  071C                     	;# 
  1083  071D                     	;# 
  1084  071D                     	;# 
  1085  071E                     	;# 
  1086  071E                     	;# 
  1087  0791                     	;# 
  1088  0791                     	;# 
  1089  0793                     	;# 
  1090  0793                     	;# 
  1091  0794                     	;# 
  1092  0794                     	;# 
  1093  0796                     	;# 
  1094  0796                     	;# 
  1095  0796                     	;# 
  1096  0797                     	;# 
  1097  0797                     	;# 
  1098  0797                     	;# 
  1099  0798                     	;# 
  1100  0798                     	;# 
  1101  0799                     	;# 
  1102  0799                     	;# 
  1103  0799                     	;# 
  1104  079A                     	;# 
  1105  079A                     	;# 
  1106  079A                     	;# 
  1107  079B                     	;# 
  1108  079C                     	;# 
  1109  079C                     	;# 
  1110  079C                     	;# 
  1111  079D                     	;# 
  1112  079E                     	;# 
  1113  079E                     	;# 
  1114  0F8C                     	;# 
  1115  0F8D                     	;# 
  1116  0F91                     	;# 
  1117  0F96                     	;# 
  1118  0F97                     	;# 
  1119  0F9C                     	;# 
  1120  0F9D                     	;# 
  1121  0F9E                     	;# 
  1122  0FE3                     	;# 
  1123  0FE4                     	;# 
  1124  0FE5                     	;# 
  1125  0FE6                     	;# 
  1126  0FE7                     	;# 
  1127  0FE8                     	;# 
  1128  0FE9                     	;# 
  1129  0FEA                     	;# 
  1130  0FEB                     	;# 
  1131  0FED                     	;# 
  1132  0FEE                     	;# 
  1133  0FEF                     	;# 
  1134  0000                     	;# 
  1135  0001                     	;# 
  1136  0002                     	;# 
  1137  0003                     	;# 
  1138  0004                     	;# 
  1139  0005                     	;# 
  1140  0006                     	;# 
  1141  0007                     	;# 
  1142  0008                     	;# 
  1143  0009                     	;# 
  1144  000A                     	;# 
  1145  000B                     	;# 
  1146  000C                     	;# 
  1147  000D                     	;# 
  1148  000E                     	;# 
  1149  0011                     	;# 
  1150  0012                     	;# 
  1151  0015                     	;# 
  1152  0016                     	;# 
  1153  0016                     	;# 
  1154  0017                     	;# 
  1155  0018                     	;# 
  1156  0019                     	;# 
  1157  001A                     	;# 
  1158  001B                     	;# 
  1159  001C                     	;# 
  1160  008C                     	;# 
  1161  008D                     	;# 
  1162  008E                     	;# 
  1163  0091                     	;# 
  1164  0092                     	;# 
  1165  0095                     	;# 
  1166  0096                     	;# 
  1167  0097                     	;# 
  1168  0099                     	;# 
  1169  009A                     	;# 
  1170  009B                     	;# 
  1171  009B                     	;# 
  1172  009C                     	;# 
  1173  009D                     	;# 
  1174  009E                     	;# 
  1175  009F                     	;# 
  1176  010C                     	;# 
  1177  010D                     	;# 
  1178  010E                     	;# 
  1179  0116                     	;# 
  1180  0117                     	;# 
  1181  011D                     	;# 
  1182  018C                     	;# 
  1183  018D                     	;# 
  1184  018E                     	;# 
  1185  0191                     	;# 
  1186  0191                     	;# 
  1187  0192                     	;# 
  1188  0193                     	;# 
  1189  0193                     	;# 
  1190  0194                     	;# 
  1191  0195                     	;# 
  1192  0196                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019C                     	;# 
  1198  019D                     	;# 
  1199  019E                     	;# 
  1200  019F                     	;# 
  1201  020C                     	;# 
  1202  020D                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0391                     	;# 
  1219  0392                     	;# 
  1220  0393                     	;# 
  1221  0394                     	;# 
  1222  0395                     	;# 
  1223  0396                     	;# 
  1224  0611                     	;# 
  1225  0612                     	;# 
  1226  0613                     	;# 
  1227  0613                     	;# 
  1228  0614                     	;# 
  1229  0615                     	;# 
  1230  0616                     	;# 
  1231  0616                     	;# 
  1232  0711                     	;# 
  1233  0711                     	;# 
  1234  0711                     	;# 
  1235  0712                     	;# 
  1236  0712                     	;# 
  1237  0713                     	;# 
  1238  0713                     	;# 
  1239  0713                     	;# 
  1240  0714                     	;# 
  1241  0714                     	;# 
  1242  0714                     	;# 
  1243  0715                     	;# 
  1244  0715                     	;# 
  1245  0716                     	;# 
  1246  0716                     	;# 
  1247  0716                     	;# 
  1248  0716                     	;# 
  1249  0717                     	;# 
  1250  0717                     	;# 
  1251  0717                     	;# 
  1252  0717                     	;# 
  1253  0718                     	;# 
  1254  0718                     	;# 
  1255  0718                     	;# 
  1256  0719                     	;# 
  1257  0719                     	;# 
  1258  0719                     	;# 
  1259  0719                     	;# 
  1260  071A                     	;# 
  1261  071A                     	;# 
  1262  071A                     	;# 
  1263  071A                     	;# 
  1264  071A                     	;# 
  1265  071B                     	;# 
  1266  071B                     	;# 
  1267  071C                     	;# 
  1268  071C                     	;# 
  1269  071C                     	;# 
  1270  071C                     	;# 
  1271  071C                     	;# 
  1272  071D                     	;# 
  1273  071D                     	;# 
  1274  071E                     	;# 
  1275  071E                     	;# 
  1276  0791                     	;# 
  1277  0791                     	;# 
  1278  0793                     	;# 
  1279  0793                     	;# 
  1280  0794                     	;# 
  1281  0794                     	;# 
  1282  0796                     	;# 
  1283  0796                     	;# 
  1284  0796                     	;# 
  1285  0797                     	;# 
  1286  0797                     	;# 
  1287  0797                     	;# 
  1288  0798                     	;# 
  1289  0798                     	;# 
  1290  0799                     	;# 
  1291  0799                     	;# 
  1292  0799                     	;# 
  1293  079A                     	;# 
  1294  079A                     	;# 
  1295  079A                     	;# 
  1296  079B                     	;# 
  1297  079C                     	;# 
  1298  079C                     	;# 
  1299  079C                     	;# 
  1300  079D                     	;# 
  1301  079E                     	;# 
  1302  079E                     	;# 
  1303  0F8C                     	;# 
  1304  0F8D                     	;# 
  1305  0F91                     	;# 
  1306  0F96                     	;# 
  1307  0F97                     	;# 
  1308  0F9C                     	;# 
  1309  0F9D                     	;# 
  1310  0F9E                     	;# 
  1311  0FE3                     	;# 
  1312  0FE4                     	;# 
  1313  0FE5                     	;# 
  1314  0FE6                     	;# 
  1315  0FE7                     	;# 
  1316  0FE8                     	;# 
  1317  0FE9                     	;# 
  1318  0FEA                     	;# 
  1319  0FEB                     	;# 
  1320  0FED                     	;# 
  1321  0FEE                     	;# 
  1322  0FEF                     	;# 
  1323  0000                     	;# 
  1324  0001                     	;# 
  1325  0002                     	;# 
  1326  0003                     	;# 
  1327  0004                     	;# 
  1328  0005                     	;# 
  1329  0006                     	;# 
  1330  0007                     	;# 
  1331  0008                     	;# 
  1332  0009                     	;# 
  1333  000A                     	;# 
  1334  000B                     	;# 
  1335  000C                     	;# 
  1336  000D                     	;# 
  1337  000E                     	;# 
  1338  0011                     	;# 
  1339  0012                     	;# 
  1340  0015                     	;# 
  1341  0016                     	;# 
  1342  0016                     	;# 
  1343  0017                     	;# 
  1344  0018                     	;# 
  1345  0019                     	;# 
  1346  001A                     	;# 
  1347  001B                     	;# 
  1348  001C                     	;# 
  1349  008C                     	;# 
  1350  008D                     	;# 
  1351  008E                     	;# 
  1352  0091                     	;# 
  1353  0092                     	;# 
  1354  0095                     	;# 
  1355  0096                     	;# 
  1356  0097                     	;# 
  1357  0099                     	;# 
  1358  009A                     	;# 
  1359  009B                     	;# 
  1360  009B                     	;# 
  1361  009C                     	;# 
  1362  009D                     	;# 
  1363  009E                     	;# 
  1364  009F                     	;# 
  1365  010C                     	;# 
  1366  010D                     	;# 
  1367  010E                     	;# 
  1368  0116                     	;# 
  1369  0117                     	;# 
  1370  011D                     	;# 
  1371  018C                     	;# 
  1372  018D                     	;# 
  1373  018E                     	;# 
  1374  0191                     	;# 
  1375  0191                     	;# 
  1376  0192                     	;# 
  1377  0193                     	;# 
  1378  0193                     	;# 
  1379  0194                     	;# 
  1380  0195                     	;# 
  1381  0196                     	;# 
  1382  0199                     	;# 
  1383  019A                     	;# 
  1384  019B                     	;# 
  1385  019B                     	;# 
  1386  019C                     	;# 
  1387  019D                     	;# 
  1388  019E                     	;# 
  1389  019F                     	;# 
  1390  020C                     	;# 
  1391  020D                     	;# 
  1392  0211                     	;# 
  1393  0211                     	;# 
  1394  0212                     	;# 
  1395  0212                     	;# 
  1396  0213                     	;# 
  1397  0213                     	;# 
  1398  0214                     	;# 
  1399  0214                     	;# 
  1400  0215                     	;# 
  1401  0215                     	;# 
  1402  0215                     	;# 
  1403  0216                     	;# 
  1404  0216                     	;# 
  1405  0217                     	;# 
  1406  0217                     	;# 
  1407  0391                     	;# 
  1408  0392                     	;# 
  1409  0393                     	;# 
  1410  0394                     	;# 
  1411  0395                     	;# 
  1412  0396                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0613                     	;# 
  1417  0614                     	;# 
  1418  0615                     	;# 
  1419  0616                     	;# 
  1420  0616                     	;# 
  1421  0711                     	;# 
  1422  0711                     	;# 
  1423  0711                     	;# 
  1424  0712                     	;# 
  1425  0712                     	;# 
  1426  0713                     	;# 
  1427  0713                     	;# 
  1428  0713                     	;# 
  1429  0714                     	;# 
  1430  0714                     	;# 
  1431  0714                     	;# 
  1432  0715                     	;# 
  1433  0715                     	;# 
  1434  0716                     	;# 
  1435  0716                     	;# 
  1436  0716                     	;# 
  1437  0716                     	;# 
  1438  0717                     	;# 
  1439  0717                     	;# 
  1440  0717                     	;# 
  1441  0717                     	;# 
  1442  0718                     	;# 
  1443  0718                     	;# 
  1444  0718                     	;# 
  1445  0719                     	;# 
  1446  0719                     	;# 
  1447  0719                     	;# 
  1448  0719                     	;# 
  1449  071A                     	;# 
  1450  071A                     	;# 
  1451  071A                     	;# 
  1452  071A                     	;# 
  1453  071A                     	;# 
  1454  071B                     	;# 
  1455  071B                     	;# 
  1456  071C                     	;# 
  1457  071C                     	;# 
  1458  071C                     	;# 
  1459  071C                     	;# 
  1460  071C                     	;# 
  1461  071D                     	;# 
  1462  071D                     	;# 
  1463  071E                     	;# 
  1464  071E                     	;# 
  1465  0791                     	;# 
  1466  0791                     	;# 
  1467  0793                     	;# 
  1468  0793                     	;# 
  1469  0794                     	;# 
  1470  0794                     	;# 
  1471  0796                     	;# 
  1472  0796                     	;# 
  1473  0796                     	;# 
  1474  0797                     	;# 
  1475  0797                     	;# 
  1476  0797                     	;# 
  1477  0798                     	;# 
  1478  0798                     	;# 
  1479  0799                     	;# 
  1480  0799                     	;# 
  1481  0799                     	;# 
  1482  079A                     	;# 
  1483  079A                     	;# 
  1484  079A                     	;# 
  1485  079B                     	;# 
  1486  079C                     	;# 
  1487  079C                     	;# 
  1488  079C                     	;# 
  1489  079D                     	;# 
  1490  079E                     	;# 
  1491  079E                     	;# 
  1492  0F8C                     	;# 
  1493  0F8D                     	;# 
  1494  0F91                     	;# 
  1495  0F96                     	;# 
  1496  0F97                     	;# 
  1497  0F9C                     	;# 
  1498  0F9D                     	;# 
  1499  0F9E                     	;# 
  1500  0FE3                     	;# 
  1501  0FE4                     	;# 
  1502  0FE5                     	;# 
  1503  0FE6                     	;# 
  1504  0FE7                     	;# 
  1505  0FE8                     	;# 
  1506  0FE9                     	;# 
  1507  0FEA                     	;# 
  1508  0FEB                     	;# 
  1509  0FED                     	;# 
  1510  0FEE                     	;# 
  1511  0FEF                     	;# 
  1512  0000                     	;# 
  1513  0001                     	;# 
  1514  0002                     	;# 
  1515  0003                     	;# 
  1516  0004                     	;# 
  1517  0005                     	;# 
  1518  0006                     	;# 
  1519  0007                     	;# 
  1520  0008                     	;# 
  1521  0009                     	;# 
  1522  000A                     	;# 
  1523  000B                     	;# 
  1524  000C                     	;# 
  1525  000D                     	;# 
  1526  000E                     	;# 
  1527  0011                     	;# 
  1528  0012                     	;# 
  1529  0015                     	;# 
  1530  0016                     	;# 
  1531  0016                     	;# 
  1532  0017                     	;# 
  1533  0018                     	;# 
  1534  0019                     	;# 
  1535  001A                     	;# 
  1536  001B                     	;# 
  1537  001C                     	;# 
  1538  008C                     	;# 
  1539  008D                     	;# 
  1540  008E                     	;# 
  1541  0091                     	;# 
  1542  0092                     	;# 
  1543  0095                     	;# 
  1544  0096                     	;# 
  1545  0097                     	;# 
  1546  0099                     	;# 
  1547  009A                     	;# 
  1548  009B                     	;# 
  1549  009B                     	;# 
  1550  009C                     	;# 
  1551  009D                     	;# 
  1552  009E                     	;# 
  1553  009F                     	;# 
  1554  010C                     	;# 
  1555  010D                     	;# 
  1556  010E                     	;# 
  1557  0116                     	;# 
  1558  0117                     	;# 
  1559  011D                     	;# 
  1560  018C                     	;# 
  1561  018D                     	;# 
  1562  018E                     	;# 
  1563  0191                     	;# 
  1564  0191                     	;# 
  1565  0192                     	;# 
  1566  0193                     	;# 
  1567  0193                     	;# 
  1568  0194                     	;# 
  1569  0195                     	;# 
  1570  0196                     	;# 
  1571  0199                     	;# 
  1572  019A                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019C                     	;# 
  1576  019D                     	;# 
  1577  019E                     	;# 
  1578  019F                     	;# 
  1579  020C                     	;# 
  1580  020D                     	;# 
  1581  0211                     	;# 
  1582  0211                     	;# 
  1583  0212                     	;# 
  1584  0212                     	;# 
  1585  0213                     	;# 
  1586  0213                     	;# 
  1587  0214                     	;# 
  1588  0214                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0216                     	;# 
  1593  0216                     	;# 
  1594  0217                     	;# 
  1595  0217                     	;# 
  1596  0391                     	;# 
  1597  0392                     	;# 
  1598  0393                     	;# 
  1599  0394                     	;# 
  1600  0395                     	;# 
  1601  0396                     	;# 
  1602  0611                     	;# 
  1603  0612                     	;# 
  1604  0613                     	;# 
  1605  0613                     	;# 
  1606  0614                     	;# 
  1607  0615                     	;# 
  1608  0616                     	;# 
  1609  0616                     	;# 
  1610  0711                     	;# 
  1611  0711                     	;# 
  1612  0711                     	;# 
  1613  0712                     	;# 
  1614  0712                     	;# 
  1615  0713                     	;# 
  1616  0713                     	;# 
  1617  0713                     	;# 
  1618  0714                     	;# 
  1619  0714                     	;# 
  1620  0714                     	;# 
  1621  0715                     	;# 
  1622  0715                     	;# 
  1623  0716                     	;# 
  1624  0716                     	;# 
  1625  0716                     	;# 
  1626  0716                     	;# 
  1627  0717                     	;# 
  1628  0717                     	;# 
  1629  0717                     	;# 
  1630  0717                     	;# 
  1631  0718                     	;# 
  1632  0718                     	;# 
  1633  0718                     	;# 
  1634  0719                     	;# 
  1635  0719                     	;# 
  1636  0719                     	;# 
  1637  0719                     	;# 
  1638  071A                     	;# 
  1639  071A                     	;# 
  1640  071A                     	;# 
  1641  071A                     	;# 
  1642  071A                     	;# 
  1643  071B                     	;# 
  1644  071B                     	;# 
  1645  071C                     	;# 
  1646  071C                     	;# 
  1647  071C                     	;# 
  1648  071C                     	;# 
  1649  071C                     	;# 
  1650  071D                     	;# 
  1651  071D                     	;# 
  1652  071E                     	;# 
  1653  071E                     	;# 
  1654  0791                     	;# 
  1655  0791                     	;# 
  1656  0793                     	;# 
  1657  0793                     	;# 
  1658  0794                     	;# 
  1659  0794                     	;# 
  1660  0796                     	;# 
  1661  0796                     	;# 
  1662  0796                     	;# 
  1663  0797                     	;# 
  1664  0797                     	;# 
  1665  0797                     	;# 
  1666  0798                     	;# 
  1667  0798                     	;# 
  1668  0799                     	;# 
  1669  0799                     	;# 
  1670  0799                     	;# 
  1671  079A                     	;# 
  1672  079A                     	;# 
  1673  079A                     	;# 
  1674  079B                     	;# 
  1675  079C                     	;# 
  1676  079C                     	;# 
  1677  079C                     	;# 
  1678  079D                     	;# 
  1679  079E                     	;# 
  1680  079E                     	;# 
  1681  0F8C                     	;# 
  1682  0F8D                     	;# 
  1683  0F91                     	;# 
  1684  0F96                     	;# 
  1685  0F97                     	;# 
  1686  0F9C                     	;# 
  1687  0F9D                     	;# 
  1688  0F9E                     	;# 
  1689  0FE3                     	;# 
  1690  0FE4                     	;# 
  1691  0FE5                     	;# 
  1692  0FE6                     	;# 
  1693  0FE7                     	;# 
  1694  0FE8                     	;# 
  1695  0FE9                     	;# 
  1696  0FEA                     	;# 
  1697  0FEB                     	;# 
  1698  0FED                     	;# 
  1699  0FEE                     	;# 
  1700  0FEF                     	;# 
  1701  0000                     	;# 
  1702  0001                     	;# 
  1703  0002                     	;# 
  1704  0003                     	;# 
  1705  0004                     	;# 
  1706  0005                     	;# 
  1707  0006                     	;# 
  1708  0007                     	;# 
  1709  0008                     	;# 
  1710  0009                     	;# 
  1711  000A                     	;# 
  1712  000B                     	;# 
  1713  000C                     	;# 
  1714  000D                     	;# 
  1715  000E                     	;# 
  1716  0011                     	;# 
  1717  0012                     	;# 
  1718  0015                     	;# 
  1719  0016                     	;# 
  1720  0016                     	;# 
  1721  0017                     	;# 
  1722  0018                     	;# 
  1723  0019                     	;# 
  1724  001A                     	;# 
  1725  001B                     	;# 
  1726  001C                     	;# 
  1727  008C                     	;# 
  1728  008D                     	;# 
  1729  008E                     	;# 
  1730  0091                     	;# 
  1731  0092                     	;# 
  1732  0095                     	;# 
  1733  0096                     	;# 
  1734  0097                     	;# 
  1735  0099                     	;# 
  1736  009A                     	;# 
  1737  009B                     	;# 
  1738  009B                     	;# 
  1739  009C                     	;# 
  1740  009D                     	;# 
  1741  009E                     	;# 
  1742  009F                     	;# 
  1743  010C                     	;# 
  1744  010D                     	;# 
  1745  010E                     	;# 
  1746  0116                     	;# 
  1747  0117                     	;# 
  1748  011D                     	;# 
  1749  018C                     	;# 
  1750  018D                     	;# 
  1751  018E                     	;# 
  1752  0191                     	;# 
  1753  0191                     	;# 
  1754  0192                     	;# 
  1755  0193                     	;# 
  1756  0193                     	;# 
  1757  0194                     	;# 
  1758  0195                     	;# 
  1759  0196                     	;# 
  1760  0199                     	;# 
  1761  019A                     	;# 
  1762  019B                     	;# 
  1763  019B                     	;# 
  1764  019C                     	;# 
  1765  019D                     	;# 
  1766  019E                     	;# 
  1767  019F                     	;# 
  1768  020C                     	;# 
  1769  020D                     	;# 
  1770  0211                     	;# 
  1771  0211                     	;# 
  1772  0212                     	;# 
  1773  0212                     	;# 
  1774  0213                     	;# 
  1775  0213                     	;# 
  1776  0214                     	;# 
  1777  0214                     	;# 
  1778  0215                     	;# 
  1779  0215                     	;# 
  1780  0215                     	;# 
  1781  0216                     	;# 
  1782  0216                     	;# 
  1783  0217                     	;# 
  1784  0217                     	;# 
  1785  0391                     	;# 
  1786  0392                     	;# 
  1787  0393                     	;# 
  1788  0394                     	;# 
  1789  0395                     	;# 
  1790  0396                     	;# 
  1791  0611                     	;# 
  1792  0612                     	;# 
  1793  0613                     	;# 
  1794  0613                     	;# 
  1795  0614                     	;# 
  1796  0615                     	;# 
  1797  0616                     	;# 
  1798  0616                     	;# 
  1799  0711                     	;# 
  1800  0711                     	;# 
  1801  0711                     	;# 
  1802  0712                     	;# 
  1803  0712                     	;# 
  1804  0713                     	;# 
  1805  0713                     	;# 
  1806  0713                     	;# 
  1807  0714                     	;# 
  1808  0714                     	;# 
  1809  0714                     	;# 
  1810  0715                     	;# 
  1811  0715                     	;# 
  1812  0716                     	;# 
  1813  0716                     	;# 
  1814  0716                     	;# 
  1815  0716                     	;# 
  1816  0717                     	;# 
  1817  0717                     	;# 
  1818  0717                     	;# 
  1819  0717                     	;# 
  1820  0718                     	;# 
  1821  0718                     	;# 
  1822  0718                     	;# 
  1823  0719                     	;# 
  1824  0719                     	;# 
  1825  0719                     	;# 
  1826  0719                     	;# 
  1827  071A                     	;# 
  1828  071A                     	;# 
  1829  071A                     	;# 
  1830  071A                     	;# 
  1831  071A                     	;# 
  1832  071B                     	;# 
  1833  071B                     	;# 
  1834  071C                     	;# 
  1835  071C                     	;# 
  1836  071C                     	;# 
  1837  071C                     	;# 
  1838  071C                     	;# 
  1839  071D                     	;# 
  1840  071D                     	;# 
  1841  071E                     	;# 
  1842  071E                     	;# 
  1843  0791                     	;# 
  1844  0791                     	;# 
  1845  0793                     	;# 
  1846  0793                     	;# 
  1847  0794                     	;# 
  1848  0794                     	;# 
  1849  0796                     	;# 
  1850  0796                     	;# 
  1851  0796                     	;# 
  1852  0797                     	;# 
  1853  0797                     	;# 
  1854  0797                     	;# 
  1855  0798                     	;# 
  1856  0798                     	;# 
  1857  0799                     	;# 
  1858  0799                     	;# 
  1859  0799                     	;# 
  1860  079A                     	;# 
  1861  079A                     	;# 
  1862  079A                     	;# 
  1863  079B                     	;# 
  1864  079C                     	;# 
  1865  079C                     	;# 
  1866  079C                     	;# 
  1867  079D                     	;# 
  1868  079E                     	;# 
  1869  079E                     	;# 
  1870  0F8C                     	;# 
  1871  0F8D                     	;# 
  1872  0F91                     	;# 
  1873  0F96                     	;# 
  1874  0F97                     	;# 
  1875  0F9C                     	;# 
  1876  0F9D                     	;# 
  1877  0F9E                     	;# 
  1878  0FE3                     	;# 
  1879  0FE4                     	;# 
  1880  0FE5                     	;# 
  1881  0FE6                     	;# 
  1882  0FE7                     	;# 
  1883  0FE8                     	;# 
  1884  0FE9                     	;# 
  1885  0FEA                     	;# 
  1886  0FEB                     	;# 
  1887  0FED                     	;# 
  1888  0FEE                     	;# 
  1889  0FEF                     	;# 
  1890  0000                     	;# 
  1891  0001                     	;# 
  1892  0002                     	;# 
  1893  0003                     	;# 
  1894  0004                     	;# 
  1895  0005                     	;# 
  1896  0006                     	;# 
  1897  0007                     	;# 
  1898  0008                     	;# 
  1899  0009                     	;# 
  1900  000A                     	;# 
  1901  000B                     	;# 
  1902  000C                     	;# 
  1903  000D                     	;# 
  1904  000E                     	;# 
  1905  0011                     	;# 
  1906  0012                     	;# 
  1907  0015                     	;# 
  1908  0016                     	;# 
  1909  0016                     	;# 
  1910  0017                     	;# 
  1911  0018                     	;# 
  1912  0019                     	;# 
  1913  001A                     	;# 
  1914  001B                     	;# 
  1915  001C                     	;# 
  1916  008C                     	;# 
  1917  008D                     	;# 
  1918  008E                     	;# 
  1919  0091                     	;# 
  1920  0092                     	;# 
  1921  0095                     	;# 
  1922  0096                     	;# 
  1923  0097                     	;# 
  1924  0099                     	;# 
  1925  009A                     	;# 
  1926  009B                     	;# 
  1927  009B                     	;# 
  1928  009C                     	;# 
  1929  009D                     	;# 
  1930  009E                     	;# 
  1931  009F                     	;# 
  1932  010C                     	;# 
  1933  010D                     	;# 
  1934  010E                     	;# 
  1935  0116                     	;# 
  1936  0117                     	;# 
  1937  011D                     	;# 
  1938  018C                     	;# 
  1939  018D                     	;# 
  1940  018E                     	;# 
  1941  0191                     	;# 
  1942  0191                     	;# 
  1943  0192                     	;# 
  1944  0193                     	;# 
  1945  0193                     	;# 
  1946  0194                     	;# 
  1947  0195                     	;# 
  1948  0196                     	;# 
  1949  0199                     	;# 
  1950  019A                     	;# 
  1951  019B                     	;# 
  1952  019B                     	;# 
  1953  019C                     	;# 
  1954  019D                     	;# 
  1955  019E                     	;# 
  1956  019F                     	;# 
  1957  020C                     	;# 
  1958  020D                     	;# 
  1959  0211                     	;# 
  1960  0211                     	;# 
  1961  0212                     	;# 
  1962  0212                     	;# 
  1963  0213                     	;# 
  1964  0213                     	;# 
  1965  0214                     	;# 
  1966  0214                     	;# 
  1967  0215                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0216                     	;# 
  1971  0216                     	;# 
  1972  0217                     	;# 
  1973  0217                     	;# 
  1974  0391                     	;# 
  1975  0392                     	;# 
  1976  0393                     	;# 
  1977  0394                     	;# 
  1978  0395                     	;# 
  1979  0396                     	;# 
  1980  0611                     	;# 
  1981  0612                     	;# 
  1982  0613                     	;# 
  1983  0613                     	;# 
  1984  0614                     	;# 
  1985  0615                     	;# 
  1986  0616                     	;# 
  1987  0616                     	;# 
  1988  0711                     	;# 
  1989  0711                     	;# 
  1990  0711                     	;# 
  1991  0712                     	;# 
  1992  0712                     	;# 
  1993  0713                     	;# 
  1994  0713                     	;# 
  1995  0713                     	;# 
  1996  0714                     	;# 
  1997  0714                     	;# 
  1998  0714                     	;# 
  1999  0715                     	;# 
  2000  0715                     	;# 
  2001  0716                     	;# 
  2002  0716                     	;# 
  2003  0716                     	;# 
  2004  0716                     	;# 
  2005  0717                     	;# 
  2006  0717                     	;# 
  2007  0717                     	;# 
  2008  0717                     	;# 
  2009  0718                     	;# 
  2010  0718                     	;# 
  2011  0718                     	;# 
  2012  0719                     	;# 
  2013  0719                     	;# 
  2014  0719                     	;# 
  2015  0719                     	;# 
  2016  071A                     	;# 
  2017  071A                     	;# 
  2018  071A                     	;# 
  2019  071A                     	;# 
  2020  071A                     	;# 
  2021  071B                     	;# 
  2022  071B                     	;# 
  2023  071C                     	;# 
  2024  071C                     	;# 
  2025  071C                     	;# 
  2026  071C                     	;# 
  2027  071C                     	;# 
  2028  071D                     	;# 
  2029  071D                     	;# 
  2030  071E                     	;# 
  2031  071E                     	;# 
  2032  0791                     	;# 
  2033  0791                     	;# 
  2034  0793                     	;# 
  2035  0793                     	;# 
  2036  0794                     	;# 
  2037  0794                     	;# 
  2038  0796                     	;# 
  2039  0796                     	;# 
  2040  0796                     	;# 
  2041  0797                     	;# 
  2042  0797                     	;# 
  2043  0797                     	;# 
  2044  0798                     	;# 
  2045  0798                     	;# 
  2046  0799                     	;# 
  2047  0799                     	;# 
  2048  0799                     	;# 
  2049  079A                     	;# 
  2050  079A                     	;# 
  2051  079A                     	;# 
  2052  079B                     	;# 
  2053  079C                     	;# 
  2054  079C                     	;# 
  2055  079C                     	;# 
  2056  079D                     	;# 
  2057  079E                     	;# 
  2058  079E                     	;# 
  2059  0F8C                     	;# 
  2060  0F8D                     	;# 
  2061  0F91                     	;# 
  2062  0F96                     	;# 
  2063  0F97                     	;# 
  2064  0F9C                     	;# 
  2065  0F9D                     	;# 
  2066  0F9E                     	;# 
  2067  0FE3                     	;# 
  2068  0FE4                     	;# 
  2069  0FE5                     	;# 
  2070  0FE6                     	;# 
  2071  0FE7                     	;# 
  2072  0FE8                     	;# 
  2073  0FE9                     	;# 
  2074  0FEA                     	;# 
  2075  0FEB                     	;# 
  2076  0FED                     	;# 
  2077  0FEE                     	;# 
  2078  0FEF                     	;# 
  2079  0000                     	;# 
  2080  0001                     	;# 
  2081  0002                     	;# 
  2082  0003                     	;# 
  2083  0004                     	;# 
  2084  0005                     	;# 
  2085  0006                     	;# 
  2086  0007                     	;# 
  2087  0008                     	;# 
  2088  0009                     	;# 
  2089  000A                     	;# 
  2090  000B                     	;# 
  2091  000C                     	;# 
  2092  000D                     	;# 
  2093  000E                     	;# 
  2094  0011                     	;# 
  2095  0012                     	;# 
  2096  0015                     	;# 
  2097  0016                     	;# 
  2098  0016                     	;# 
  2099  0017                     	;# 
  2100  0018                     	;# 
  2101  0019                     	;# 
  2102  001A                     	;# 
  2103  001B                     	;# 
  2104  001C                     	;# 
  2105  008C                     	;# 
  2106  008D                     	;# 
  2107  008E                     	;# 
  2108  0091                     	;# 
  2109  0092                     	;# 
  2110  0095                     	;# 
  2111  0096                     	;# 
  2112  0097                     	;# 
  2113  0099                     	;# 
  2114  009A                     	;# 
  2115  009B                     	;# 
  2116  009B                     	;# 
  2117  009C                     	;# 
  2118  009D                     	;# 
  2119  009E                     	;# 
  2120  009F                     	;# 
  2121  010C                     	;# 
  2122  010D                     	;# 
  2123  010E                     	;# 
  2124  0116                     	;# 
  2125  0117                     	;# 
  2126  011D                     	;# 
  2127  018C                     	;# 
  2128  018D                     	;# 
  2129  018E                     	;# 
  2130  0191                     	;# 
  2131  0191                     	;# 
  2132  0192                     	;# 
  2133  0193                     	;# 
  2134  0193                     	;# 
  2135  0194                     	;# 
  2136  0195                     	;# 
  2137  0196                     	;# 
  2138  0199                     	;# 
  2139  019A                     	;# 
  2140  019B                     	;# 
  2141  019B                     	;# 
  2142  019C                     	;# 
  2143  019D                     	;# 
  2144  019E                     	;# 
  2145  019F                     	;# 
  2146  020C                     	;# 
  2147  020D                     	;# 
  2148  0211                     	;# 
  2149  0211                     	;# 
  2150  0212                     	;# 
  2151  0212                     	;# 
  2152  0213                     	;# 
  2153  0213                     	;# 
  2154  0214                     	;# 
  2155  0214                     	;# 
  2156  0215                     	;# 
  2157  0215                     	;# 
  2158  0215                     	;# 
  2159  0216                     	;# 
  2160  0216                     	;# 
  2161  0217                     	;# 
  2162  0217                     	;# 
  2163  0391                     	;# 
  2164  0392                     	;# 
  2165  0393                     	;# 
  2166  0394                     	;# 
  2167  0395                     	;# 
  2168  0396                     	;# 
  2169  0611                     	;# 
  2170  0612                     	;# 
  2171  0613                     	;# 
  2172  0613                     	;# 
  2173  0614                     	;# 
  2174  0615                     	;# 
  2175  0616                     	;# 
  2176  0616                     	;# 
  2177  0711                     	;# 
  2178  0711                     	;# 
  2179  0711                     	;# 
  2180  0712                     	;# 
  2181  0712                     	;# 
  2182  0713                     	;# 
  2183  0713                     	;# 
  2184  0713                     	;# 
  2185  0714                     	;# 
  2186  0714                     	;# 
  2187  0714                     	;# 
  2188  0715                     	;# 
  2189  0715                     	;# 
  2190  0716                     	;# 
  2191  0716                     	;# 
  2192  0716                     	;# 
  2193  0716                     	;# 
  2194  0717                     	;# 
  2195  0717                     	;# 
  2196  0717                     	;# 
  2197  0717                     	;# 
  2198  0718                     	;# 
  2199  0718                     	;# 
  2200  0718                     	;# 
  2201  0719                     	;# 
  2202  0719                     	;# 
  2203  0719                     	;# 
  2204  0719                     	;# 
  2205  071A                     	;# 
  2206  071A                     	;# 
  2207  071A                     	;# 
  2208  071A                     	;# 
  2209  071A                     	;# 
  2210  071B                     	;# 
  2211  071B                     	;# 
  2212  071C                     	;# 
  2213  071C                     	;# 
  2214  071C                     	;# 
  2215  071C                     	;# 
  2216  071C                     	;# 
  2217  071D                     	;# 
  2218  071D                     	;# 
  2219  071E                     	;# 
  2220  071E                     	;# 
  2221  0791                     	;# 
  2222  0791                     	;# 
  2223  0793                     	;# 
  2224  0793                     	;# 
  2225  0794                     	;# 
  2226  0794                     	;# 
  2227  0796                     	;# 
  2228  0796                     	;# 
  2229  0796                     	;# 
  2230  0797                     	;# 
  2231  0797                     	;# 
  2232  0797                     	;# 
  2233  0798                     	;# 
  2234  0798                     	;# 
  2235  0799                     	;# 
  2236  0799                     	;# 
  2237  0799                     	;# 
  2238  079A                     	;# 
  2239  079A                     	;# 
  2240  079A                     	;# 
  2241  079B                     	;# 
  2242  079C                     	;# 
  2243  079C                     	;# 
  2244  079C                     	;# 
  2245  079D                     	;# 
  2246  079E                     	;# 
  2247  079E                     	;# 
  2248  0F8C                     	;# 
  2249  0F8D                     	;# 
  2250  0F91                     	;# 
  2251  0F96                     	;# 
  2252  0F97                     	;# 
  2253  0F9C                     	;# 
  2254  0F9D                     	;# 
  2255  0F9E                     	;# 
  2256  0FE3                     	;# 
  2257  0FE4                     	;# 
  2258  0FE5                     	;# 
  2259  0FE6                     	;# 
  2260  0FE7                     	;# 
  2261  0FE8                     	;# 
  2262  0FE9                     	;# 
  2263  0FEA                     	;# 
  2264  0FEB                     	;# 
  2265  0FED                     	;# 
  2266  0FEE                     	;# 
  2267  0FEF                     	;# 
  2268  0000                     	;# 
  2269  0001                     	;# 
  2270  0002                     	;# 
  2271  0003                     	;# 
  2272  0004                     	;# 
  2273  0005                     	;# 
  2274  0006                     	;# 
  2275  0007                     	;# 
  2276  0008                     	;# 
  2277  0009                     	;# 
  2278  000A                     	;# 
  2279  000B                     	;# 
  2280  000C                     	;# 
  2281  000D                     	;# 
  2282  000E                     	;# 
  2283  0011                     	;# 
  2284  0012                     	;# 
  2285  0015                     	;# 
  2286  0016                     	;# 
  2287  0016                     	;# 
  2288  0017                     	;# 
  2289  0018                     	;# 
  2290  0019                     	;# 
  2291  001A                     	;# 
  2292  001B                     	;# 
  2293  001C                     	;# 
  2294  008C                     	;# 
  2295  008D                     	;# 
  2296  008E                     	;# 
  2297  0091                     	;# 
  2298  0092                     	;# 
  2299  0095                     	;# 
  2300  0096                     	;# 
  2301  0097                     	;# 
  2302  0099                     	;# 
  2303  009A                     	;# 
  2304  009B                     	;# 
  2305  009B                     	;# 
  2306  009C                     	;# 
  2307  009D                     	;# 
  2308  009E                     	;# 
  2309  009F                     	;# 
  2310  010C                     	;# 
  2311  010D                     	;# 
  2312  010E                     	;# 
  2313  0116                     	;# 
  2314  0117                     	;# 
  2315  011D                     	;# 
  2316  018C                     	;# 
  2317  018D                     	;# 
  2318  018E                     	;# 
  2319  0191                     	;# 
  2320  0191                     	;# 
  2321  0192                     	;# 
  2322  0193                     	;# 
  2323  0193                     	;# 
  2324  0194                     	;# 
  2325  0195                     	;# 
  2326  0196                     	;# 
  2327  0199                     	;# 
  2328  019A                     	;# 
  2329  019B                     	;# 
  2330  019B                     	;# 
  2331  019C                     	;# 
  2332  019D                     	;# 
  2333  019E                     	;# 
  2334  019F                     	;# 
  2335  020C                     	;# 
  2336  020D                     	;# 
  2337  0211                     	;# 
  2338  0211                     	;# 
  2339  0212                     	;# 
  2340  0212                     	;# 
  2341  0213                     	;# 
  2342  0213                     	;# 
  2343  0214                     	;# 
  2344  0214                     	;# 
  2345  0215                     	;# 
  2346  0215                     	;# 
  2347  0215                     	;# 
  2348  0216                     	;# 
  2349  0216                     	;# 
  2350  0217                     	;# 
  2351  0217                     	;# 
  2352  0391                     	;# 
  2353  0392                     	;# 
  2354  0393                     	;# 
  2355  0394                     	;# 
  2356  0395                     	;# 
  2357  0396                     	;# 
  2358  0611                     	;# 
  2359  0612                     	;# 
  2360  0613                     	;# 
  2361  0613                     	;# 
  2362  0614                     	;# 
  2363  0615                     	;# 
  2364  0616                     	;# 
  2365  0616                     	;# 
  2366  0711                     	;# 
  2367  0711                     	;# 
  2368  0711                     	;# 
  2369  0712                     	;# 
  2370  0712                     	;# 
  2371  0713                     	;# 
  2372  0713                     	;# 
  2373  0713                     	;# 
  2374  0714                     	;# 
  2375  0714                     	;# 
  2376  0714                     	;# 
  2377  0715                     	;# 
  2378  0715                     	;# 
  2379  0716                     	;# 
  2380  0716                     	;# 
  2381  0716                     	;# 
  2382  0716                     	;# 
  2383  0717                     	;# 
  2384  0717                     	;# 
  2385  0717                     	;# 
  2386  0717                     	;# 
  2387  0718                     	;# 
  2388  0718                     	;# 
  2389  0718                     	;# 
  2390  0719                     	;# 
  2391  0719                     	;# 
  2392  0719                     	;# 
  2393  0719                     	;# 
  2394  071A                     	;# 
  2395  071A                     	;# 
  2396  071A                     	;# 
  2397  071A                     	;# 
  2398  071A                     	;# 
  2399  071B                     	;# 
  2400  071B                     	;# 
  2401  071C                     	;# 
  2402  071C                     	;# 
  2403  071C                     	;# 
  2404  071C                     	;# 
  2405  071C                     	;# 
  2406  071D                     	;# 
  2407  071D                     	;# 
  2408  071E                     	;# 
  2409  071E                     	;# 
  2410  0791                     	;# 
  2411  0791                     	;# 
  2412  0793                     	;# 
  2413  0793                     	;# 
  2414  0794                     	;# 
  2415  0794                     	;# 
  2416  0796                     	;# 
  2417  0796                     	;# 
  2418  0796                     	;# 
  2419  0797                     	;# 
  2420  0797                     	;# 
  2421  0797                     	;# 
  2422  0798                     	;# 
  2423  0798                     	;# 
  2424  0799                     	;# 
  2425  0799                     	;# 
  2426  0799                     	;# 
  2427  079A                     	;# 
  2428  079A                     	;# 
  2429  079A                     	;# 
  2430  079B                     	;# 
  2431  079C                     	;# 
  2432  079C                     	;# 
  2433  079C                     	;# 
  2434  079D                     	;# 
  2435  079E                     	;# 
  2436  079E                     	;# 
  2437  0F8C                     	;# 
  2438  0F8D                     	;# 
  2439  0F91                     	;# 
  2440  0F96                     	;# 
  2441  0F97                     	;# 
  2442  0F9C                     	;# 
  2443  0F9D                     	;# 
  2444  0F9E                     	;# 
  2445  0FE3                     	;# 
  2446  0FE4                     	;# 
  2447  0FE5                     	;# 
  2448  0FE6                     	;# 
  2449  0FE7                     	;# 
  2450  0FE8                     	;# 
  2451  0FE9                     	;# 
  2452  0FEA                     	;# 
  2453  0FEB                     	;# 
  2454  0FED                     	;# 
  2455  0FEE                     	;# 
  2456  0FEF                     	;# 
  2457  0000                     	;# 
  2458  0001                     	;# 
  2459  0002                     	;# 
  2460  0003                     	;# 
  2461  0004                     	;# 
  2462  0005                     	;# 
  2463  0006                     	;# 
  2464  0007                     	;# 
  2465  0008                     	;# 
  2466  0009                     	;# 
  2467  000A                     	;# 
  2468  000B                     	;# 
  2469  000C                     	;# 
  2470  000D                     	;# 
  2471  000E                     	;# 
  2472  0011                     	;# 
  2473  0012                     	;# 
  2474  0015                     	;# 
  2475  0016                     	;# 
  2476  0016                     	;# 
  2477  0017                     	;# 
  2478  0018                     	;# 
  2479  0019                     	;# 
  2480  001A                     	;# 
  2481  001B                     	;# 
  2482  001C                     	;# 
  2483  008C                     	;# 
  2484  008D                     	;# 
  2485  008E                     	;# 
  2486  0091                     	;# 
  2487  0092                     	;# 
  2488  0095                     	;# 
  2489  0096                     	;# 
  2490  0097                     	;# 
  2491  0099                     	;# 
  2492  009A                     	;# 
  2493  009B                     	;# 
  2494  009B                     	;# 
  2495  009C                     	;# 
  2496  009D                     	;# 
  2497  009E                     	;# 
  2498  009F                     	;# 
  2499  010C                     	;# 
  2500  010D                     	;# 
  2501  010E                     	;# 
  2502  0116                     	;# 
  2503  0117                     	;# 
  2504  011D                     	;# 
  2505  018C                     	;# 
  2506  018D                     	;# 
  2507  018E                     	;# 
  2508  0191                     	;# 
  2509  0191                     	;# 
  2510  0192                     	;# 
  2511  0193                     	;# 
  2512  0193                     	;# 
  2513  0194                     	;# 
  2514  0195                     	;# 
  2515  0196                     	;# 
  2516  0199                     	;# 
  2517  019A                     	;# 
  2518  019B                     	;# 
  2519  019B                     	;# 
  2520  019C                     	;# 
  2521  019D                     	;# 
  2522  019E                     	;# 
  2523  019F                     	;# 
  2524  020C                     	;# 
  2525  020D                     	;# 
  2526  0211                     	;# 
  2527  0211                     	;# 
  2528  0212                     	;# 
  2529  0212                     	;# 
  2530  0213                     	;# 
  2531  0213                     	;# 
  2532  0214                     	;# 
  2533  0214                     	;# 
  2534  0215                     	;# 
  2535  0215                     	;# 
  2536  0215                     	;# 
  2537  0216                     	;# 
  2538  0216                     	;# 
  2539  0217                     	;# 
  2540  0217                     	;# 
  2541  0391                     	;# 
  2542  0392                     	;# 
  2543  0393                     	;# 
  2544  0394                     	;# 
  2545  0395                     	;# 
  2546  0396                     	;# 
  2547  0611                     	;# 
  2548  0612                     	;# 
  2549  0613                     	;# 
  2550  0613                     	;# 
  2551  0614                     	;# 
  2552  0615                     	;# 
  2553  0616                     	;# 
  2554  0616                     	;# 
  2555  0711                     	;# 
  2556  0711                     	;# 
  2557  0711                     	;# 
  2558  0712                     	;# 
  2559  0712                     	;# 
  2560  0713                     	;# 
  2561  0713                     	;# 
  2562  0713                     	;# 
  2563  0714                     	;# 
  2564  0714                     	;# 
  2565  0714                     	;# 
  2566  0715                     	;# 
  2567  0715                     	;# 
  2568  0716                     	;# 
  2569  0716                     	;# 
  2570  0716                     	;# 
  2571  0716                     	;# 
  2572  0717                     	;# 
  2573  0717                     	;# 
  2574  0717                     	;# 
  2575  0717                     	;# 
  2576  0718                     	;# 
  2577  0718                     	;# 
  2578  0718                     	;# 
  2579  0719                     	;# 
  2580  0719                     	;# 
  2581  0719                     	;# 
  2582  0719                     	;# 
  2583  071A                     	;# 
  2584  071A                     	;# 
  2585  071A                     	;# 
  2586  071A                     	;# 
  2587  071A                     	;# 
  2588  071B                     	;# 
  2589  071B                     	;# 
  2590  071C                     	;# 
  2591  071C                     	;# 
  2592  071C                     	;# 
  2593  071C                     	;# 
  2594  071C                     	;# 
  2595  071D                     	;# 
  2596  071D                     	;# 
  2597  071E                     	;# 
  2598  071E                     	;# 
  2599  0791                     	;# 
  2600  0791                     	;# 
  2601  0793                     	;# 
  2602  0793                     	;# 
  2603  0794                     	;# 
  2604  0794                     	;# 
  2605  0796                     	;# 
  2606  0796                     	;# 
  2607  0796                     	;# 
  2608  0797                     	;# 
  2609  0797                     	;# 
  2610  0797                     	;# 
  2611  0798                     	;# 
  2612  0798                     	;# 
  2613  0799                     	;# 
  2614  0799                     	;# 
  2615  0799                     	;# 
  2616  079A                     	;# 
  2617  079A                     	;# 
  2618  079A                     	;# 
  2619  079B                     	;# 
  2620  079C                     	;# 
  2621  079C                     	;# 
  2622  079C                     	;# 
  2623  079D                     	;# 
  2624  079E                     	;# 
  2625  079E                     	;# 
  2626  0F8C                     	;# 
  2627  0F8D                     	;# 
  2628  0F91                     	;# 
  2629  0F96                     	;# 
  2630  0F97                     	;# 
  2631  0F9C                     	;# 
  2632  0F9D                     	;# 
  2633  0F9E                     	;# 
  2634  0FE3                     	;# 
  2635  0FE4                     	;# 
  2636  0FE5                     	;# 
  2637  0FE6                     	;# 
  2638  0FE7                     	;# 
  2639  0FE8                     	;# 
  2640  0FE9                     	;# 
  2641  0FEA                     	;# 
  2642  0FEB                     	;# 
  2643  0FED                     	;# 
  2644  0FEE                     	;# 
  2645  0FEF                     	;# 
  2646                           
  2647 ;; Function _EUSART_is_tx_ready is unused but had its address taken
  2648  0000                     
  2649 ;; Function _EUSART_is_tx_done is unused but had its address taken
  2650  0000                     
  2651                           	psect	idataBANK0
  2652  10B3                     __pidataBANK0:	
  2653                           
  2654                           ;initializer for _sample_period
  2655  10B3  34AE               	retlw	174
  2656                           
  2657                           	psect	idataBANK1
  2658  119F                     __pidataBANK1:	
  2659                           
  2660                           ;initializer for _Button_StateMachine
  2661  119F  348F               	retlw	low _Button_State_Initializing
  2662  11A0  340A               	retlw	high _Button_State_Initializing
  2663  11A1  344E               	retlw	low _Button_State_NotPressed
  2664  11A2  3407               	retlw	high _Button_State_NotPressed
  2665  11A3  34F5               	retlw	low _Button_State_Pressed
  2666  11A4  340A               	retlw	high _Button_State_Pressed
  2667                           
  2668                           ;initializer for _callback_notPressed
  2669  11A5  34B0               	retlw	low _Button_DefaultCallback
  2670  11A6  3410               	retlw	high _Button_DefaultCallback
  2671                           
  2672                           ;initializer for _callback_pressed
  2673  11A7  34B0               	retlw	low _Button_DefaultCallback
  2674  11A8  3410               	retlw	high _Button_DefaultCallback
  2675                           
  2676                           ;initializer for _callback_sampled
  2677  11A9  34B1               	retlw	low _Sensor_DefaultCallback
  2678  11AA  3410               	retlw	high _Sensor_DefaultCallback
  2679                           
  2680                           	psect	idataBANK2
  2681  13D5                     __pidataBANK2:	
  2682                           
  2683                           ;initializer for _mtouch_sensor
  2684  13D5  3400               	retlw	0
  2685  13D6  3469               	retlw	105
  2686  13D7  3430               	retlw	48
  2687  13D8  3410               	retlw	16
  2688  13D9  3420               	retlw	32
  2689  13DA  3400               	retlw	0
  2690  13DB  3400               	retlw	0
  2691  13DC  3400               	retlw	0
  2692  13DD  3400               	retlw	0
  2693  13DE  3401               	retlw	1
  2694  13DF  3431               	retlw	49
  2695  13E0  3430               	retlw	48
  2696  13E1  3410               	retlw	16
  2697  13E2  3420               	retlw	32
  2698  13E3  3400               	retlw	0
  2699  13E4  3400               	retlw	0
  2700  13E5  3400               	retlw	0
  2701  13E6  3400               	retlw	0
  2702  13E7  3402               	retlw	2
  2703  13E8  3461               	retlw	97
  2704  13E9  3430               	retlw	48
  2705  13EA  3410               	retlw	16
  2706  13EB  3420               	retlw	32
  2707  13EC  3400               	retlw	0
  2708  13ED  3400               	retlw	0
  2709  13EE  3400               	retlw	0
  2710  13EF  3400               	retlw	0
  2711                           
  2712                           	psect	stringtext1
  2713  1830                     __pstringtext1:	
  2714  1830                     _uart:	
  2715  1830  34C6               	retlw	low _EUSART_Read
  2716  1831  3415               	retlw	high _EUSART_Read
  2717  1832  343B               	retlw	low _EUSART_Write
  2718  1833  3416               	retlw	high _EUSART_Write
  2719  1834  3400               	retlw	0
  2720  1835  3400               	retlw	0
  2721  1836  34B4               	retlw	low _EUSART_is_rx_ready
  2722  1837  3410               	retlw	high _EUSART_is_rx_ready
  2723  1838  346F               	retlw	low _EUSART_SetTxInterruptHandler
  2724  1839  3411               	retlw	high _EUSART_SetTxInterruptHandler
  2725  183A  34C3               	retlw	low _EUSART_Receive_ISR
  2726  183B  3417               	retlw	high _EUSART_Receive_ISR
  2727  183C  3415               	retlw	low _EUSART_SetRxInterruptHandler
  2728  183D  3411               	retlw	high _EUSART_SetRxInterruptHandler
  2729  183E  3400               	retlw	0
  2730  183F  3400               	retlw	0
  2731  1840  347E               	retlw	low _EUSART_Transmit_ISR
  2732  1841  3415               	retlw	high _EUSART_Transmit_ISR
  2733  1842  34A2               	retlw	low _EUSART_Initialize
  2734  1843  3408               	retlw	high _EUSART_Initialize
  2735  1844                     __end_of_uart:	
  2736                           
  2737                           	psect	stringtext2
  2738  186D                     __pstringtext2:	
  2739  186D                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2740  186D  3400               	retlw	0
  2741  186E  340D               	retlw	13
  2742  186F  341C               	retlw	28
  2743  1870  341E               	retlw	30
  2744  1871  3417               	retlw	23
  2745  1872                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2746                           
  2747                           	psect	stringtext3
  2748  1872                     __pstringtext3:	
  2749  1872                     _sensor_scan_group:	
  2750  1872  3459               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2751  1873  3450               	retlw	low (_mtouch_sensor| (0+256))
  2752  1874  3400               	retlw	0
  2753  1875  3462               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2754  1876                     __end_of_sensor_scan_group:	
  2755                           
  2756                           	psect	stringtext4
  2757  1800                     __pstringtext4:	
  2758  1800                     _mtouch_button_init:	
  2759  1800  3400               	retlw	0
  2760  1801  3402               	retlw	2
  2761  1802  3400               	retlw	0
  2762  1803  3400               	retlw	0
  2763  1804  3400               	retlw	0
  2764  1805  3400               	retlw	0
  2765  1806  3400               	retlw	0
  2766  1807  3400               	retlw	0
  2767  1808  3400               	retlw	0
  2768  1809  3400               	retlw	0
  2769  180A  3400               	retlw	0
  2770  180B  3400               	retlw	0
  2771  180C  3400               	retlw	0
  2772  180D  3400               	retlw	0
  2773  180E  3464               	retlw	100
  2774  180F  3401               	retlw	1
  2775  1810  3401               	retlw	1
  2776  1811  3400               	retlw	0
  2777  1812  3400               	retlw	0
  2778  1813  3400               	retlw	0
  2779  1814  3400               	retlw	0
  2780  1815  3400               	retlw	0
  2781  1816  3400               	retlw	0
  2782  1817  3400               	retlw	0
  2783  1818  3400               	retlw	0
  2784  1819  3400               	retlw	0
  2785  181A  3400               	retlw	0
  2786  181B  3400               	retlw	0
  2787  181C  3400               	retlw	0
  2788  181D  3400               	retlw	0
  2789  181E  3464               	retlw	100
  2790  181F  3401               	retlw	1
  2791  1820  3402               	retlw	2
  2792  1821  3401               	retlw	1
  2793  1822  3400               	retlw	0
  2794  1823  3400               	retlw	0
  2795  1824  3400               	retlw	0
  2796  1825  3400               	retlw	0
  2797  1826  3400               	retlw	0
  2798  1827  3400               	retlw	0
  2799  1828  3400               	retlw	0
  2800  1829  3400               	retlw	0
  2801  182A  3400               	retlw	0
  2802  182B  3400               	retlw	0
  2803  182C  3400               	retlw	0
  2804  182D  3400               	retlw	0
  2805  182E  3464               	retlw	100
  2806  182F  3401               	retlw	1
  2807  1830                     __end_of_mtouch_button_init:	
  2808                           
  2809                           	psect	nvBANK1
  2810  00D8                     __pnvBANK1:	
  2811  00D8                     _TMR0_InterruptHandler:	
  2812  00D8                     	ds	2
  2813  00DA                     _INT_InterruptHandler:	
  2814  00DA                     	ds	2
  2815  00DC                     _EUSART_FramingErrorHandler:	
  2816  00DC                     	ds	2
  2817  00DE                     _EUSART_RxDefaultInterruptHandler:	
  2818  00DE                     	ds	2
  2819  00E0                     _EUSART_TxDefaultInterruptHandler:	
  2820  00E0                     	ds	2
  2821  00E2                     _timer0ReloadVal:	
  2822  00E2                     	ds	1
  2823  00E3                     _eusartTxBufferRemaining:	
  2824  00E3                     	ds	1
  2825                           
  2826                           	psect	nvBANK2
  2827  016B                     __pnvBANK2:	
  2828  016B                     _EUSART_ErrorHandler:	
  2829  016B                     	ds	2
  2830  016D                     _EUSART_OverrunErrorHandler:	
  2831  016D                     	ds	2
  2832  0015                     _TMR0	set	21
  2833  001C                     _T2CON	set	28
  2834  001A                     _TMR2	set	26
  2835  001B                     _PR2	set	27
  2836  000B                     _INTCONbits	set	11
  2837  0012                     _PIR2bits	set	18
  2838  0011                     _PIR1bits	set	17
  2839  001C                     _T2CONbits	set	28
  2840  005F                     _GIE	set	95
  2841  0095                     _OPTION_REG	set	149
  2842  008E                     _TRISC	set	142
  2843  008D                     _TRISB	set	141
  2844  008C                     _TRISA	set	140
  2845  0097                     _WDTCON	set	151
  2846  0099                     _OSCCON	set	153
  2847  0095                     _OPTION_REGbits	set	149
  2848  0091                     _PIE1bits	set	145
  2849  010C                     _LATAbits	set	268
  2850  010E                     _LATCbits	set	270
  2851  011D                     _APFCON	set	285
  2852  010E                     _LATC	set	270
  2853  010D                     _LATB	set	269
  2854  010C                     _LATA	set	268
  2855  0116                     _BORCON	set	278
  2856  011D                     _APFCONbits	set	285
  2857  018C                     _ANSELA	set	396
  2858  018D                     _ANSELB	set	397
  2859  018E                     _ANSELC	set	398
  2860  0199                     _RCREG	set	409
  2861  019D                     _RCSTAbits	set	413
  2862  019A                     _TXREG	set	410
  2863  019E                     _TXSTAbits	set	414
  2864  019C                     _SPBRGH	set	412
  2865  019B                     _SPBRGL	set	411
  2866  019E                     _TXSTA	set	414
  2867  019D                     _RCSTA	set	413
  2868  019F                     _BAUDCON	set	415
  2869  020C                     _WPUA	set	524
  2870  020D                     _WPUB	set	525
  2871  071A                     _AAD1RES0	set	1818
  2872  0711                     _AD1CON0bits	set	1809
  2873  0714                     _AAD1CON3	set	1812
  2874  0713                     _AD1CON2	set	1811
  2875  0717                     _AD1ACQCON	set	1815
  2876  0716                     _AD1PRECON	set	1814
  2877  0718                     _AAD1GRD	set	1816
  2878  0713                     _AAD1CON2	set	1811
  2879  0719                     _AAD1CAP	set	1817
  2880  0714                     _AD1CON3	set	1812
  2881  0712                     _ADCOMCON	set	1810
  2882  0711                     _AD1CON0	set	1809
  2883  079A                     _AAD2RES0	set	1946
  2884  0791                     _AD2CON0bits	set	1937
  2885  0797                     _AD2ACQCON	set	1943
  2886  0796                     _AD2PRECON	set	1942
  2887  0794                     _AAD2CON3	set	1940
  2888  0798                     _AAD2GRD	set	1944
  2889  0793                     _AD2CON2	set	1939
  2890  0794                     _AD2CON3	set	1940
  2891  0791                     _AD2CON0	set	1937
  2892                           
  2893                           	psect	stringtext5
  2894  1844                     __pstringtext5:	
  2895  1844                     STR_2:	
  2896  1844  3453               	retlw	83	;'S'
  2897  1845  3459               	retlw	89	;'Y'
  2898  1846  3453               	retlw	83	;'S'
  2899  1847  3420               	retlw	32	;' '
  2900  1848  3446               	retlw	70	;'F'
  2901  1849  3441               	retlw	65	;'A'
  2902  184A  3443               	retlw	67	;'C'
  2903  184B  3454               	retlw	84	;'T'
  2904  184C  344F               	retlw	79	;'O'
  2905  184D  3452               	retlw	82	;'R'
  2906  184E  3459               	retlw	89	;'Y'
  2907  184F  3420               	retlw	32	;' '
  2908  1850  3452               	retlw	82	;'R'
  2909  1851  3445               	retlw	69	;'E'
  2910  1852  3453               	retlw	83	;'S'
  2911  1853  3445               	retlw	69	;'E'
  2912  1854  3454               	retlw	84	;'T'
  2913  1855  3400               	retlw	0
  2914                           
  2915                           	psect	stringtext6
  2916  1856                     __pstringtext6:	
  2917  1856                     STR_3:	
  2918  1856  3453               	retlw	83	;'S'
  2919  1857  344D               	retlw	77	;'M'
  2920  1858  3441               	retlw	65	;'A'
  2921  1859  3452               	retlw	82	;'R'
  2922  185A  3454               	retlw	84	;'T'
  2923  185B  3420               	retlw	32	;' '
  2924  185C  344C               	retlw	76	;'L'
  2925  185D  3449               	retlw	73	;'I'
  2926  185E  3447               	retlw	71	;'G'
  2927  185F  3448               	retlw	72	;'H'
  2928  1860  3454               	retlw	84	;'T'
  2929  1861  3420               	retlw	32	;' '
  2930  1862  3449               	retlw	73	;'I'
  2931  1863  344E               	retlw	78	;'N'
  2932  1864  3449               	retlw	73	;'I'
  2933  1865  3454               	retlw	84	;'T'
  2934  1866  3400               	retlw	0
  2935                           
  2936                           	psect	stringtext7
  2937  1867                     __pstringtext7:	
  2938  1867                     STR_1:	
  2939  1867  344C               	retlw	76	;'L'
  2940  1868  3445               	retlw	69	;'E'
  2941  1869  3456               	retlw	86	;'V'
  2942  186A  3445               	retlw	69	;'E'
  2943  186B  344C               	retlw	76	;'L'
  2944  186C  3400               	retlw	0
  2945                           
  2946                           	psect	stringtext8
  2947  0000                     __pstringtext8:	
  2948                           
  2949                           ; #config settings
  2950  0000                     
  2951                           	psect	cinit
  2952  0048                     start_initialization:	
  2953  0048                     __initialization:	
  2954                           
  2955                           ; Initialize objects allocated to BANK0
  2956  0048  3190  20B3  3180   	fcall	__pidataBANK0	;fetch initializer
  2957  004B  00EF               	movwf	__pdataBANK0& (0+127)
  2958                           
  2959                           ; Initialize objects allocated to BANK1
  2960  004C  309F               	movlw	low __pidataBANK1
  2961  004D  0084               	movwf	4
  2962  004E  3091               	movlw	(high __pidataBANK1)| (0+128)
  2963  004F  0085               	movwf	5
  2964  0050  30E4               	movlw	low __pdataBANK1
  2965  0051  0086               	movwf	6
  2966  0052  3000               	movlw	high __pdataBANK1
  2967  0053  0087               	movwf	7
  2968  0054  300C               	movlw	12
  2969  0055  3190  20F7  3180   	fcall	init_ram
  2970                           
  2971                           ; Initialize objects allocated to BANK2
  2972  0058  30D5               	movlw	low __pidataBANK2
  2973  0059  0084               	movwf	4
  2974  005A  3093               	movlw	(high __pidataBANK2)| (0+128)
  2975  005B  0085               	movwf	5
  2976  005C  3050               	movlw	low __pdataBANK2
  2977  005D  0086               	movwf	6
  2978  005E  3001               	movlw	high __pdataBANK2
  2979  005F  0087               	movwf	7
  2980  0060  301B               	movlw	27
  2981  0061  3190  20F7  3180   	fcall	init_ram
  2982                           
  2983                           ; Clear objects allocated to COMMON
  2984  0064  01F0               	clrf	__pbssCOMMON& (0+127)
  2985  0065  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2986  0066  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2987  0067  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2988  0068  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2989  0069  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2990  006A  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  2991                           
  2992                           ; Clear objects allocated to BANK0
  2993  006B  3055               	movlw	low __pbssBANK0
  2994  006C  0084               	movwf	4
  2995  006D  3000               	movlw	high __pbssBANK0
  2996  006E  0085               	movwf	5
  2997  006F  301A               	movlw	26
  2998  0070  3190  20F1  3180   	fcall	clear_ram0
  2999                           
  3000                           ; Clear objects allocated to BANK1
  3001  0073  30A0               	movlw	low __pbssBANK1
  3002  0074  0084               	movwf	4
  3003  0075  3000               	movlw	high __pbssBANK1
  3004  0076  0085               	movwf	5
  3005  0077  3038               	movlw	56
  3006  0078  3190  20F1  3180   	fcall	clear_ram0
  3007                           
  3008                           ; Clear objects allocated to BANK2
  3009  007B  3020               	movlw	low __pbssBANK2
  3010  007C  0084               	movwf	4
  3011  007D  3001               	movlw	high __pbssBANK2
  3012  007E  0085               	movwf	5
  3013  007F  3030               	movlw	48
  3014  0080  3190  20F1  3180   	fcall	clear_ram0
  3015                           
  3016                           ; Clear objects allocated to BANK3
  3017  0083  30A0               	movlw	low __pbssBANK3
  3018  0084  0084               	movwf	4
  3019  0085  3001               	movlw	high __pbssBANK3
  3020  0086  0085               	movwf	5
  3021  0087  3040               	movlw	64
  3022  0088  3190  20F1  3180   	fcall	clear_ram0
  3023                           
  3024                           ; Clear objects allocated to BANK4
  3025  008B  3020               	movlw	low __pbssBANK4
  3026  008C  0084               	movwf	4
  3027  008D  3002               	movlw	high __pbssBANK4
  3028  008E  0085               	movwf	5
  3029  008F  3040               	movlw	64
  3030  0090  3190  20F1  3180   	fcall	clear_ram0
  3031                           
  3032                           ; Clear objects allocated to BANK5
  3033  0093  30A0               	movlw	low __pbssBANK5
  3034  0094  0084               	movwf	4
  3035  0095  3002               	movlw	high __pbssBANK5
  3036  0096  0085               	movwf	5
  3037  0097  3040               	movlw	64
  3038  0098  3190  20F1  3180   	fcall	clear_ram0
  3039  009B                     end_of_initialization:	
  3040                           ;End of C runtime variable initialization code
  3041                           
  3042  009B                     __end_of__initialization:	
  3043  009B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3044  009C  0020               	movlb	0
  3045  009D  3180  289F         	ljmp	_main	;jump to C main() function
  3046                           
  3047                           	psect	bssCOMMON
  3048  0070                     __pbssCOMMON:	
  3049  0070                     _last_touch_status:	
  3050  0070                     	ds	2
  3051  0072                     _blink:	
  3052  0072                     	ds	1
  3053  0073                     _config_status:	
  3054  0073                     	ds	1
  3055  0074                     _eusartRxCount:	
  3056  0074                     	ds	1
  3057  0075                     _eusartRxTail:	
  3058  0075                     	ds	1
  3059  0076                     _mtouch_time_toScan:	
  3060  0076                     	ds	1
  3061                           
  3062                           	psect	bssBANK0
  3063  0055                     __pbssBANK0:	
  3064  0055                     _packet_sample:	
  3065  0055                     	ds	4
  3066  0059                     _triac_level:	
  3067  0059                     	ds	2
  3068  005B                     _counter_1s:	
  3069  005B                     	ds	2
  3070  005D                     _packet_noise:	
  3071  005D                     	ds	2
  3072  005F                     main@s:	
  3073  005F                     	ds	1
  3074  0060                     _ResponseIndex:	
  3075  0060                     	ds	1
  3076  0061                     _counter_led:	
  3077  0061                     	ds	1
  3078  0062                     _blink_count:	
  3079  0062                     	ds	1
  3080  0063                     _check_request:	
  3081  0063                     	ds	1
  3082  0064                     _turn_down:	
  3083  0064                     	ds	1
  3084  0065                     _turn_up:	
  3085  0065                     	ds	1
  3086  0066                     _turn_on:	
  3087  0066                     	ds	1
  3088  0067                     _turn_off:	
  3089  0067                     	ds	1
  3090  0068                     _counter_PRESS:	
  3091  0068                     	ds	1
  3092  0069                     _counter_ON_OFF:	
  3093  0069                     	ds	1
  3094  006A                     _eusartRxHead:	
  3095  006A                     	ds	1
  3096  006B                     _eusartTxTail:	
  3097  006B                     	ds	1
  3098  006C                     _eusartTxHead:	
  3099  006C                     	ds	1
  3100  006D                     _sensor_globalFlags:	
  3101  006D                     	ds	1
  3102  006E                     _lowpowerActivated:	
  3103  006E                     	ds	1
  3104                           
  3105                           	psect	dataBANK0
  3106  006F                     __pdataBANK0:	
  3107  006F                     _sample_period:	
  3108  006F                     	ds	1
  3109                           
  3110                           	psect	bssBANK1
  3111  00A0                     __pbssBANK1:	
  3112  00A0                     _eusartRxStatusBuffer:	
  3113  00A0                     	ds	8
  3114  00A8                     _eusartRxBuffer:	
  3115  00A8                     	ds	8
  3116  00B0                     _eusartTxBuffer:	
  3117  00B0                     	ds	8
  3118  00B8                     main@num:	
  3119  00B8                     	ds	2
  3120  00BA                     _triac_c:	
  3121  00BA                     	ds	2
  3122  00BC                     _rc_level:	
  3123  00BC                     	ds	2
  3124  00BE                     _triac_level_now:	
  3125  00BE                     	ds	2
  3126  00C0                     _timeout_count:	
  3127  00C0                     	ds	2
  3128  00C2                     _count_conf:	
  3129  00C2                     	ds	2
  3130  00C4                     _rxData:	
  3131  00C4                     	ds	1
  3132  00C5                     TMR0_ISR@tick_count:	
  3133  00C5                     	ds	1
  3134  00C6                     _i:	
  3135  00C6                     	ds	1
  3136  00C7                     _ZCD_STATE:	
  3137  00C7                     	ds	1
  3138  00C8                     _update_state_flag:	
  3139  00C8                     	ds	1
  3140  00C9                     _prcData:	
  3141  00C9                     	ds	1
  3142  00CA                     _count_down_off:	
  3143  00CA                     	ds	1
  3144  00CB                     _eusartRxLastError:	
  3145  00CB                     	ds	1
  3146  00CC                     _Storage2:	
  3147  00CC                     	ds	9
  3148  00D5                     _Num_Char:	
  3149  00D5                     	ds	3
  3150                           
  3151                           	psect	dataBANK1
  3152  00E4                     __pdataBANK1:	
  3153  00E4                     _Button_StateMachine:	
  3154  00E4                     	ds	6
  3155  00EA                     _callback_notPressed:	
  3156  00EA                     	ds	2
  3157  00EC                     _callback_pressed:	
  3158  00EC                     	ds	2
  3159  00EE                     _callback_sampled:	
  3160  00EE                     	ds	2
  3161                           
  3162                           	psect	bssBANK2
  3163  0120                     __pbssBANK2:	
  3164  0120                     _mtouch_button:	
  3165  0120                     	ds	48
  3166                           
  3167                           	psect	dataBANK2
  3168  0150                     __pdataBANK2:	
  3169  0150                     _mtouch_sensor:	
  3170  0150                     	ds	27
  3171                           
  3172                           	psect	bssBANK3
  3173  01A0                     __pbssBANK3:	
  3174  01A0                     _ResponseBuffer:	
  3175  01A0                     	ds	64
  3176                           
  3177                           	psect	bssBANK4
  3178  0220                     __pbssBANK4:	
  3179  0220                     _Storage:	
  3180  0220                     	ds	64
  3181                           
  3182                           	psect	bssBANK5
  3183  02A0                     __pbssBANK5:	
  3184  02A0                     _ReadStorage:	
  3185  02A0                     	ds	64
  3186                           
  3187                           	psect	inittext
  3188  10F7                     init_ram:	
  3189  10F7  00FE               	movwf	btemp
  3190  10F8                     initloop:	
  3191  10F8  0012               	moviw fsr0++
  3192  10F9  001E               	movwi fsr1++
  3193  10FA  0BFE               	decfsz	btemp,f
  3194  10FB  28F8               	goto	initloop
  3195  10FC  3400               	retlw	0
  3196                           
  3197                           	psect	clrtext
  3198  10F1                     clear_ram0:	
  3199                           ;	Called with FSR0 containing the base address, and
  3200                           ;	WREG with the size to clear
  3201                           
  3202  10F1  0064               	clrwdt	;clear the watchdog before getting into this loop
  3203  10F2                     clrloop0:	
  3204  10F2  0180               	clrf	0	;clear RAM location pointed to by FSR
  3205  10F3  3101               	addfsr 0,1
  3206  10F4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3207  10F5  28F2               	goto	clrloop0	;have we reached the end yet?
  3208  10F6  3400               	retlw	0	;all done for this memory range, return
  3209                           
  3210                           	psect	cstackCOMMON
  3211  0077                     __pcstackCOMMON:	
  3212  0077                     ?_MTOUCH_Service_Mainloop:	
  3213  0077                     ?_MTOUCH_Button_isPressed:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0077                     ?_MTOUCH_Sensor_InitializeAll:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0077                     ?_MTOUCH_Button_InitializeAll:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0077                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0077                     ?_MTOUCH_Sensor_Scan_Initialize:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0077                     ?_MTOUCH_Sensor_SampleAll:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0077                     ?_MTOUCH_Button_ServiceAll:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0077                     ?_MTOUCH_needReburst:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0077                     ?_MTOUCH_Tick:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0077                     ?_MTOUCH_Button_Tick:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0077                     ?_MTOUCH_Sensor_Enable:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0077                     ?_MTOUCH_Sensor_Calibrate:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0077                     ?_Sensor_Sampled_Reset:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0077                     ?_Sensor_Service:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0077                     ?_Sensor_isEnabled:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0077                     ?_Sensor_RawSample_Update:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0077                     ?_Sensor_setSampled:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0077                     ?_Sensor_postAcquisitionProcess:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0077                     ?_Sensor_isActive:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0077                     ?_Sensor_isCalibrated:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0077                     ?_Sensor_setActive:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0077                     ?_Sensor_setInactive:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0077                     ?_Sensor_isCalibratingAcqTime:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0077                     ?_TMR2_LoadPeriodRegister:	
  3283                           ; 1 bytes @ 0x0
  3284                           
  3285  0077                     ?_TMR2_StartTimer:	
  3286                           ; 1 bytes @ 0x0
  3287                           
  3288  0077                     ?_TMR2_StopTimer:	
  3289                           ; 1 bytes @ 0x0
  3290                           
  3291  0077                     ?_Sensor_autoCalibration:	
  3292                           ; 1 bytes @ 0x0
  3293                           
  3294  0077                     ?_Sensor_setCalibratAcqTime:	
  3295                           ; 1 bytes @ 0x0
  3296                           
  3297  0077                     ?_Sensor_setCalibrated:	
  3298                           ; 1 bytes @ 0x0
  3299                           
  3300  0077                     ?_Button_Service:	
  3301                           ; 1 bytes @ 0x0
  3302                           
  3303  0077                     ?_Button_Reading_Update:	
  3304                           ; 1 bytes @ 0x0
  3305                           
  3306  0077                     ?_Button_Deviation_Update:	
  3307                           ; 1 bytes @ 0x0
  3308                           
  3309  0077                     ?_Button_Baseline_Initialize:	
  3310                           ; 1 bytes @ 0x0
  3311                           
  3312  0077                     ?_Button_Baseline_Update:	
  3313                           ; 1 bytes @ 0x0
  3314                           
  3315  0077                     ?_Button_Tick_helper:	
  3316                           ; 1 bytes @ 0x0
  3317                           
  3318  0077                     ?_Button_Reading_Update_Helper:	
  3319                           ; 1 bytes @ 0x0
  3320                           
  3321  0077                     ?_EUSART_Receive_ISR:	
  3322                           ; 1 bytes @ 0x0
  3323                           
  3324  0077                     ?_EUSART_Transmit_ISR:	
  3325                           ; 1 bytes @ 0x0
  3326                           
  3327  0077                     ??_EUSART_Transmit_ISR:	
  3328                           ; 1 bytes @ 0x0
  3329                           
  3330  0077                     ?_EUSART_DefaultFramingErrorHandler:	
  3331                           ; 1 bytes @ 0x0
  3332                           
  3333  0077                     ??_EUSART_DefaultFramingErrorHandler:	
  3334                           ; 1 bytes @ 0x0
  3335                           
  3336  0077                     ?_EUSART_DefaultOverrunErrorHandler:	
  3337                           ; 1 bytes @ 0x0
  3338                           
  3339  0077                     ??_EUSART_DefaultOverrunErrorHandler:	
  3340                           ; 1 bytes @ 0x0
  3341                           
  3342  0077                     ?_EUSART_DefaultErrorHandler:	
  3343                           ; 1 bytes @ 0x0
  3344                           
  3345  0077                     ?_EUSART_RxDataHandler:	
  3346                           ; 1 bytes @ 0x0
  3347                           
  3348  0077                     ??_EUSART_RxDataHandler:	
  3349                           ; 1 bytes @ 0x0
  3350                           
  3351  0077                     ?_INT_CallBack:	
  3352                           ; 1 bytes @ 0x0
  3353                           
  3354  0077                     ??_INT_CallBack:	
  3355                           ; 1 bytes @ 0x0
  3356                           
  3357  0077                     ?_TMR0_ISR:	
  3358                           ; 1 bytes @ 0x0
  3359                           
  3360  0077                     ?_PIN_MANAGER_Initialize:	
  3361                           ; 1 bytes @ 0x0
  3362                           
  3363  0077                     ?_OSCILLATOR_Initialize:	
  3364                           ; 1 bytes @ 0x0
  3365                           
  3366  0077                     ?_WDT_Initialize:	
  3367                           ; 1 bytes @ 0x0
  3368                           
  3369  0077                     ?_TMR0_Initialize:	
  3370                           ; 1 bytes @ 0x0
  3371                           
  3372  0077                     ?_TMR0_DefaultInterruptHandler:	
  3373                           ; 1 bytes @ 0x0
  3374                           
  3375  0077                     ??_TMR0_DefaultInterruptHandler:	
  3376                           ; 1 bytes @ 0x0
  3377                           
  3378  0077                     ?_TMR0_CallBack:	
  3379                           ; 1 bytes @ 0x0
  3380                           
  3381  0077                     ??_TMR0_CallBack:	
  3382                           ; 1 bytes @ 0x0
  3383                           
  3384  0077                     ?_INIT_SMART_LIGHT:	
  3385                           ; 1 bytes @ 0x0
  3386                           
  3387  0077                     ?_ReadyReceiveBuffer:	
  3388                           ; 1 bytes @ 0x0
  3389                           
  3390  0077                     ?_GetResponse:	
  3391                           ; 1 bytes @ 0x0
  3392                           
  3393  0077                     ?_update_state:	
  3394                           ; 1 bytes @ 0x0
  3395                           
  3396  0077                     ?_check_on_off:	
  3397                           ; 1 bytes @ 0x0
  3398                           
  3399  0077                     ?_check_up_down:	
  3400                           ; 1 bytes @ 0x0
  3401                           
  3402  0077                     ?_ReceivedMessage:	
  3403                           ; 1 bytes @ 0x0
  3404                           
  3405  0077                     ?_MTOUCH_Initialize:	
  3406                           ; 1 bytes @ 0x0
  3407                           
  3408  0077                     ?_MTOUCH_Sensor_Initialize:	
  3409                           ; 1 bytes @ 0x0
  3410                           
  3411  0077                     ?_Sensor_getScanGroupIndex:	
  3412                           ; 1 bytes @ 0x0
  3413                           
  3414  0077                     ?_MTOUCH_Sensor_isCalibrated:	
  3415                           ; 1 bytes @ 0x0
  3416                           
  3417  0077                     ?_MTOUCH_Sensor_wasSampled:	
  3418                           ; 1 bytes @ 0x0
  3419                           
  3420  0077                     ?_MTOUCH_Button_Initialize:	
  3421                           ; 1 bytes @ 0x0
  3422                           
  3423  0077                     ?_MTOUCH_Button_Buttonmask_Get:	
  3424                           ; 1 bytes @ 0x0
  3425                           
  3426  0077                     ?_EUSART_Initialize:	
  3427                           ; 1 bytes @ 0x0
  3428                           
  3429  0077                     ?_EUSART_is_rx_ready:	
  3430                           ; 1 bytes @ 0x0
  3431                           
  3432  0077                     ??_EUSART_is_rx_ready:	
  3433                           ; 1 bytes @ 0x0
  3434                           
  3435  0077                     ?_EUSART_Read:	
  3436                           ; 1 bytes @ 0x0
  3437                           
  3438  0077                     ??_EUSART_Read:	
  3439                           ; 1 bytes @ 0x0
  3440                           
  3441  0077                     ?_TMR2_Initialize:	
  3442                           ; 1 bytes @ 0x0
  3443                           
  3444  0077                     ?_INT_ISR:	
  3445                           ; 1 bytes @ 0x0
  3446                           
  3447  0077                     ??_INT_ISR:	
  3448                           ; 1 bytes @ 0x0
  3449                           
  3450  0077                     ?_INT_DefaultInterruptHandler:	
  3451                           ; 1 bytes @ 0x0
  3452                           
  3453  0077                     ??_INT_DefaultInterruptHandler:	
  3454                           ; 1 bytes @ 0x0
  3455                           
  3456  0077                     ?_EXT_INT_Initialize:	
  3457                           ; 1 bytes @ 0x0
  3458                           
  3459  0077                     ?_INTERRUPT_InterruptManager:	
  3460                           ; 1 bytes @ 0x0
  3461                           
  3462  0077                     ?_SYSTEM_Initialize:	
  3463                           ; 1 bytes @ 0x0
  3464                           
  3465  0077                     ?_LED_UP_ON:	
  3466                           ; 1 bytes @ 0x0
  3467                           
  3468  0077                     ?_LED_DOWN_ON:	
  3469                           ; 1 bytes @ 0x0
  3470                           
  3471  0077                     ?_LED_UP_OFF:	
  3472                           ; 1 bytes @ 0x0
  3473                           
  3474  0077                     ?_LED_DOWN_OFF:	
  3475                           ; 1 bytes @ 0x0
  3476                           
  3477  0077                     ?_LED_ON:	
  3478                           ; 1 bytes @ 0x0
  3479                           
  3480  0077                     ?_LED_OFF:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483  0077                     ?_ALL_ON:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486  0077                     ?_ALL_OFF:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489  0077                     ?_main:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492                           
  3493                           ; 1 bytes @ 0x0
  3494  0077                     	ds	1
  3495  0078                     ??_EUSART_Receive_ISR:	
  3496  0078                     ??_EUSART_DefaultErrorHandler:	
  3497                           ; 1 bytes @ 0x1
  3498                           
  3499  0078                     ??_TMR0_ISR:	
  3500                           ; 1 bytes @ 0x1
  3501                           
  3502  0078                     EUSART_Read@readValue:	
  3503                           ; 1 bytes @ 0x1
  3504                           
  3505                           
  3506                           ; 1 bytes @ 0x1
  3507  0078                     	ds	1
  3508  0079                     ??_ReceivedMessage:	
  3509                           
  3510                           ; 1 bytes @ 0x2
  3511  0079                     	ds	1
  3512  007A                     ReceivedMessage@readByte:	
  3513                           
  3514                           ; 1 bytes @ 0x3
  3515  007A                     	ds	4
  3516  007E                     ??_INTERRUPT_InterruptManager:	
  3517                           
  3518                           	psect	cstackBANK0
  3519  0020                     __pcstackBANK0:	
  3520                           ; 1 bytes @ 0x7
  3521                           
  3522  0020                     ??_MTOUCH_Button_isPressed:	
  3523  0020                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3524                           ; 1 bytes @ 0x0
  3525                           
  3526  0020                     ??_MTOUCH_needReburst:	
  3527                           ; 1 bytes @ 0x0
  3528                           
  3529  0020                     ?_Sensor_DefaultCallback:	
  3530                           ; 1 bytes @ 0x0
  3531                           
  3532  0020                     ??_Sensor_Sampled_Reset:	
  3533                           ; 1 bytes @ 0x0
  3534                           
  3535  0020                     ??_Sensor_isEnabled:	
  3536                           ; 1 bytes @ 0x0
  3537                           
  3538  0020                     ??_Sensor_setSampled:	
  3539                           ; 1 bytes @ 0x0
  3540                           
  3541  0020                     ??_Sensor_isActive:	
  3542                           ; 1 bytes @ 0x0
  3543                           
  3544  0020                     ??_Sensor_isCalibrated:	
  3545                           ; 1 bytes @ 0x0
  3546                           
  3547  0020                     ??_Sensor_setActive:	
  3548                           ; 1 bytes @ 0x0
  3549                           
  3550  0020                     ??_Sensor_setInactive:	
  3551                           ; 1 bytes @ 0x0
  3552                           
  3553  0020                     ??_Sensor_isCalibratingAcqTime:	
  3554                           ; 1 bytes @ 0x0
  3555                           
  3556  0020                     ??_TMR2_LoadPeriodRegister:	
  3557                           ; 1 bytes @ 0x0
  3558                           
  3559  0020                     ??_TMR2_StartTimer:	
  3560                           ; 1 bytes @ 0x0
  3561                           
  3562  0020                     ??_TMR2_StopTimer:	
  3563                           ; 1 bytes @ 0x0
  3564                           
  3565  0020                     ??_Sensor_setCalibratAcqTime:	
  3566                           ; 1 bytes @ 0x0
  3567                           
  3568  0020                     ??_Sensor_setCalibrated:	
  3569                           ; 1 bytes @ 0x0
  3570                           
  3571  0020                     ?_memcpy:	
  3572                           ; 1 bytes @ 0x0
  3573                           
  3574  0020                     ??_Button_Deviation_Update:	
  3575                           ; 1 bytes @ 0x0
  3576                           
  3577  0020                     ??_Button_Baseline_Update:	
  3578                           ; 1 bytes @ 0x0
  3579                           
  3580  0020                     ??_Button_Tick_helper:	
  3581                           ; 1 bytes @ 0x0
  3582                           
  3583  0020                     ?_EUSART_SetRxInterruptHandler:	
  3584                           ; 1 bytes @ 0x0
  3585                           
  3586  0020                     ?_EUSART_SetTxInterruptHandler:	
  3587                           ; 1 bytes @ 0x0
  3588                           
  3589  0020                     ?_EUSART_SetFramingErrorHandler:	
  3590                           ; 1 bytes @ 0x0
  3591                           
  3592  0020                     ?_EUSART_SetOverrunErrorHandler:	
  3593                           ; 1 bytes @ 0x0
  3594                           
  3595  0020                     ?_EUSART_SetErrorHandler:	
  3596                           ; 1 bytes @ 0x0
  3597                           
  3598  0020                     ??_PIN_MANAGER_Initialize:	
  3599                           ; 1 bytes @ 0x0
  3600                           
  3601  0020                     ??_OSCILLATOR_Initialize:	
  3602                           ; 1 bytes @ 0x0
  3603                           
  3604  0020                     ??_WDT_Initialize:	
  3605                           ; 1 bytes @ 0x0
  3606                           
  3607  0020                     ?_TMR0_SetInterruptHandler:	
  3608                           ; 1 bytes @ 0x0
  3609                           
  3610  0020                     ??_ReadyReceiveBuffer:	
  3611                           ; 1 bytes @ 0x0
  3612                           
  3613  0020                     ?_blockingWait:	
  3614                           ; 1 bytes @ 0x0
  3615                           
  3616  0020                     ??_GetResponse:	
  3617                           ; 1 bytes @ 0x0
  3618                           
  3619  0020                     ?_memset:	
  3620                           ; 1 bytes @ 0x0
  3621                           
  3622  0020                     ??_update_state:	
  3623                           ; 1 bytes @ 0x0
  3624                           
  3625  0020                     ?_strchr:	
  3626                           ; 1 bytes @ 0x0
  3627                           
  3628  0020                     ??_Sensor_getScanGroupIndex:	
  3629                           ; 1 bytes @ 0x0
  3630                           
  3631  0020                     ?_MTOUCH_Button_SetPressedCallback:	
  3632                           ; 1 bytes @ 0x0
  3633                           
  3634  0020                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3635                           ; 1 bytes @ 0x0
  3636                           
  3637  0020                     ?_EUSART_Write:	
  3638                           ; 1 bytes @ 0x0
  3639                           
  3640  0020                     ??_TMR2_Initialize:	
  3641                           ; 1 bytes @ 0x0
  3642                           
  3643  0020                     ?_INT_SetInterruptHandler:	
  3644                           ; 1 bytes @ 0x0
  3645                           
  3646  0020                     ??_LED_UP_ON:	
  3647                           ; 1 bytes @ 0x0
  3648                           
  3649  0020                     ??_LED_DOWN_ON:	
  3650                           ; 1 bytes @ 0x0
  3651                           
  3652  0020                     ??_LED_UP_OFF:	
  3653                           ; 1 bytes @ 0x0
  3654                           
  3655  0020                     ??_LED_DOWN_OFF:	
  3656                           ; 1 bytes @ 0x0
  3657                           
  3658  0020                     ??_LED_ON:	
  3659                           ; 1 bytes @ 0x0
  3660                           
  3661  0020                     ??_LED_OFF:	
  3662                           ; 1 bytes @ 0x0
  3663                           
  3664  0020                     ??_ALL_ON:	
  3665                           ; 1 bytes @ 0x0
  3666                           
  3667  0020                     ??_ALL_OFF:	
  3668                           ; 1 bytes @ 0x0
  3669                           
  3670  0020                     ?_LED_RUN:	
  3671                           ; 1 bytes @ 0x0
  3672                           
  3673  0020                     ?___bmul:	
  3674                           ; 1 bytes @ 0x0
  3675                           
  3676  0020                     ?_abs:	
  3677                           ; 1 bytes @ 0x0
  3678                           
  3679  0020                     ?_strcpy:	
  3680                           ; 2 bytes @ 0x0
  3681                           
  3682  0020                     ?_isspace:	
  3683                           ; 2 bytes @ 0x0
  3684                           
  3685  0020                     ?_isdigit:	
  3686                           ; 2 bytes @ 0x0
  3687                           
  3688  0020                     ?_strlen:	
  3689                           ; 2 bytes @ 0x0
  3690                           
  3691  0020                     ?_strncmp:	
  3692                           ; 2 bytes @ 0x0
  3693                           
  3694  0020                     ?___wmul:	
  3695                           ; 2 bytes @ 0x0
  3696                           
  3697  0020                     Sensor_DefaultCallback@sensor:	
  3698                           ; 2 bytes @ 0x0
  3699                           
  3700  0020                     Sensor_setActive@sensor:	
  3701                           ; 1 bytes @ 0x0
  3702                           
  3703  0020                     Sensor_setInactive@sensor:	
  3704                           ; 1 bytes @ 0x0
  3705                           
  3706  0020                     Sensor_isActive@sensor:	
  3707                           ; 1 bytes @ 0x0
  3708                           
  3709  0020                     Sensor_isCalibrated@sensor:	
  3710                           ; 1 bytes @ 0x0
  3711                           
  3712  0020                     Sensor_setCalibrated@sensor:	
  3713                           ; 1 bytes @ 0x0
  3714                           
  3715  0020                     Sensor_setCalibratAcqTime@sensor:	
  3716                           ; 1 bytes @ 0x0
  3717                           
  3718  0020                     Sensor_isCalibratingAcqTime@sensor:	
  3719                           ; 1 bytes @ 0x0
  3720                           
  3721  0020                     Sensor_Sampled_Reset@sensor:	
  3722                           ; 1 bytes @ 0x0
  3723                           
  3724  0020                     Sensor_setSampled@sensor:	
  3725                           ; 1 bytes @ 0x0
  3726                           
  3727  0020                     EUSART_Write@txData:	
  3728                           ; 1 bytes @ 0x0
  3729                           
  3730  0020                     TMR2_LoadPeriodRegister@periodVal:	
  3731                           ; 1 bytes @ 0x0
  3732                           
  3733  0020                     LED_RUN@LED_2:	
  3734                           ; 1 bytes @ 0x0
  3735                           
  3736  0020                     ___bmul@multiplicand:	
  3737                           ; 1 bytes @ 0x0
  3738                           
  3739  0020                     MTOUCH_Button_SetPressedCallback@callback:	
  3740                           ; 1 bytes @ 0x0
  3741                           
  3742  0020                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3743                           ; 2 bytes @ 0x0
  3744                           
  3745  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3746                           ; 2 bytes @ 0x0
  3747                           
  3748  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3749                           ; 2 bytes @ 0x0
  3750                           
  3751  0020                     EUSART_SetErrorHandler@interruptHandler:	
  3752                           ; 2 bytes @ 0x0
  3753                           
  3754  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3755                           ; 2 bytes @ 0x0
  3756                           
  3757  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3758                           ; 2 bytes @ 0x0
  3759                           
  3760  0020                     INT_SetInterruptHandler@InterruptHandler:	
  3761                           ; 2 bytes @ 0x0
  3762                           
  3763  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  3764                           ; 2 bytes @ 0x0
  3765                           
  3766  0020                     blockingWait@limit:	
  3767                           ; 2 bytes @ 0x0
  3768                           
  3769  0020                     ___wmul@multiplier:	
  3770                           ; 2 bytes @ 0x0
  3771                           
  3772  0020                     abs@a:	
  3773                           ; 2 bytes @ 0x0
  3774                           
  3775  0020                     isdigit@c:	
  3776                           ; 2 bytes @ 0x0
  3777                           
  3778  0020                     isspace@c:	
  3779                           ; 2 bytes @ 0x0
  3780                           
  3781  0020                     memcpy@s1:	
  3782                           ; 2 bytes @ 0x0
  3783                           
  3784  0020                     memset@c:	
  3785                           ; 2 bytes @ 0x0
  3786                           
  3787  0020                     strcpy@dest:	
  3788                           ; 2 bytes @ 0x0
  3789                           
  3790  0020                     strchr@c:	
  3791                           ; 2 bytes @ 0x0
  3792                           
  3793  0020                     strlen@s:	
  3794                           ; 2 bytes @ 0x0
  3795                           
  3796  0020                     strncmp@_r:	
  3797                           ; 2 bytes @ 0x0
  3798                           
  3799                           
  3800                           ; 2 bytes @ 0x0
  3801  0020                     	ds	1
  3802  0021                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3803  0021                     ??_Sensor_DefaultCallback:	
  3804                           ; 1 bytes @ 0x1
  3805                           
  3806  0021                     ?_Sensor_loadADCSettings:	
  3807                           ; 1 bytes @ 0x1
  3808                           
  3809  0021                     ??_EUSART_Write:	
  3810                           ; 1 bytes @ 0x1
  3811                           
  3812  0021                     ??___bmul:	
  3813                           ; 1 bytes @ 0x1
  3814                           
  3815  0021                     Sensor_loadADCSettings@adc_index:	
  3816                           ; 1 bytes @ 0x1
  3817                           
  3818  0021                     Sensor_isEnabled@sensor:	
  3819                           ; 1 bytes @ 0x1
  3820                           
  3821  0021                     MTOUCH_Button_isPressed@name:	
  3822                           ; 1 bytes @ 0x1
  3823                           
  3824  0021                     LED_RUN@LED_3:	
  3825                           ; 1 bytes @ 0x1
  3826                           
  3827  0021                     ReadyReceiveBuffer@position:	
  3828                           ; 1 bytes @ 0x1
  3829                           
  3830                           
  3831                           ; 1 bytes @ 0x1
  3832  0021                     	ds	1
  3833  0022                     ??_abs:	
  3834  0022                     ??_EUSART_SetRxInterruptHandler:	
  3835                           ; 1 bytes @ 0x2
  3836                           
  3837  0022                     ??_EUSART_SetTxInterruptHandler:	
  3838                           ; 1 bytes @ 0x2
  3839                           
  3840  0022                     ??_EUSART_SetFramingErrorHandler:	
  3841                           ; 1 bytes @ 0x2
  3842                           
  3843  0022                     ??_EUSART_SetOverrunErrorHandler:	
  3844                           ; 1 bytes @ 0x2
  3845                           
  3846  0022                     ??_EUSART_SetErrorHandler:	
  3847                           ; 1 bytes @ 0x2
  3848                           
  3849  0022                     ??_TMR0_Initialize:	
  3850                           ; 1 bytes @ 0x2
  3851                           
  3852  0022                     ??_TMR0_SetInterruptHandler:	
  3853                           ; 1 bytes @ 0x2
  3854                           
  3855  0022                     ??_blockingWait:	
  3856                           ; 1 bytes @ 0x2
  3857                           
  3858  0022                     ??_isspace:	
  3859                           ; 1 bytes @ 0x2
  3860                           
  3861  0022                     ??_isdigit:	
  3862                           ; 1 bytes @ 0x2
  3863                           
  3864  0022                     ??_strlen:	
  3865                           ; 1 bytes @ 0x2
  3866                           
  3867  0022                     ??_strchr:	
  3868                           ; 1 bytes @ 0x2
  3869                           
  3870  0022                     ??_Sensor_loadADCSettings:	
  3871                           ; 1 bytes @ 0x2
  3872                           
  3873  0022                     ??_MTOUCH_Button_Buttonmask_Get:	
  3874                           ; 1 bytes @ 0x2
  3875                           
  3876  0022                     ??_MTOUCH_Button_SetPressedCallback:	
  3877                           ; 1 bytes @ 0x2
  3878                           
  3879  0022                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3880                           ; 1 bytes @ 0x2
  3881                           
  3882  0022                     ??_EUSART_Initialize:	
  3883                           ; 1 bytes @ 0x2
  3884                           
  3885  0022                     ??_INT_SetInterruptHandler:	
  3886                           ; 1 bytes @ 0x2
  3887                           
  3888  0022                     ??_EXT_INT_Initialize:	
  3889                           ; 1 bytes @ 0x2
  3890                           
  3891  0022                     ??_LED_RUN:	
  3892                           ; 1 bytes @ 0x2
  3893                           
  3894  0022                     ?_SendString:	
  3895                           ; 1 bytes @ 0x2
  3896                           
  3897  0022                     Sensor_getScanGroupIndex@sensor:	
  3898                           ; 1 bytes @ 0x2
  3899                           
  3900  0022                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3901                           ; 1 bytes @ 0x2
  3902                           
  3903  0022                     Button_Tick_helper@button:	
  3904                           ; 1 bytes @ 0x2
  3905                           
  3906  0022                     LED_RUN@LED_1:	
  3907                           ; 1 bytes @ 0x2
  3908                           
  3909  0022                     ___bmul@product:	
  3910                           ; 1 bytes @ 0x2
  3911                           
  3912  0022                     strchr@s:	
  3913                           ; 1 bytes @ 0x2
  3914                           
  3915  0022                     SendString@command:	
  3916                           ; 1 bytes @ 0x2
  3917                           
  3918  0022                     ___wmul@multiplicand:	
  3919                           ; 2 bytes @ 0x2
  3920                           
  3921  0022                     memcpy@n:	
  3922                           ; 2 bytes @ 0x2
  3923                           
  3924  0022                     memset@n:	
  3925                           ; 2 bytes @ 0x2
  3926                           
  3927  0022                     strcpy@src:	
  3928                           ; 2 bytes @ 0x2
  3929                           
  3930  0022                     strncmp@n:	
  3931                           ; 2 bytes @ 0x2
  3932                           
  3933                           
  3934                           ; 2 bytes @ 0x2
  3935  0022                     	ds	1
  3936  0023                     ??_MTOUCH_Button_Tick:	
  3937  0023                     Sensor_getScanGroupIndex@sensorGroup:	
  3938                           ; 1 bytes @ 0x3
  3939                           
  3940  0023                     ___bmul@multiplier:	
  3941                           ; 1 bytes @ 0x3
  3942                           
  3943  0023                     blockingWait@counter:	
  3944                           ; 1 bytes @ 0x3
  3945                           
  3946  0023                     strlen@a:	
  3947                           ; 2 bytes @ 0x3
  3948                           
  3949                           
  3950                           ; 2 bytes @ 0x3
  3951  0023                     	ds	1
  3952  0024                     ??_MTOUCH_Sensor_Enable:	
  3953  0024                     ??_MTOUCH_Sensor_Calibrate:	
  3954                           ; 1 bytes @ 0x4
  3955                           
  3956  0024                     ??_Sensor_RawSample_Update:	
  3957                           ; 1 bytes @ 0x4
  3958                           
  3959  0024                     ??_Sensor_postAcquisitionProcess:	
  3960                           ; 1 bytes @ 0x4
  3961                           
  3962  0024                     ??_Sensor_autoCalibration:	
  3963                           ; 1 bytes @ 0x4
  3964                           
  3965  0024                     ??_memcpy:	
  3966                           ; 1 bytes @ 0x4
  3967                           
  3968  0024                     ??_strcpy:	
  3969                           ; 1 bytes @ 0x4
  3970                           
  3971  0024                     ??_memset:	
  3972                           ; 1 bytes @ 0x4
  3973                           
  3974  0024                     ??_strncmp:	
  3975                           ; 1 bytes @ 0x4
  3976                           
  3977  0024                     ??_MTOUCH_Sensor_isCalibrated:	
  3978                           ; 1 bytes @ 0x4
  3979                           
  3980  0024                     ??_MTOUCH_Sensor_wasSampled:	
  3981                           ; 1 bytes @ 0x4
  3982                           
  3983  0024                     ??_SendString:	
  3984                           ; 1 bytes @ 0x4
  3985                           
  3986  0024                     ??___wmul:	
  3987                           ; 1 bytes @ 0x4
  3988                           
  3989  0024                     ?_MTOUCH_Sensor_RawSample_Get:	
  3990                           ; 1 bytes @ 0x4
  3991                           
  3992  0024                     MTOUCH_Button_Tick@i:	
  3993                           ; 2 bytes @ 0x4
  3994                           
  3995  0024                     MTOUCH_Button_Buttonmask_Get@output:	
  3996                           ; 1 bytes @ 0x4
  3997                           
  3998  0024                     _isspace$2625:	
  3999                           ; 1 bytes @ 0x4
  4000                           
  4001  0024                     ___wmul@product:	
  4002                           ; 1 bytes @ 0x4
  4003                           
  4004                           
  4005                           ; 2 bytes @ 0x4
  4006  0024                     	ds	1
  4007  0025                     ??_MTOUCH_Tick:	
  4008  0025                     ??_INIT_SMART_LIGHT:	
  4009                           ; 1 bytes @ 0x5
  4010                           
  4011  0025                     Sensor_postAcquisitionProcess@adcIndex:	
  4012                           ; 1 bytes @ 0x5
  4013                           
  4014  0025                     Sensor_RawSample_Update@adcIndex:	
  4015                           ; 1 bytes @ 0x5
  4016                           
  4017  0025                     MTOUCH_Sensor_Enable@sensor:	
  4018                           ; 1 bytes @ 0x5
  4019                           
  4020  0025                     MTOUCH_Sensor_Calibrate@sensor:	
  4021                           ; 1 bytes @ 0x5
  4022                           
  4023  0025                     MTOUCH_Sensor_isCalibrated@sensor:	
  4024                           ; 1 bytes @ 0x5
  4025                           
  4026  0025                     MTOUCH_Sensor_wasSampled@sensor:	
  4027                           ; 1 bytes @ 0x5
  4028                           
  4029  0025                     MTOUCH_Button_Buttonmask_Get@i:	
  4030                           ; 1 bytes @ 0x5
  4031                           
  4032  0025                     strncmp@_l:	
  4033                           ; 1 bytes @ 0x5
  4034                           
  4035  0025                     _Sensor_loadADCSettings$562:	
  4036                           ; 1 bytes @ 0x5
  4037                           
  4038  0025                     memcpy@s:	
  4039                           ; 2 bytes @ 0x5
  4040                           
  4041                           
  4042                           ; 2 bytes @ 0x5
  4043  0025                     	ds	1
  4044  0026                     ??_check_on_off:	
  4045  0026                     ??_check_up_down:	
  4046                           ; 1 bytes @ 0x6
  4047                           
  4048  0026                     ??_MTOUCH_Sensor_Initialize:	
  4049                           ; 1 bytes @ 0x6
  4050                           
  4051  0026                     ??_MTOUCH_Sensor_RawSample_Get:	
  4052                           ; 1 bytes @ 0x6
  4053                           
  4054  0026                     ??_MTOUCH_Button_Initialize:	
  4055                           ; 1 bytes @ 0x6
  4056                           
  4057  0026                     ?_atoi:	
  4058                           ; 1 bytes @ 0x6
  4059                           
  4060  0026                     Sensor_RawSample_Update@sensor:	
  4061                           ; 2 bytes @ 0x6
  4062                           
  4063  0026                     Button_Baseline_Update@button:	
  4064                           ; 1 bytes @ 0x6
  4065                           
  4066  0026                     Sensor_postAcquisitionProcess@deviation:	
  4067                           ; 1 bytes @ 0x6
  4068                           
  4069  0026                     memset@k:	
  4070                           ; 2 bytes @ 0x6
  4071                           
  4072  0026                     strncmp@r:	
  4073                           ; 2 bytes @ 0x6
  4074                           
  4075                           
  4076                           ; 2 bytes @ 0x6
  4077  0026                     	ds	1
  4078  0027                     ?_Button_DefaultCallback:	
  4079  0027                     ?_myButtonPressedCallback:	
  4080                           ; 1 bytes @ 0x7
  4081                           
  4082  0027                     ?_myButtonReleasedCallback:	
  4083                           ; 1 bytes @ 0x7
  4084                           
  4085  0027                     MTOUCH_Sensor_Initialize@sensor:	
  4086                           ; 1 bytes @ 0x7
  4087                           
  4088  0027                     Sensor_loadADCSettings@addressOffset:	
  4089                           ; 1 bytes @ 0x7
  4090                           
  4091  0027                     MTOUCH_Sensor_RawSample_Get@name:	
  4092                           ; 1 bytes @ 0x7
  4093                           
  4094  0027                     Button_DefaultCallback@button:	
  4095                           ; 1 bytes @ 0x7
  4096                           
  4097  0027                     myButtonPressedCallback@button:	
  4098                           ; 1 bytes @ 0x7
  4099                           
  4100  0027                     myButtonReleasedCallback@button:	
  4101                           ; 1 bytes @ 0x7
  4102                           
  4103  0027                     memcpy@tmp:	
  4104                           ; 1 bytes @ 0x7
  4105                           
  4106                           
  4107                           ; 1 bytes @ 0x7
  4108  0027                     	ds	1
  4109  0028                     ??_MTOUCH_Sensor_InitializeAll:	
  4110  0028                     ??_Button_DefaultCallback:	
  4111                           ; 1 bytes @ 0x8
  4112                           
  4113  0028                     ??_Button_Baseline_Initialize:	
  4114                           ; 1 bytes @ 0x8
  4115                           
  4116  0028                     ??_Button_Reading_Update_Helper:	
  4117                           ; 1 bytes @ 0x8
  4118                           
  4119  0028                     ??_myButtonPressedCallback:	
  4120                           ; 1 bytes @ 0x8
  4121                           
  4122  0028                     ??_myButtonReleasedCallback:	
  4123                           ; 1 bytes @ 0x8
  4124                           
  4125  0028                     ??_atoi:	
  4126                           ; 1 bytes @ 0x8
  4127                           
  4128  0028                     Sensor_postAcquisitionProcess@sensor:	
  4129                           ; 1 bytes @ 0x8
  4130                           
  4131  0028                     Sensor_loadADCSettings@sensor:	
  4132                           ; 1 bytes @ 0x8
  4133                           
  4134  0028                     Sensor_autoCalibration@adcIndex:	
  4135                           ; 1 bytes @ 0x8
  4136                           
  4137  0028                     MTOUCH_Button_Initialize@name:	
  4138                           ; 1 bytes @ 0x8
  4139                           
  4140  0028                     memcpy@d1:	
  4141                           ; 1 bytes @ 0x8
  4142                           
  4143  0028                     memset@dest:	
  4144                           ; 1 bytes @ 0x8
  4145                           
  4146  0028                     strncmp@l:	
  4147                           ; 1 bytes @ 0x8
  4148                           
  4149  0028                     strcpy@s:	
  4150                           ; 1 bytes @ 0x8
  4151                           
  4152                           
  4153                           ; 2 bytes @ 0x8
  4154  0028                     	ds	1
  4155  0029                     ?_strstr:	
  4156  0029                     MTOUCH_Sensor_InitializeAll@sensor:	
  4157                           ; 1 bytes @ 0x9
  4158                           
  4159  0029                     Sensor_autoCalibration@sensor:	
  4160                           ; 1 bytes @ 0x9
  4161                           
  4162  0029                     MTOUCH_Button_Initialize@button:	
  4163                           ; 1 bytes @ 0x9
  4164                           
  4165  0029                     memcpy@d:	
  4166                           ; 1 bytes @ 0x9
  4167                           
  4168  0029                     memset@s:	
  4169                           ; 1 bytes @ 0x9
  4170                           
  4171  0029                     strstr@n:	
  4172                           ; 1 bytes @ 0x9
  4173                           
  4174                           
  4175                           ; 2 bytes @ 0x9
  4176  0029                     	ds	1
  4177  002A                     ??_MTOUCH_Button_InitializeAll:	
  4178  002A                     ?_Sensor_Acq_ExecutePacket:	
  4179                           ; 1 bytes @ 0xA
  4180                           
  4181  002A                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  4182                           ; 1 bytes @ 0xA
  4183                           
  4184  002A                     Button_Deviation_Update@button:	
  4185                           ; 1 bytes @ 0xA
  4186                           
  4187  002A                     Button_Reading_Update_Helper@button:	
  4188                           ; 1 bytes @ 0xA
  4189                           
  4190  002A                     strcpy@d:	
  4191                           ; 1 bytes @ 0xA
  4192                           
  4193                           
  4194                           ; 2 bytes @ 0xA
  4195  002A                     	ds	1
  4196  002B                     ??_Sensor_Acq_ExecutePacket:	
  4197  002B                     ??_Button_Reading_Update:	
  4198                           ; 1 bytes @ 0xB
  4199                           
  4200  002B                     ??_strstr:	
  4201                           ; 1 bytes @ 0xB
  4202                           
  4203  002B                     MTOUCH_Button_InitializeAll@button:	
  4204                           ; 1 bytes @ 0xB
  4205                           
  4206  002B                     Button_Reading_Update@button:	
  4207                           ; 1 bytes @ 0xB
  4208                           
  4209  002B                     Button_Deviation_Update@deviation:	
  4210                           ; 1 bytes @ 0xB
  4211                           
  4212                           
  4213                           ; 4 bytes @ 0xB
  4214  002B                     	ds	1
  4215  002C                     ??_MTOUCH_Initialize:	
  4216  002C                     ??_SYSTEM_Initialize:	
  4217                           ; 1 bytes @ 0xC
  4218                           
  4219  002C                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  4220                           ; 1 bytes @ 0xC
  4221                           
  4222  002C                     Button_Baseline_Initialize@button:	
  4223                           ; 1 bytes @ 0xC
  4224                           
  4225  002C                     atoi@neg:	
  4226                           ; 1 bytes @ 0xC
  4227                           
  4228                           
  4229                           ; 2 bytes @ 0xC
  4230  002C                     	ds	1
  4231  002D                     ?_Button_State_Initializing:	
  4232  002D                     ?_Button_State_NotPressed:	
  4233                           ; 1 bytes @ 0xD
  4234                           
  4235  002D                     ?_Button_State_Pressed:	
  4236                           ; 1 bytes @ 0xD
  4237                           
  4238  002D                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  4239                           ; 1 bytes @ 0xD
  4240                           
  4241  002D                     Button_State_Initializing@button:	
  4242                           ; 1 bytes @ 0xD
  4243                           
  4244  002D                     Button_State_NotPressed@button:	
  4245                           ; 1 bytes @ 0xD
  4246                           
  4247  002D                     Button_State_Pressed@button:	
  4248                           ; 1 bytes @ 0xD
  4249                           
  4250                           
  4251                           ; 1 bytes @ 0xD
  4252  002D                     	ds	1
  4253  002E                     ??_Button_State_Initializing:	
  4254  002E                     ??_Button_State_NotPressed:	
  4255                           ; 1 bytes @ 0xE
  4256                           
  4257  002E                     ??_Button_State_Pressed:	
  4258                           ; 1 bytes @ 0xE
  4259                           
  4260  002E                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  4261                           ; 1 bytes @ 0xE
  4262                           
  4263  002E                     _atoi$2607:	
  4264                           ; 1 bytes @ 0xE
  4265                           
  4266  002E                     strstr@nl:	
  4267                           ; 2 bytes @ 0xE
  4268                           
  4269                           
  4270                           ; 2 bytes @ 0xE
  4271  002E                     	ds	1
  4272  002F                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  4273                           
  4274                           ; 1 bytes @ 0xF
  4275  002F                     	ds	1
  4276  0030                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  4277  0030                     strstr@h:	
  4278                           ; 1 bytes @ 0x10
  4279                           
  4280  0030                     _atoi$2609:	
  4281                           ; 1 bytes @ 0x10
  4282                           
  4283                           
  4284                           ; 2 bytes @ 0x10
  4285  0030                     	ds	1
  4286  0031                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  4287                           
  4288                           ; 1 bytes @ 0x11
  4289  0031                     	ds	1
  4290  0032                     ??_Button_Service:	
  4291  0032                     Sensor_Acq_ExecutePacket@activeSensor:	
  4292                           ; 1 bytes @ 0x12
  4293                           
  4294  0032                     _atoi$2608:	
  4295                           ; 1 bytes @ 0x12
  4296                           
  4297                           
  4298                           ; 1 bytes @ 0x12
  4299  0032                     	ds	1
  4300  0033                     Sensor_Acq_ExecutePacket@last_a:	
  4301  0033                     atoi@n:	
  4302                           ; 2 bytes @ 0x13
  4303                           
  4304                           
  4305                           ; 2 bytes @ 0x13
  4306  0033                     	ds	1
  4307  0034                     Button_Service@name:	
  4308                           
  4309                           ; 1 bytes @ 0x14
  4310  0034                     	ds	1
  4311  0035                     Button_Service@button:	
  4312  0035                     atoi@s:	
  4313                           ; 1 bytes @ 0x15
  4314                           
  4315  0035                     Sensor_Acq_ExecutePacket@last_b:	
  4316                           ; 1 bytes @ 0x15
  4317                           
  4318                           
  4319                           ; 2 bytes @ 0x15
  4320  0035                     	ds	1
  4321  0036                     ??_MTOUCH_Button_ServiceAll:	
  4322                           
  4323                           ; 1 bytes @ 0x16
  4324  0036                     	ds	1
  4325  0037                     Sensor_Acq_ExecutePacket@packet_counter:	
  4326  0037                     MTOUCH_Button_ServiceAll@button:	
  4327                           ; 1 bytes @ 0x17
  4328                           
  4329                           
  4330                           ; 1 bytes @ 0x17
  4331  0037                     	ds	1
  4332  0038                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  4333                           
  4334                           ; 1 bytes @ 0x18
  4335  0038                     	ds	1
  4336  0039                     ?_Sensor_Scanfrequency_Evaluation:	
  4337  0039                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  4338                           ; 1 bytes @ 0x19
  4339                           
  4340                           
  4341                           ; 1 bytes @ 0x19
  4342  0039                     	ds	1
  4343  003A                     ??_Sensor_Scanfrequency_Evaluation:	
  4344                           
  4345                           ; 1 bytes @ 0x1A
  4346  003A                     	ds	2
  4347  003C                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  4348                           
  4349                           ; 1 bytes @ 0x1C
  4350  003C                     	ds	1
  4351  003D                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  4352                           
  4353                           ; 2 bytes @ 0x1D
  4354  003D                     	ds	2
  4355  003F                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  4356                           
  4357                           ; 1 bytes @ 0x1F
  4358  003F                     	ds	1
  4359  0040                     Sensor_Scanfrequency_Evaluation@retry:	
  4360                           
  4361                           ; 1 bytes @ 0x20
  4362  0040                     	ds	1
  4363  0041                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  4364                           
  4365                           ; 4 bytes @ 0x21
  4366  0041                     	ds	4
  4367  0045                     Sensor_Scanfrequency_Evaluation@i:	
  4368                           
  4369                           ; 1 bytes @ 0x25
  4370  0045                     	ds	1
  4371  0046                     ?_Sensor_Acquisition:	
  4372  0046                     Sensor_Acquisition@sensor_adc2:	
  4373                           ; 1 bytes @ 0x26
  4374                           
  4375                           
  4376                           ; 1 bytes @ 0x26
  4377  0046                     	ds	1
  4378  0047                     ??_Sensor_Acquisition:	
  4379                           
  4380                           ; 1 bytes @ 0x27
  4381  0047                     	ds	1
  4382  0048                     Sensor_Acquisition@retry:	
  4383                           
  4384                           ; 1 bytes @ 0x28
  4385  0048                     	ds	1
  4386  0049                     Sensor_Acquisition@sensor_adc1:	
  4387                           
  4388                           ; 1 bytes @ 0x29
  4389  0049                     	ds	1
  4390  004A                     ??_Sensor_Service:	
  4391                           
  4392                           ; 1 bytes @ 0x2A
  4393  004A                     	ds	3
  4394  004D                     Sensor_Service@scanGroup:	
  4395                           
  4396                           ; 1 bytes @ 0x2D
  4397  004D                     	ds	1
  4398  004E                     Sensor_Service@error:	
  4399                           
  4400                           ; 1 bytes @ 0x2E
  4401  004E                     	ds	1
  4402  004F                     Sensor_Service@sensor_adc1:	
  4403                           
  4404                           ; 1 bytes @ 0x2F
  4405  004F                     	ds	1
  4406  0050                     Sensor_Service@sensor_adc2:	
  4407                           
  4408                           ; 1 bytes @ 0x30
  4409  0050                     	ds	1
  4410  0051                     ??_MTOUCH_Sensor_SampleAll:	
  4411                           
  4412                           ; 1 bytes @ 0x31
  4413  0051                     	ds	1
  4414  0052                     MTOUCH_Sensor_SampleAll@group:	
  4415                           
  4416                           ; 1 bytes @ 0x32
  4417  0052                     	ds	1
  4418  0053                     ??_MTOUCH_Service_Mainloop:	
  4419                           
  4420                           ; 1 bytes @ 0x33
  4421  0053                     	ds	1
  4422  0054                     ??_main:	
  4423                           
  4424                           ; 1 bytes @ 0x34
  4425  0054                     	ds	1
  4426                           
  4427                           	psect	maintext
  4428  009F                     __pmaintext:	
  4429 ;;
  4430 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4431 ;;
  4432 ;; *************** function _main *****************
  4433 ;; Defined at:
  4434 ;;		line 26 in file "main.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : B1F/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4448 ;;      Params:         0       0       0       0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0       0
  4450 ;;      Temps:          0       1       0       0       0       0       0       0
  4451 ;;      Totals:         0       1       0       0       0       0       0       0
  4452 ;;Total ram usage:        1 bytes
  4453 ;; Hardware stack levels required when called:   13
  4454 ;; This function calls:
  4455 ;;		_ALL_OFF
  4456 ;;		_ALL_ON
  4457 ;;		_GetResponse
  4458 ;;		_INIT_SMART_LIGHT
  4459 ;;		_LED_DOWN_ON
  4460 ;;		_LED_OFF
  4461 ;;		_LED_ON
  4462 ;;		_LED_RUN
  4463 ;;		_MTOUCH_Button_Buttonmask_Get
  4464 ;;		_MTOUCH_Button_InitializeAll
  4465 ;;		_MTOUCH_Button_SetNotPressedCallback
  4466 ;;		_MTOUCH_Button_SetPressedCallback
  4467 ;;		_MTOUCH_Button_isPressed
  4468 ;;		_MTOUCH_Service_Mainloop
  4469 ;;		_ReadyReceiveBuffer
  4470 ;;		_SYSTEM_Initialize
  4471 ;;		_atoi
  4472 ;;		_blockingWait
  4473 ;;		_memset
  4474 ;;		_strcpy
  4475 ;;		_strstr
  4476 ;;		_update_state
  4477 ;; This function is called by:
  4478 ;;		Startup code after reset
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           
  4483                           ;psect for function _main
  4484  009F                     _main:	
  4485  009F                     l7227:	
  4486                           ;incstack = 0
  4487                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4488                           
  4489                           
  4490                           ;main.c: 28:     SYSTEM_Initialize();
  4491  009F  3193  2307  3180   	fcall	_SYSTEM_Initialize
  4492  00A2                     l7229:	
  4493                           
  4494                           ;main.c: 29:     (INTCONbits.GIE = 1);
  4495  00A2  178B               	bsf	11,7	;volatile
  4496  00A3                     l7231:	
  4497                           
  4498                           ;main.c: 30:     (INTCONbits.PEIE = 1);
  4499  00A3  170B               	bsf	11,6	;volatile
  4500  00A4                     l7233:	
  4501                           
  4502                           ;main.c: 31:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  4503  00A4  30FD               	movlw	low _myButtonPressedCallback
  4504  00A5  0020               	movlb	0	; select bank0
  4505  00A6  00A0               	movwf	MTOUCH_Button_SetPressedCallback@callback
  4506  00A7  3010               	movlw	high _myButtonPressedCallback
  4507  00A8  00A1               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  4508  00A9  3191  2127  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  4509  00AC                     l7235:	
  4510                           
  4511                           ;main.c: 32:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  4512  00AC  30D6               	movlw	low _myButtonReleasedCallback
  4513  00AD  0020               	movlb	0	; select bank0
  4514  00AE  00A0               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  4515  00AF  3012               	movlw	high _myButtonReleasedCallback
  4516  00B0  00A1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  4517  00B1  3191  211E  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  4518  00B4                     l7237:	
  4519                           
  4520                           ;main.c: 33:     triac_level.full = 0x00;
  4521  00B4  0020               	movlb	0	; select bank0
  4522  00B5  01D9               	clrf	_triac_level
  4523  00B6  01DA               	clrf	_triac_level+1
  4524  00B7                     l7239:	
  4525                           
  4526                           ;main.c: 34:     last_touch_status.full_status = 0x00;
  4527  00B7  01F0               	clrf	_last_touch_status
  4528  00B8  01F1               	clrf	_last_touch_status+1
  4529  00B9                     l7241:	
  4530                           
  4531                           ;main.c: 35:     LED_OFF();
  4532  00B9  3191  210C  3180   	fcall	_LED_OFF
  4533  00BC                     l7243:	
  4534                           
  4535                           ;main.c: 36:     config_status = 0;
  4536  00BC  01F3               	clrf	_config_status
  4537  00BD                     l7245:	
  4538                           
  4539                           ;main.c: 37:     INIT_SMART_LIGHT ();
  4540  00BD  3194  249F  3180   	fcall	_INIT_SMART_LIGHT
  4541  00C0                     l7247:	
  4542                           
  4543                           ;main.c: 38:     ReadyReceiveBuffer();
  4544  00C0  3192  2280  3180   	fcall	_ReadyReceiveBuffer
  4545  00C3                     l7249:	
  4546                           
  4547                           ;main.c: 40:     {;main.c: 41:         if(ResponseIndex != 0)
  4548  00C3  0020               	movlb	0	; select bank0
  4549  00C4  0860               	movf	_ResponseIndex,w
  4550  00C5  1903               	btfsc	3,2
  4551  00C6  28C8               	goto	u6931
  4552  00C7  28C9               	goto	u6930
  4553  00C8                     u6931:	
  4554  00C8  295C               	goto	l7281
  4555  00C9                     u6930:	
  4556  00C9                     l7251:	
  4557                           
  4558                           ;main.c: 42:         {;main.c: 43:             blockingWait(2);
  4559  00C9  3002               	movlw	2
  4560  00CA  00A0               	movwf	blockingWait@limit
  4561  00CB  3000               	movlw	0
  4562  00CC  00A1               	movwf	blockingWait@limit+1
  4563  00CD  3194  2445  3180   	fcall	_blockingWait
  4564  00D0                     l7253:	
  4565                           
  4566                           ;main.c: 44:             rxData = GetResponse();
  4567  00D0  3190  20B6  3180   	fcall	_GetResponse
  4568  00D3  0020               	movlb	0	; select bank0
  4569  00D4  00D4               	movwf	??_main
  4570  00D5  0854               	movf	??_main,w
  4571  00D6  0021               	movlb	1	; select bank1
  4572  00D7  00C4               	movwf	_rxData^(0+128)
  4573  00D8                     l7255:	
  4574                           
  4575                           ;main.c: 47:             strcpy(Storage, rxData);
  4576  00D8  3020               	movlw	low _Storage
  4577  00D9  0020               	movlb	0	; select bank0
  4578  00DA  00A0               	movwf	strcpy@dest
  4579  00DB  3002               	movlw	high _Storage
  4580  00DC  00A1               	movwf	strcpy@dest+1
  4581  00DD  0021               	movlb	1	; select bank1
  4582  00DE  0844               	movf	_rxData^(0+128),w
  4583  00DF  0020               	movlb	0	; select bank0
  4584  00E0  00A2               	movwf	strcpy@src
  4585  00E1  39FF               	andlw	255
  4586  00E2  1D03               	skipz
  4587  00E3  3001               	movlw	1
  4588  00E4  00A3               	movwf	strcpy@src+1
  4589  00E5  3196  2614  3180   	fcall	_strcpy
  4590  00E8                     l7257:	
  4591                           
  4592                           ;main.c: 49:             static char *s;;main.c: 50:             s = strstr(Storage,"LEV
      +                          EL");
  4593  00E8  3067               	movlw	low (STR_1| (0+32768))
  4594  00E9  0020               	movlb	0	; select bank0
  4595  00EA  00A9               	movwf	strstr@n
  4596  00EB  3098               	movlw	high (STR_1| (0+32768))
  4597  00EC  00AA               	movwf	strstr@n+1
  4598  00ED  3020               	movlw	(low (_Storage| (0+512)))& (0+255)
  4599  00EE  3189  2136  3180   	fcall	_strstr
  4600  00F1  0020               	movlb	0	; select bank0
  4601  00F2  00D4               	movwf	??_main
  4602  00F3  0854               	movf	??_main,w
  4603  00F4  00DF               	movwf	main@s
  4604  00F5                     l7259:	
  4605                           
  4606                           ;main.c: 51:             if(s != ((void*)0))
  4607  00F5  085F               	movf	main@s,w
  4608  00F6  1903               	btfsc	3,2
  4609  00F7  28F9               	goto	u6941
  4610  00F8  28FA               	goto	u6940
  4611  00F9                     u6941:	
  4612  00F9  2942               	goto	l7275
  4613  00FA                     u6940:	
  4614  00FA                     l7261:	
  4615                           
  4616                           ;main.c: 52:             {;main.c: 53:                 strcpy(Storage2, s);
  4617  00FA  30CC               	movlw	low _Storage2
  4618  00FB  00A0               	movwf	strcpy@dest
  4619  00FC  3000               	movlw	high _Storage2
  4620  00FD  00A1               	movwf	strcpy@dest+1
  4621  00FE  085F               	movf	main@s,w
  4622  00FF  00A2               	movwf	strcpy@src
  4623  0100  39FF               	andlw	255
  4624  0101  1D03               	skipz
  4625  0102  3002               	movlw	2
  4626  0103  00A3               	movwf	strcpy@src+1
  4627  0104  3196  2614  3180   	fcall	_strcpy
  4628  0107                     l7263:	
  4629                           
  4630                           ;main.c: 55:                 Num_Char[0] = Storage2[6];
  4631  0107  0021               	movlb	1	; select bank1
  4632  0108  0852               	movf	(_Storage2^(0+128)+6),w
  4633  0109  0020               	movlb	0	; select bank0
  4634  010A  00D4               	movwf	??_main
  4635  010B  0854               	movf	??_main,w
  4636  010C  0021               	movlb	1	; select bank1
  4637  010D  00D5               	movwf	_Num_Char^(0+128)
  4638  010E                     l7265:	
  4639                           
  4640                           ;main.c: 56:                 Num_Char[1] = Storage2[7];
  4641  010E  0853               	movf	(_Storage2^(0+128)+7),w
  4642  010F  0020               	movlb	0	; select bank0
  4643  0110  00D4               	movwf	??_main
  4644  0111  0854               	movf	??_main,w
  4645  0112  0021               	movlb	1	; select bank1
  4646  0113  00D6               	movwf	(_Num_Char^(0+128)+1)
  4647  0114                     l7267:	
  4648                           
  4649                           ;main.c: 57:                 Num_Char[2] = Storage2[8];
  4650  0114  0854               	movf	(_Storage2^(0+128)+8),w
  4651  0115  0020               	movlb	0	; select bank0
  4652  0116  00D4               	movwf	??_main
  4653  0117  0854               	movf	??_main,w
  4654  0118  0021               	movlb	1	; select bank1
  4655  0119  00D7               	movwf	(_Num_Char^(0+128)+2)
  4656  011A                     l7269:	
  4657                           
  4658                           ;main.c: 58:                 static int num = 0;;main.c: 59:                 num = atoi(
      +                          Num_Char);
  4659  011A  30D5               	movlw	(low (_Num_Char| 0))& (0+255)
  4660  011B  318F  2757  3180   	fcall	_atoi
  4661  011E  0020               	movlb	0	; select bank0
  4662  011F  0827               	movf	?_atoi+1,w
  4663  0120  0021               	movlb	1	; select bank1
  4664  0121  00B9               	movwf	(main@num+1)^(0+128)
  4665  0122  0020               	movlb	0	; select bank0
  4666  0123  0826               	movf	?_atoi,w
  4667  0124  0021               	movlb	1	; select bank1
  4668  0125  00B8               	movwf	main@num^(0+128)
  4669                           
  4670                           ;main.c: 60:                 if(num >= 15) num = 15;
  4671  0126  0839               	movf	(main@num+1)^(0+128),w
  4672  0127  3A80               	xorlw	128
  4673  0128  0020               	movlb	0	; select bank0
  4674  0129  00D4               	movwf	??_main
  4675  012A  3080               	movlw	128
  4676  012B  0254               	subwf	??_main,w
  4677  012C  1D03               	skipz
  4678  012D  2931               	goto	u6955
  4679  012E  300F               	movlw	15
  4680  012F  0021               	movlb	1	; select bank1
  4681  0130  0238               	subwf	main@num^(0+128),w
  4682  0131                     u6955:	
  4683  0131  1C03               	skipc
  4684  0132  2934               	goto	u6951
  4685  0133  2935               	goto	u6950
  4686  0134                     u6951:	
  4687  0134  293A               	goto	l7273
  4688  0135                     u6950:	
  4689  0135                     l7271:	
  4690  0135  300F               	movlw	15
  4691  0136  0021               	movlb	1	; select bank1
  4692  0137  00B8               	movwf	main@num^(0+128)
  4693  0138  3000               	movlw	0
  4694  0139  00B9               	movwf	(main@num^(0+128)+1)
  4695  013A                     l7273:	
  4696                           
  4697                           ;main.c: 61:                 triac_level.level = num;
  4698  013A  0020               	movlb	0	; select bank0
  4699  013B  0859               	movf	_triac_level,w
  4700  013C  0021               	movlb	1	; select bank1
  4701  013D  0638               	xorwf	main@num^(0+128),w
  4702  013E  39F0               	andlw	-16
  4703  013F  0638               	xorwf	main@num^(0+128),w
  4704  0140  0020               	movlb	0	; select bank0
  4705  0141  00D9               	movwf	_triac_level
  4706  0142                     l7275:	
  4707                           
  4708                           ;main.c: 67:             memset(Storage2,((void*)0),9);
  4709  0142  3000               	movlw	0
  4710  0143  00A0               	movwf	memset@c
  4711  0144  00A1               	movwf	memset@c+1
  4712  0145  3009               	movlw	9
  4713  0146  00A2               	movwf	memset@n
  4714  0147  3000               	movlw	0
  4715  0148  00A3               	movwf	memset@n+1
  4716  0149  30CC               	movlw	(low (_Storage2| 0))& (0+255)
  4717  014A  318E  26B2  3180   	fcall	_memset
  4718  014D                     l7277:	
  4719                           
  4720                           ;main.c: 68:             memset(Num_Char,((void*)0),3);
  4721  014D  3000               	movlw	0
  4722  014E  0020               	movlb	0	; select bank0
  4723  014F  00A0               	movwf	memset@c
  4724  0150  00A1               	movwf	memset@c+1
  4725  0151  3003               	movlw	3
  4726  0152  00A2               	movwf	memset@n
  4727  0153  3000               	movlw	0
  4728  0154  00A3               	movwf	memset@n+1
  4729  0155  30D5               	movlw	(low (_Num_Char| 0))& (0+255)
  4730  0156  318E  26B2  3180   	fcall	_memset
  4731  0159                     l7279:	
  4732                           
  4733                           ;main.c: 69:             ReadyReceiveBuffer();
  4734  0159  3192  2280  3180   	fcall	_ReadyReceiveBuffer
  4735  015C                     l7281:	
  4736                           
  4737                           ;main.c: 71:         if(update_state_flag == 1)
  4738  015C  0021               	movlb	1	; select bank1
  4739  015D  0348               	decf	_update_state_flag^(0+128),w
  4740  015E  1D03               	btfss	3,2
  4741  015F  2961               	goto	u6961
  4742  0160  2962               	goto	u6960
  4743  0161                     u6961:	
  4744  0161  2966               	goto	l7287
  4745  0162                     u6960:	
  4746  0162                     l7283:	
  4747                           
  4748                           ;main.c: 72:         {;main.c: 73:             update_state_flag = 0;
  4749  0162  01C8               	clrf	_update_state_flag^(0+128)
  4750  0163                     l7285:	
  4751                           
  4752                           ;main.c: 74:             update_state();
  4753  0163  3190  20B2  3180   	fcall	_update_state
  4754  0166                     l7287:	
  4755                           
  4756                           ;main.c: 77:         if(MTOUCH_Service_Mainloop())
  4757  0166  3194  2462  3180   	fcall	_MTOUCH_Service_Mainloop
  4758  0169  3A00               	xorlw	0
  4759  016A  1903               	skipnz
  4760  016B  296D               	goto	u6971
  4761  016C  296E               	goto	u6970
  4762  016D                     u6971:	
  4763  016D  28C3               	goto	l7249
  4764  016E                     u6970:	
  4765  016E                     l7289:	
  4766                           
  4767                           ;main.c: 78:         {;main.c: 79:             if(config_status == 0)
  4768  016E  0873               	movf	_config_status,w
  4769  016F  1D03               	btfss	3,2
  4770  0170  2972               	goto	u6981
  4771  0171  2973               	goto	u6980
  4772  0172                     u6981:	
  4773  0172  29B4               	goto	l7315
  4774  0173                     u6980:	
  4775  0173                     l7291:	
  4776                           
  4777                           ;main.c: 80:             {;main.c: 81:                 if(check_request == 1)
  4778  0173  0020               	movlb	0	; select bank0
  4779  0174  0363               	decf	_check_request,w
  4780  0175  1D03               	btfss	3,2
  4781  0176  2978               	goto	u6991
  4782  0177  2979               	goto	u6990
  4783  0178                     u6991:	
  4784  0178  2989               	goto	l7299
  4785  0179                     u6990:	
  4786  0179                     l7293:	
  4787                           
  4788                           ;main.c: 82:                 {;main.c: 83:                     timeout_count++;
  4789  0179  3001               	movlw	1
  4790  017A  0021               	movlb	1	; select bank1
  4791  017B  07C0               	addwf	_timeout_count^(0+128),f
  4792  017C  3000               	movlw	0
  4793  017D  3DC1               	addwfc	(_timeout_count+1)^(0+128),f
  4794  017E                     l7295:	
  4795                           
  4796                           ;main.c: 84:                     if(timeout_count == 20)
  4797  017E  3014               	movlw	20
  4798  017F  0640               	xorwf	_timeout_count^(0+128),w
  4799  0180  0441               	iorwf	(_timeout_count+1)^(0+128),w
  4800  0181  1D03               	btfss	3,2
  4801  0182  2984               	goto	u7001
  4802  0183  2985               	goto	u7000
  4803  0184                     u7001:	
  4804  0184  2989               	goto	l7299
  4805  0185                     u7000:	
  4806  0185                     l7297:	
  4807                           
  4808                           ;main.c: 85:                     {;main.c: 86:                         timeout_count = 0
      +                          ;
  4809  0185  01C0               	clrf	_timeout_count^(0+128)
  4810  0186  01C1               	clrf	(_timeout_count+1)^(0+128)
  4811                           
  4812                           ;main.c: 87:                         check_request = 0;
  4813  0187  0020               	movlb	0	; select bank0
  4814  0188  01E3               	clrf	_check_request
  4815  0189                     l7299:	
  4816                           
  4817                           ;main.c: 90:                 if(MTOUCH_Button_isPressed(1) == 1&& last_touch_status.CS1 
      +                          == 0)
  4818  0189  3001               	movlw	1
  4819  018A  3194  24BE  3180   	fcall	_MTOUCH_Button_isPressed
  4820  018D  3A01               	xorlw	1
  4821  018E  1D03               	skipz
  4822  018F  2991               	goto	u7011
  4823  0190  2992               	goto	u7010
  4824  0191                     u7011:	
  4825  0191  29B0               	goto	l7313
  4826  0192                     u7010:	
  4827  0192                     l7301:	
  4828  0192  18F0               	btfsc	_last_touch_status,1
  4829  0193  2995               	goto	u7021
  4830  0194  2996               	goto	u7020
  4831  0195                     u7021:	
  4832  0195  29B0               	goto	l7313
  4833  0196                     u7020:	
  4834  0196                     l7303:	
  4835                           
  4836                           ;main.c: 91:                 {;main.c: 92:                     count_conf++;
  4837  0196  3001               	movlw	1
  4838  0197  0021               	movlb	1	; select bank1
  4839  0198  07C2               	addwf	_count_conf^(0+128),f
  4840  0199  3000               	movlw	0
  4841  019A  3DC3               	addwfc	(_count_conf+1)^(0+128),f
  4842  019B                     l7305:	
  4843                           
  4844                           ;main.c: 94:                     if(count_conf == 1000)
  4845  019B  30E8               	movlw	232
  4846  019C  0642               	xorwf	_count_conf^(0+128),w
  4847  019D  3003               	movlw	3
  4848  019E  1903               	skipnz
  4849  019F  0643               	xorwf	(_count_conf+1)^(0+128),w
  4850  01A0  1D03               	btfss	3,2
  4851  01A1  29A3               	goto	u7031
  4852  01A2  29A4               	goto	u7030
  4853  01A3                     u7031:	
  4854  01A3  29FF               	goto	l7345
  4855  01A4                     u7030:	
  4856  01A4                     l7307:	
  4857                           
  4858                           ;main.c: 95:                     {;main.c: 96:                         count_conf = 0;
  4859  01A4  01C2               	clrf	_count_conf^(0+128)
  4860  01A5  01C3               	clrf	(_count_conf+1)^(0+128)
  4861  01A6                     l7309:	
  4862                           
  4863                           ;main.c: 98:                         config_status = 1;
  4864  01A6  01F3               	clrf	_config_status
  4865  01A7  0AF3               	incf	_config_status,f
  4866  01A8                     l7311:	
  4867                           
  4868                           ;main.c: 99:                         check_request = 1;
  4869  01A8  0020               	movlb	0	; select bank0
  4870  01A9  01E3               	clrf	_check_request
  4871  01AA  0AE3               	incf	_check_request,f
  4872                           
  4873                           ;main.c: 100:                         timeout_count = 0;
  4874  01AB  0021               	movlb	1	; select bank1
  4875  01AC  01C0               	clrf	_timeout_count^(0+128)
  4876  01AD  01C1               	clrf	(_timeout_count+1)^(0+128)
  4877                           
  4878                           ;main.c: 102:                         blink = 0;
  4879  01AE  01F2               	clrf	_blink
  4880  01AF  29FF               	goto	l7345
  4881  01B0                     l7313:	
  4882                           
  4883                           ;main.c: 106:                 {;main.c: 107:                     count_conf = 0;
  4884  01B0  0021               	movlb	1	; select bank1
  4885  01B1  01C2               	clrf	_count_conf^(0+128)
  4886  01B2  01C3               	clrf	(_count_conf+1)^(0+128)
  4887  01B3  29FF               	goto	l7345
  4888  01B4                     l7315:	
  4889                           
  4890                           ;main.c: 111:             {;main.c: 112:                 if(check_request == 1)
  4891  01B4  0020               	movlb	0	; select bank0
  4892  01B5  0363               	decf	_check_request,w
  4893  01B6  1D03               	btfss	3,2
  4894  01B7  29B9               	goto	u7041
  4895  01B8  29BA               	goto	u7040
  4896  01B9                     u7041:	
  4897  01B9  29DB               	goto	l7327
  4898  01BA                     u7040:	
  4899  01BA                     l7317:	
  4900                           
  4901                           ;main.c: 113:                 {;main.c: 114:                     timeout_count++;
  4902  01BA  3001               	movlw	1
  4903  01BB  0021               	movlb	1	; select bank1
  4904  01BC  07C0               	addwf	_timeout_count^(0+128),f
  4905  01BD  3000               	movlw	0
  4906  01BE  3DC1               	addwfc	(_timeout_count+1)^(0+128),f
  4907                           
  4908                           ;main.c: 115:                     if(timeout_count > 30000)
  4909  01BF  3075               	movlw	117
  4910  01C0  0241               	subwf	(_timeout_count+1)^(0+128),w
  4911  01C1  3031               	movlw	49
  4912  01C2  1903               	skipnz
  4913  01C3  0240               	subwf	_timeout_count^(0+128),w
  4914  01C4  1C03               	skipc
  4915  01C5  29C7               	goto	u7051
  4916  01C6  29C8               	goto	u7050
  4917  01C7                     u7051:	
  4918  01C7  29DB               	goto	l7327
  4919  01C8                     u7050:	
  4920  01C8                     l7319:	
  4921                           
  4922                           ;main.c: 116:                     {;main.c: 119:                         timeout_count++
      +                          ;
  4923  01C8  3001               	movlw	1
  4924  01C9  07C0               	addwf	_timeout_count^(0+128),f
  4925  01CA  3000               	movlw	0
  4926  01CB  3DC1               	addwfc	(_timeout_count+1)^(0+128),f
  4927  01CC                     l7321:	
  4928                           
  4929                           ;main.c: 120:                         if(timeout_count == 32000)
  4930  01CC  307D               	movlw	125
  4931  01CD  0641               	xorwf	(_timeout_count+1)^(0+128),w
  4932  01CE  0440               	iorwf	_timeout_count^(0+128),w
  4933  01CF  1D03               	btfss	3,2
  4934  01D0  29D2               	goto	u7061
  4935  01D1  29D3               	goto	u7060
  4936  01D2                     u7061:	
  4937  01D2  29DB               	goto	l7327
  4938  01D3                     u7060:	
  4939  01D3                     l7323:	
  4940                           
  4941                           ;main.c: 121:                         {;main.c: 122:                             timeout
      +                          _count = 0;
  4942  01D3  01C0               	clrf	_timeout_count^(0+128)
  4943  01D4  01C1               	clrf	(_timeout_count+1)^(0+128)
  4944                           
  4945                           ;main.c: 124:                             check_request = 0;
  4946  01D5  0020               	movlb	0	; select bank0
  4947  01D6  01E3               	clrf	_check_request
  4948                           
  4949                           ;main.c: 125:                             config_status = 0;
  4950  01D7  01F3               	clrf	_config_status
  4951  01D8                     l7325:	
  4952                           
  4953                           ;main.c: 126:                             MTOUCH_Button_InitializeAll();
  4954  01D8  3194  24DD  3180   	fcall	_MTOUCH_Button_InitializeAll
  4955  01DB                     l7327:	
  4956                           
  4957                           ;main.c: 131:                 blink_count++;
  4958  01DB  3001               	movlw	1
  4959  01DC  0020               	movlb	0	; select bank0
  4960  01DD  00D4               	movwf	??_main
  4961  01DE  0854               	movf	??_main,w
  4962  01DF  07E2               	addwf	_blink_count,f
  4963  01E0                     l7329:	
  4964                           
  4965                           ;main.c: 132:                 if(blink == 0)
  4966  01E0  0872               	movf	_blink,w
  4967  01E1  1D03               	btfss	3,2
  4968  01E2  29E4               	goto	u7071
  4969  01E3  29E5               	goto	u7070
  4970  01E4                     u7071:	
  4971  01E4  29F3               	goto	l7339
  4972  01E5                     u7070:	
  4973  01E5                     l7331:	
  4974                           
  4975                           ;main.c: 133:                 {;main.c: 134:                     ALL_ON();
  4976  01E5  3190  20E6  3180   	fcall	_ALL_ON
  4977  01E8                     l7333:	
  4978                           
  4979                           ;main.c: 135:                     if(blink_count == 200)
  4980  01E8  30C8               	movlw	200
  4981  01E9  0020               	movlb	0	; select bank0
  4982  01EA  0662               	xorwf	_blink_count,w
  4983  01EB  1D03               	btfss	3,2
  4984  01EC  29EE               	goto	u7081
  4985  01ED  29EF               	goto	u7080
  4986  01EE                     u7081:	
  4987  01EE  29FF               	goto	l7345
  4988  01EF                     u7080:	
  4989  01EF                     l7335:	
  4990                           
  4991                           ;main.c: 136:                     {;main.c: 137:                         blink_count = 0
      +                          ;
  4992  01EF  01E2               	clrf	_blink_count
  4993  01F0                     l7337:	
  4994                           
  4995                           ;main.c: 138:                         blink = 1;
  4996  01F0  01F2               	clrf	_blink
  4997  01F1  0AF2               	incf	_blink,f
  4998  01F2  29FF               	goto	l7345
  4999  01F3                     l7339:	
  5000                           
  5001                           ;main.c: 142:                 {;main.c: 143:                     ALL_OFF();
  5002  01F3  3190  20D5  3180   	fcall	_ALL_OFF
  5003  01F6                     l7341:	
  5004                           
  5005                           ;main.c: 144:                     if(blink_count == 200)
  5006  01F6  30C8               	movlw	200
  5007  01F7  0020               	movlb	0	; select bank0
  5008  01F8  0662               	xorwf	_blink_count,w
  5009  01F9  1D03               	btfss	3,2
  5010  01FA  29FC               	goto	u7091
  5011  01FB  29FD               	goto	u7090
  5012  01FC                     u7091:	
  5013  01FC  29FF               	goto	l7345
  5014  01FD                     u7090:	
  5015  01FD                     l7343:	
  5016                           
  5017                           ;main.c: 145:                     {;main.c: 146:                         blink_count = 0
      +                          ;
  5018  01FD  01E2               	clrf	_blink_count
  5019                           
  5020                           ;main.c: 147:                         blink = 0;
  5021  01FE  01F2               	clrf	_blink
  5022  01FF                     l7345:	
  5023                           
  5024                           ;main.c: 152:             if(counter_ON_OFF == 2)
  5025  01FF  3002               	movlw	2
  5026  0200  0020               	movlb	0	; select bank0
  5027  0201  0669               	xorwf	_counter_ON_OFF,w
  5028  0202  1D03               	btfss	3,2
  5029  0203  2A05               	goto	u7101
  5030  0204  2A06               	goto	u7100
  5031  0205                     u7101:	
  5032  0205  2A30               	goto	l7373
  5033  0206                     u7100:	
  5034  0206                     l7347:	
  5035                           
  5036                           ;main.c: 153:             {;main.c: 154:                 counter_ON_OFF = 0;
  5037  0206  01E9               	clrf	_counter_ON_OFF
  5038                           
  5039                           ;main.c: 155:                 counter_1s = 0;
  5040  0207  01DB               	clrf	_counter_1s
  5041  0208  01DC               	clrf	_counter_1s+1
  5042  0209                     l7349:	
  5043                           
  5044                           ;main.c: 156:                 last_touch_status.full_status ^= 0b00000010;
  5045  0209  3002               	movlw	2
  5046  020A  06F0               	xorwf	_last_touch_status,f
  5047  020B  3000               	movlw	0
  5048  020C  06F1               	xorwf	_last_touch_status+1,f
  5049  020D                     l7351:	
  5050                           
  5051                           ;main.c: 157:                 if(last_touch_status.CS1)
  5052  020D  1CF0               	btfss	_last_touch_status,1
  5053  020E  2A10               	goto	u7111
  5054  020F  2A11               	goto	u7110
  5055  0210                     u7111:	
  5056  0210  2A28               	goto	l7365
  5057  0211                     u7110:	
  5058  0211                     l7353:	
  5059                           
  5060                           ;main.c: 158:                 {;main.c: 159:                     LED_ON();
  5061  0211  3190  20BE  3180   	fcall	_LED_ON
  5062  0214                     l7355:	
  5063                           
  5064                           ;main.c: 160:                     if(triac_level.last_level == 0)
  5065  0214  0020               	movlb	0	; select bank0
  5066  0215  0E59               	swapf	_triac_level,w
  5067  0216  390F               	andlw	15
  5068  0217  3A00               	xorlw	0
  5069  0218  1D03               	skipz
  5070  0219  2A1B               	goto	u7121
  5071  021A  2A1C               	goto	u7120
  5072  021B                     u7121:	
  5073  021B  2A1F               	goto	l7359
  5074  021C                     u7120:	
  5075  021C                     l7357:	
  5076                           
  5077                           ;main.c: 161:                     {;main.c: 162:                         LED_DOWN_ON();
  5078  021C  3190  20C1  3180   	fcall	_LED_DOWN_ON
  5079  021F                     l7359:	
  5080                           
  5081                           ;main.c: 164:                     turn_on = 1;
  5082  021F  0020               	movlb	0	; select bank0
  5083  0220  01E6               	clrf	_turn_on
  5084  0221  0AE6               	incf	_turn_on,f
  5085  0222                     l7361:	
  5086                           
  5087                           ;main.c: 165:                     turn_off = 0;
  5088  0222  01E7               	clrf	_turn_off
  5089  0223                     l7363:	
  5090                           
  5091                           ;main.c: 166:                     counter_led = 3;
  5092  0223  3003               	movlw	3
  5093  0224  00D4               	movwf	??_main
  5094  0225  0854               	movf	??_main,w
  5095  0226  00E1               	movwf	_counter_led
  5096                           
  5097                           ;main.c: 167:                 }
  5098  0227  2A30               	goto	l7373
  5099  0228                     l7365:	
  5100                           
  5101                           ;main.c: 169:                 {;main.c: 170:                     LED_OFF();
  5102  0228  3191  210C  3180   	fcall	_LED_OFF
  5103  022B                     l7367:	
  5104                           
  5105                           ;main.c: 171:                     turn_off = 1;
  5106  022B  0020               	movlb	0	; select bank0
  5107  022C  01E7               	clrf	_turn_off
  5108  022D  0AE7               	incf	_turn_off,f
  5109  022E                     l7369:	
  5110                           
  5111                           ;main.c: 172:                     turn_on = 0;
  5112  022E  01E6               	clrf	_turn_on
  5113  022F  2A23               	goto	l7363
  5114  0230                     l7373:	
  5115                           
  5116                           ;main.c: 176:             if(counter_ON_OFF == 1)
  5117  0230  0369               	decf	_counter_ON_OFF,w
  5118  0231  1D03               	btfss	3,2
  5119  0232  2A34               	goto	u7131
  5120  0233  2A35               	goto	u7130
  5121  0234                     u7131:	
  5122  0234  2A45               	goto	l7379
  5123  0235                     u7130:	
  5124  0235                     l7375:	
  5125                           
  5126                           ;main.c: 177:             {;main.c: 178:                 counter_1s++;
  5127  0235  3001               	movlw	1
  5128  0236  07DB               	addwf	_counter_1s,f
  5129  0237  3000               	movlw	0
  5130  0238  3DDC               	addwfc	_counter_1s+1,f
  5131                           
  5132                           ;main.c: 179:                 if(counter_1s >= 200)
  5133  0239  3000               	movlw	0
  5134  023A  025C               	subwf	_counter_1s+1,w
  5135  023B  30C8               	movlw	200
  5136  023C  1903               	skipnz
  5137  023D  025B               	subwf	_counter_1s,w
  5138  023E  1C03               	skipc
  5139  023F  2A41               	goto	u7141
  5140  0240  2A42               	goto	u7140
  5141  0241                     u7141:	
  5142  0241  2A45               	goto	l7379
  5143  0242                     u7140:	
  5144  0242                     l7377:	
  5145                           
  5146                           ;main.c: 180:                 {;main.c: 181:                     counter_1s = 0;
  5147  0242  01DB               	clrf	_counter_1s
  5148  0243  01DC               	clrf	_counter_1s+1
  5149                           
  5150                           ;main.c: 182:                     counter_ON_OFF = 0;
  5151  0244  01E9               	clrf	_counter_ON_OFF
  5152  0245                     l7379:	
  5153                           
  5154                           ;main.c: 185:             if(last_touch_status.CS1 == 1)
  5155  0245  1CF0               	btfss	_last_touch_status,1
  5156  0246  2A48               	goto	u7151
  5157  0247  2A49               	goto	u7150
  5158  0248                     u7151:	
  5159  0248  2AA6               	goto	l7405
  5160  0249                     u7150:	
  5161  0249                     l7381:	
  5162                           
  5163                           ;main.c: 186:             {;main.c: 187:                 if(MTOUCH_Button_Buttonmask_Get
      +                          () == 1 && triac_level.full!=0xEE)
  5164  0249  3195  25A1  3180   	fcall	_MTOUCH_Button_Buttonmask_Get
  5165  024C  3A01               	xorlw	1
  5166  024D  1D03               	skipz
  5167  024E  2A50               	goto	u7161
  5168  024F  2A51               	goto	u7160
  5169  0250                     u7161:	
  5170  0250  2A7A               	goto	l7393
  5171  0251                     u7160:	
  5172  0251                     l7383:	
  5173  0251  30EE               	movlw	238
  5174  0252  0020               	movlb	0	; select bank0
  5175  0253  0659               	xorwf	_triac_level,w
  5176  0254  045A               	iorwf	_triac_level+1,w
  5177  0255  1903               	btfsc	3,2
  5178  0256  2A58               	goto	u7171
  5179  0257  2A59               	goto	u7170
  5180  0258                     u7171:	
  5181  0258  2A7A               	goto	l7393
  5182  0259                     u7170:	
  5183  0259                     l7385:	
  5184                           
  5185                           ;main.c: 188:                 {;main.c: 189:                     counter_PRESS++;
  5186  0259  3001               	movlw	1
  5187  025A  00D4               	movwf	??_main
  5188  025B  0854               	movf	??_main,w
  5189  025C  07E8               	addwf	_counter_PRESS,f
  5190                           
  5191                           ;main.c: 190:                     if(counter_PRESS == 50)
  5192  025D  3032               	movlw	50
  5193  025E  0668               	xorwf	_counter_PRESS,w
  5194  025F  1D03               	btfss	3,2
  5195  0260  2A62               	goto	u7181
  5196  0261  2A63               	goto	u7180
  5197  0262                     u7181:	
  5198  0262  2AA6               	goto	l7405
  5199  0263                     u7180:	
  5200  0263                     l7387:	
  5201                           
  5202                           ;main.c: 191:                     {;main.c: 192:                             triac_level
      +                          .level++;
  5203  0263  0859               	movf	_triac_level,w
  5204  0264  390F               	andlw	15
  5205  0265  00D4               	movwf	??_main
  5206  0266  0AD4               	incf	??_main,f
  5207  0267  0859               	movf	_triac_level,w
  5208  0268  0654               	xorwf	??_main,w
  5209  0269  39F0               	andlw	-16
  5210  026A  0654               	xorwf	??_main,w
  5211  026B  00D9               	movwf	_triac_level
  5212                           
  5213                           ;main.c: 193:                             triac_level.last_level = triac_level.level;
  5214  026C  0859               	movf	_triac_level,w
  5215  026D  390F               	andlw	15
  5216  026E  00D4               	movwf	??_main
  5217  026F  0ED4               	swapf	??_main,f
  5218  0270  0859               	movf	_triac_level,w
  5219  0271  0654               	xorwf	??_main,w
  5220  0272  390F               	andlw	-241
  5221  0273  0654               	xorwf	??_main,w
  5222  0274  00D9               	movwf	_triac_level
  5223  0275                     l7389:	
  5224                           
  5225                           ;main.c: 194:                             counter_PRESS = 0;
  5226  0275  01E8               	clrf	_counter_PRESS
  5227  0276                     l7391:	
  5228                           
  5229                           ;main.c: 195:                             update_state_flag = 1;
  5230  0276  0021               	movlb	1	; select bank1
  5231  0277  01C8               	clrf	_update_state_flag^(0+128)
  5232  0278  0AC8               	incf	_update_state_flag^(0+128),f
  5233  0279  2AA6               	goto	l7405
  5234  027A                     l7393:	
  5235  027A  3195  25A1  3180   	fcall	_MTOUCH_Button_Buttonmask_Get
  5236  027D  3A04               	xorlw	4
  5237  027E  1D03               	skipz
  5238  027F  2A81               	goto	u7191
  5239  0280  2A82               	goto	u7190
  5240  0281                     u7191:	
  5241  0281  2AA6               	goto	l7405
  5242  0282                     u7190:	
  5243  0282                     l7395:	
  5244  0282  0020               	movlb	0	; select bank0
  5245  0283  0859               	movf	_triac_level,w
  5246  0284  045A               	iorwf	_triac_level+1,w
  5247  0285  1903               	btfsc	3,2
  5248  0286  2A88               	goto	u7201
  5249  0287  2A89               	goto	u7200
  5250  0288                     u7201:	
  5251  0288  2AA6               	goto	l7405
  5252  0289                     u7200:	
  5253  0289                     l7397:	
  5254                           
  5255                           ;main.c: 200:                 {;main.c: 201:                     counter_PRESS++;
  5256  0289  3001               	movlw	1
  5257  028A  00D4               	movwf	??_main
  5258  028B  0854               	movf	??_main,w
  5259  028C  07E8               	addwf	_counter_PRESS,f
  5260                           
  5261                           ;main.c: 202:                     if(counter_PRESS == 50)
  5262  028D  3032               	movlw	50
  5263  028E  0668               	xorwf	_counter_PRESS,w
  5264  028F  1D03               	btfss	3,2
  5265  0290  2A92               	goto	u7211
  5266  0291  2A93               	goto	u7210
  5267  0292                     u7211:	
  5268  0292  2AA6               	goto	l1256
  5269  0293                     u7210:	
  5270  0293                     l7399:	
  5271                           
  5272                           ;main.c: 203:                     {;main.c: 204:                         triac_level.lev
      +                          el--;
  5273  0293  0859               	movf	_triac_level,w
  5274  0294  390F               	andlw	15
  5275  0295  00D4               	movwf	??_main
  5276  0296  03D4               	decf	??_main,f
  5277  0297  0859               	movf	_triac_level,w
  5278  0298  0654               	xorwf	??_main,w
  5279  0299  39F0               	andlw	-16
  5280  029A  0654               	xorwf	??_main,w
  5281  029B  00D9               	movwf	_triac_level
  5282                           
  5283                           ;main.c: 205:                         triac_level.last_level = triac_level.level;
  5284  029C  0859               	movf	_triac_level,w
  5285  029D  390F               	andlw	15
  5286  029E  00D4               	movwf	??_main
  5287  029F  0ED4               	swapf	??_main,f
  5288  02A0  0859               	movf	_triac_level,w
  5289  02A1  0654               	xorwf	??_main,w
  5290  02A2  390F               	andlw	-241
  5291  02A3  0654               	xorwf	??_main,w
  5292  02A4  00D9               	movwf	_triac_level
  5293  02A5  2A75               	goto	l7389
  5294  02A6                     l1256:	
  5295  02A6                     l7405:	
  5296                           
  5297                           ;main.c: 213:             if(turn_off == 1 && turn_on == 0 && turn_up == 0 && turn_down 
      +                          == 0)
  5298  02A6  0020               	movlb	0	; select bank0
  5299  02A7  0367               	decf	_turn_off,w
  5300  02A8  1D03               	btfss	3,2
  5301  02A9  2AAB               	goto	u7221
  5302  02AA  2AAC               	goto	u7220
  5303  02AB                     u7221:	
  5304  02AB  2B27               	goto	l7449
  5305  02AC                     u7220:	
  5306  02AC                     l7407:	
  5307  02AC  0866               	movf	_turn_on,w
  5308  02AD  1D03               	btfss	3,2
  5309  02AE  2AB0               	goto	u7231
  5310  02AF  2AB1               	goto	u7230
  5311  02B0                     u7231:	
  5312  02B0  2B27               	goto	l7449
  5313  02B1                     u7230:	
  5314  02B1                     l7409:	
  5315  02B1  0865               	movf	_turn_up,w
  5316  02B2  1D03               	btfss	3,2
  5317  02B3  2AB5               	goto	u7241
  5318  02B4  2AB6               	goto	u7240
  5319  02B5                     u7241:	
  5320  02B5  2B27               	goto	l7449
  5321  02B6                     u7240:	
  5322  02B6                     l7411:	
  5323  02B6  0864               	movf	_turn_down,w
  5324  02B7  1D03               	btfss	3,2
  5325  02B8  2ABA               	goto	u7251
  5326  02B9  2ABB               	goto	u7250
  5327  02BA                     u7251:	
  5328  02BA  2B27               	goto	l7449
  5329  02BB                     u7250:	
  5330  02BB                     l7413:	
  5331                           
  5332                           ;main.c: 214:             {;main.c: 215:                 counter_1s++;
  5333  02BB  3001               	movlw	1
  5334  02BC  07DB               	addwf	_counter_1s,f
  5335  02BD  3000               	movlw	0
  5336  02BE  3DDC               	addwfc	_counter_1s+1,f
  5337                           
  5338                           ;main.c: 216:                 if(counter_1s >= 30)
  5339  02BF  3000               	movlw	0
  5340  02C0  025C               	subwf	_counter_1s+1,w
  5341  02C1  301E               	movlw	30
  5342  02C2  1903               	skipnz
  5343  02C3  025B               	subwf	_counter_1s,w
  5344  02C4  1C03               	skipc
  5345  02C5  2AC7               	goto	u7261
  5346  02C6  2AC8               	goto	u7260
  5347  02C7                     u7261:	
  5348  02C7  2B19               	goto	l7443
  5349  02C8                     u7260:	
  5350  02C8                     l7415:	
  5351                           
  5352                           ;main.c: 217:                 {;main.c: 218:                     counter_1s = 0;
  5353  02C8  01DB               	clrf	_counter_1s
  5354  02C9  01DC               	clrf	_counter_1s+1
  5355  02CA                     l7417:	
  5356                           
  5357                           ;main.c: 219:                     triac_level.level--;
  5358  02CA  0859               	movf	_triac_level,w
  5359  02CB  390F               	andlw	15
  5360  02CC  00D4               	movwf	??_main
  5361  02CD  03D4               	decf	??_main,f
  5362  02CE  0859               	movf	_triac_level,w
  5363  02CF  0654               	xorwf	??_main,w
  5364  02D0  39F0               	andlw	-16
  5365  02D1  0654               	xorwf	??_main,w
  5366  02D2  00D9               	movwf	_triac_level
  5367  02D3                     l7419:	
  5368                           
  5369                           ;main.c: 220:                     if(counter_led < 0 || counter_led>=3)
  5370  02D3  3003               	movlw	3
  5371  02D4  0261               	subwf	_counter_led,w
  5372  02D5  1C03               	skipc
  5373  02D6  2AD8               	goto	u7271
  5374  02D7  2AD9               	goto	u7270
  5375  02D8                     u7271:	
  5376  02D8  2ADD               	goto	l7423
  5377  02D9                     u7270:	
  5378  02D9                     l7421:	
  5379                           
  5380                           ;main.c: 221:                     {;main.c: 222:                         counter_led = 3
      +                          ;
  5381  02D9  3003               	movlw	3
  5382  02DA  00D4               	movwf	??_main
  5383  02DB  0854               	movf	??_main,w
  5384  02DC  00E1               	movwf	_counter_led
  5385  02DD                     l7423:	
  5386                           
  5387                           ;main.c: 224:                     if( counter_led == 3)
  5388  02DD  3003               	movlw	3
  5389  02DE  0661               	xorwf	_counter_led,w
  5390  02DF  1D03               	btfss	3,2
  5391  02E0  2AE2               	goto	u7281
  5392  02E1  2AE3               	goto	u7280
  5393  02E2                     u7281:	
  5394  02E2  2AEB               	goto	l7427
  5395  02E3                     u7280:	
  5396  02E3                     l7425:	
  5397                           
  5398                           ;main.c: 225:                     {;main.c: 226:                         LED_RUN(1,1,1);
  5399  02E3  01A0               	clrf	LED_RUN@LED_2
  5400  02E4  0AA0               	incf	LED_RUN@LED_2,f
  5401  02E5  01A1               	clrf	LED_RUN@LED_3
  5402  02E6  0AA1               	incf	LED_RUN@LED_3,f
  5403  02E7  3001               	movlw	1
  5404  02E8  3195  25ED  3180   	fcall	_LED_RUN
  5405  02EB                     l7427:	
  5406                           
  5407                           ;main.c: 228:                     if(counter_led == 2)
  5408  02EB  3002               	movlw	2
  5409  02EC  0020               	movlb	0	; select bank0
  5410  02ED  0661               	xorwf	_counter_led,w
  5411  02EE  1D03               	btfss	3,2
  5412  02EF  2AF1               	goto	u7291
  5413  02F0  2AF2               	goto	u7290
  5414  02F1                     u7291:	
  5415  02F1  2AFA               	goto	l7431
  5416  02F2                     u7290:	
  5417  02F2                     l7429:	
  5418                           
  5419                           ;main.c: 229:                     {;main.c: 230:                         LED_RUN(0,1,1);
  5420  02F2  01A0               	clrf	LED_RUN@LED_2
  5421  02F3  0AA0               	incf	LED_RUN@LED_2,f
  5422  02F4  01A1               	clrf	LED_RUN@LED_3
  5423  02F5  0AA1               	incf	LED_RUN@LED_3,f
  5424  02F6  3000               	movlw	0
  5425  02F7  3195  25ED  3180   	fcall	_LED_RUN
  5426  02FA                     l7431:	
  5427                           
  5428                           ;main.c: 232:                     if(counter_led == 1)
  5429  02FA  0020               	movlb	0	; select bank0
  5430  02FB  0361               	decf	_counter_led,w
  5431  02FC  1D03               	btfss	3,2
  5432  02FD  2AFF               	goto	u7301
  5433  02FE  2B00               	goto	u7300
  5434  02FF                     u7301:	
  5435  02FF  2B07               	goto	l7435
  5436  0300                     u7300:	
  5437  0300                     l7433:	
  5438                           
  5439                           ;main.c: 233:                     {;main.c: 234:                         LED_RUN(0,0,1);
  5440  0300  01A0               	clrf	LED_RUN@LED_2
  5441  0301  01A1               	clrf	LED_RUN@LED_3
  5442  0302  0AA1               	incf	LED_RUN@LED_3,f
  5443  0303  3000               	movlw	0
  5444  0304  3195  25ED  3180   	fcall	_LED_RUN
  5445  0307                     l7435:	
  5446                           
  5447                           ;main.c: 236:                     if(counter_led == 0)
  5448  0307  0020               	movlb	0	; select bank0
  5449  0308  0861               	movf	_counter_led,w
  5450  0309  1D03               	btfss	3,2
  5451  030A  2B0C               	goto	u7311
  5452  030B  2B0D               	goto	u7310
  5453  030C                     u7311:	
  5454  030C  2B13               	goto	l7439
  5455  030D                     u7310:	
  5456  030D                     l7437:	
  5457                           
  5458                           ;main.c: 237:                     {;main.c: 238:                         LED_RUN(0,0,0);
  5459  030D  01A0               	clrf	LED_RUN@LED_2
  5460  030E  01A1               	clrf	LED_RUN@LED_3
  5461  030F  3000               	movlw	0
  5462  0310  3195  25ED  3180   	fcall	_LED_RUN
  5463  0313                     l7439:	
  5464                           
  5465                           ;main.c: 240:                     update_state_flag = 1;
  5466  0313  0021               	movlb	1	; select bank1
  5467  0314  01C8               	clrf	_update_state_flag^(0+128)
  5468  0315  0AC8               	incf	_update_state_flag^(0+128),f
  5469  0316                     l7441:	
  5470                           
  5471                           ;main.c: 241:                     counter_led--;
  5472  0316  3001               	movlw	1
  5473  0317  0020               	movlb	0	; select bank0
  5474  0318  02E1               	subwf	_counter_led,f
  5475  0319                     l7443:	
  5476                           
  5477                           ;main.c: 244:                 if(triac_level.level == 0)
  5478  0319  0859               	movf	_triac_level,w
  5479  031A  390F               	andlw	15
  5480  031B  3A00               	xorlw	0
  5481  031C  1D03               	skipz
  5482  031D  2B1F               	goto	u7321
  5483  031E  2B20               	goto	u7320
  5484  031F                     u7321:	
  5485  031F  2B27               	goto	l7449
  5486  0320                     u7320:	
  5487  0320                     l7445:	
  5488                           
  5489                           ;main.c: 245:                 {;main.c: 246:                     turn_off = 0;
  5490  0320  01E7               	clrf	_turn_off
  5491  0321                     l7447:	
  5492                           
  5493                           ;main.c: 247:                     LED_RUN(0,0,0);
  5494  0321  01A0               	clrf	LED_RUN@LED_2
  5495  0322  01A1               	clrf	LED_RUN@LED_3
  5496  0323  3000               	movlw	0
  5497  0324  3195  25ED  3180   	fcall	_LED_RUN
  5498  0327                     l7449:	
  5499                           
  5500                           ;main.c: 251:             if(turn_on == 1 &&turn_off == 0 && turn_up == 0 && turn_down =
      +                          = 0)
  5501  0327  0020               	movlb	0	; select bank0
  5502  0328  0366               	decf	_turn_on,w
  5503  0329  1D03               	btfss	3,2
  5504  032A  2B2C               	goto	u7331
  5505  032B  2B2D               	goto	u7330
  5506  032C                     u7331:	
  5507  032C  2BAB               	goto	l7493
  5508  032D                     u7330:	
  5509  032D                     l7451:	
  5510  032D  0867               	movf	_turn_off,w
  5511  032E  1D03               	btfss	3,2
  5512  032F  2B31               	goto	u7341
  5513  0330  2B32               	goto	u7340
  5514  0331                     u7341:	
  5515  0331  2BAB               	goto	l7493
  5516  0332                     u7340:	
  5517  0332                     l7453:	
  5518  0332  0865               	movf	_turn_up,w
  5519  0333  1D03               	btfss	3,2
  5520  0334  2B36               	goto	u7351
  5521  0335  2B37               	goto	u7350
  5522  0336                     u7351:	
  5523  0336  2BAB               	goto	l7493
  5524  0337                     u7350:	
  5525  0337                     l7455:	
  5526  0337  0864               	movf	_turn_down,w
  5527  0338  1D03               	btfss	3,2
  5528  0339  2B3B               	goto	u7361
  5529  033A  2B3C               	goto	u7360
  5530  033B                     u7361:	
  5531  033B  2BAB               	goto	l7493
  5532  033C                     u7360:	
  5533  033C                     l7457:	
  5534                           
  5535                           ;main.c: 252:             {;main.c: 253:                 counter_1s++;
  5536  033C  3001               	movlw	1
  5537  033D  07DB               	addwf	_counter_1s,f
  5538  033E  3000               	movlw	0
  5539  033F  3DDC               	addwfc	_counter_1s+1,f
  5540                           
  5541                           ;main.c: 254:                 if(counter_1s >= 30)
  5542  0340  3000               	movlw	0
  5543  0341  025C               	subwf	_counter_1s+1,w
  5544  0342  301E               	movlw	30
  5545  0343  1903               	skipnz
  5546  0344  025B               	subwf	_counter_1s,w
  5547  0345  1C03               	skipc
  5548  0346  2B48               	goto	u7371
  5549  0347  2B49               	goto	u7370
  5550  0348                     u7371:	
  5551  0348  2B99               	goto	l7487
  5552  0349                     u7370:	
  5553  0349                     l7459:	
  5554                           
  5555                           ;main.c: 255:                 {;main.c: 256:                     counter_1s = 0;
  5556  0349  01DB               	clrf	_counter_1s
  5557  034A  01DC               	clrf	_counter_1s+1
  5558  034B                     l7461:	
  5559                           
  5560                           ;main.c: 257:                     triac_level.level++;
  5561  034B  0859               	movf	_triac_level,w
  5562  034C  390F               	andlw	15
  5563  034D  00D4               	movwf	??_main
  5564  034E  0AD4               	incf	??_main,f
  5565  034F  0859               	movf	_triac_level,w
  5566  0350  0654               	xorwf	??_main,w
  5567  0351  39F0               	andlw	-16
  5568  0352  0654               	xorwf	??_main,w
  5569  0353  00D9               	movwf	_triac_level
  5570  0354                     l7463:	
  5571                           
  5572                           ;main.c: 258:                     if(counter_led < 0 || counter_led>=4)
  5573  0354  3004               	movlw	4
  5574  0355  0261               	subwf	_counter_led,w
  5575  0356  1C03               	skipc
  5576  0357  2B59               	goto	u7381
  5577  0358  2B5A               	goto	u7380
  5578  0359                     u7381:	
  5579  0359  2B5B               	goto	l7467
  5580  035A                     u7380:	
  5581  035A                     l7465:	
  5582                           
  5583                           ;main.c: 259:                     {;main.c: 260:                         counter_led = 0
      +                          ;
  5584  035A  01E1               	clrf	_counter_led
  5585  035B                     l7467:	
  5586                           
  5587                           ;main.c: 262:                     if( counter_led == 3)
  5588  035B  3003               	movlw	3
  5589  035C  0661               	xorwf	_counter_led,w
  5590  035D  1D03               	btfss	3,2
  5591  035E  2B60               	goto	u7391
  5592  035F  2B61               	goto	u7390
  5593  0360                     u7391:	
  5594  0360  2B69               	goto	l7471
  5595  0361                     u7390:	
  5596  0361                     l7469:	
  5597                           
  5598                           ;main.c: 263:                     {;main.c: 264:                         LED_RUN(1,1,1);
  5599  0361  01A0               	clrf	LED_RUN@LED_2
  5600  0362  0AA0               	incf	LED_RUN@LED_2,f
  5601  0363  01A1               	clrf	LED_RUN@LED_3
  5602  0364  0AA1               	incf	LED_RUN@LED_3,f
  5603  0365  3001               	movlw	1
  5604  0366  3195  25ED  3180   	fcall	_LED_RUN
  5605  0369                     l7471:	
  5606                           
  5607                           ;main.c: 266:                     if(counter_led == 2)
  5608  0369  3002               	movlw	2
  5609  036A  0020               	movlb	0	; select bank0
  5610  036B  0661               	xorwf	_counter_led,w
  5611  036C  1D03               	btfss	3,2
  5612  036D  2B6F               	goto	u7401
  5613  036E  2B70               	goto	u7400
  5614  036F                     u7401:	
  5615  036F  2B78               	goto	l7475
  5616  0370                     u7400:	
  5617  0370                     l7473:	
  5618                           
  5619                           ;main.c: 267:                     {;main.c: 268:                         LED_RUN(0,1,1);
  5620  0370  01A0               	clrf	LED_RUN@LED_2
  5621  0371  0AA0               	incf	LED_RUN@LED_2,f
  5622  0372  01A1               	clrf	LED_RUN@LED_3
  5623  0373  0AA1               	incf	LED_RUN@LED_3,f
  5624  0374  3000               	movlw	0
  5625  0375  3195  25ED  3180   	fcall	_LED_RUN
  5626  0378                     l7475:	
  5627                           
  5628                           ;main.c: 270:                     if(counter_led == 1)
  5629  0378  0020               	movlb	0	; select bank0
  5630  0379  0361               	decf	_counter_led,w
  5631  037A  1D03               	btfss	3,2
  5632  037B  2B7D               	goto	u7411
  5633  037C  2B7E               	goto	u7410
  5634  037D                     u7411:	
  5635  037D  2B85               	goto	l7479
  5636  037E                     u7410:	
  5637  037E                     l7477:	
  5638                           
  5639                           ;main.c: 271:                     {;main.c: 272:                         LED_RUN(0,0,1);
  5640  037E  01A0               	clrf	LED_RUN@LED_2
  5641  037F  01A1               	clrf	LED_RUN@LED_3
  5642  0380  0AA1               	incf	LED_RUN@LED_3,f
  5643  0381  3000               	movlw	0
  5644  0382  3195  25ED  3180   	fcall	_LED_RUN
  5645  0385                     l7479:	
  5646                           
  5647                           ;main.c: 274:                     if(counter_led == 0)
  5648  0385  0020               	movlb	0	; select bank0
  5649  0386  0861               	movf	_counter_led,w
  5650  0387  1D03               	btfss	3,2
  5651  0388  2B8A               	goto	u7421
  5652  0389  2B8B               	goto	u7420
  5653  038A                     u7421:	
  5654  038A  2B91               	goto	l7483
  5655  038B                     u7420:	
  5656  038B                     l7481:	
  5657                           
  5658                           ;main.c: 275:                     {;main.c: 276:                         LED_RUN(0,0,0);
  5659  038B  01A0               	clrf	LED_RUN@LED_2
  5660  038C  01A1               	clrf	LED_RUN@LED_3
  5661  038D  3000               	movlw	0
  5662  038E  3195  25ED  3180   	fcall	_LED_RUN
  5663  0391                     l7483:	
  5664                           
  5665                           ;main.c: 278:                     update_state_flag = 1;
  5666  0391  0021               	movlb	1	; select bank1
  5667  0392  01C8               	clrf	_update_state_flag^(0+128)
  5668  0393  0AC8               	incf	_update_state_flag^(0+128),f
  5669  0394                     l7485:	
  5670                           
  5671                           ;main.c: 279:                     counter_led++;
  5672  0394  3001               	movlw	1
  5673  0395  0020               	movlb	0	; select bank0
  5674  0396  00D4               	movwf	??_main
  5675  0397  0854               	movf	??_main,w
  5676  0398  07E1               	addwf	_counter_led,f
  5677  0399                     l7487:	
  5678                           
  5679                           ;main.c: 281:                 if(triac_level.level == triac_level.last_level)
  5680  0399  0E59               	swapf	_triac_level,w
  5681  039A  390F               	andlw	15
  5682  039B  00D4               	movwf	??_main
  5683  039C  0859               	movf	_triac_level,w
  5684  039D  390F               	andlw	15
  5685  039E  0654               	xorwf	??_main,w
  5686  039F  1D03               	skipz
  5687  03A0  2BA2               	goto	u7431
  5688  03A1  2BA3               	goto	u7430
  5689  03A2                     u7431:	
  5690  03A2  2BAB               	goto	l7493
  5691  03A3                     u7430:	
  5692  03A3                     l7489:	
  5693                           
  5694                           ;main.c: 282:                 {;main.c: 283:                     turn_on = 0;
  5695  03A3  01E6               	clrf	_turn_on
  5696  03A4                     l7491:	
  5697                           
  5698                           ;main.c: 284:                     LED_RUN(0,1,0);
  5699  03A4  01A0               	clrf	LED_RUN@LED_2
  5700  03A5  0AA0               	incf	LED_RUN@LED_2,f
  5701  03A6  01A1               	clrf	LED_RUN@LED_3
  5702  03A7  3000               	movlw	0
  5703  03A8  3195  25ED  3180   	fcall	_LED_RUN
  5704  03AB                     l7493:	
  5705                           
  5706                           ;main.c: 287:             if(turn_off == 0 && turn_on == 0 && turn_up == 1 && turn_down 
      +                          == 0)
  5707  03AB  0020               	movlb	0	; select bank0
  5708  03AC  0867               	movf	_turn_off,w
  5709  03AD  1D03               	btfss	3,2
  5710  03AE  2BB0               	goto	u7441
  5711  03AF  2BB1               	goto	u7440
  5712  03B0                     u7441:	
  5713  03B0  2BF7               	goto	l7515
  5714  03B1                     u7440:	
  5715  03B1                     l7495:	
  5716  03B1  0866               	movf	_turn_on,w
  5717  03B2  1D03               	btfss	3,2
  5718  03B3  2BB5               	goto	u7451
  5719  03B4  2BB6               	goto	u7450
  5720  03B5                     u7451:	
  5721  03B5  2BF7               	goto	l7515
  5722  03B6                     u7450:	
  5723  03B6                     l7497:	
  5724  03B6  0365               	decf	_turn_up,w
  5725  03B7  1D03               	btfss	3,2
  5726  03B8  2BBA               	goto	u7461
  5727  03B9  2BBB               	goto	u7460
  5728  03BA                     u7461:	
  5729  03BA  2BF7               	goto	l7515
  5730  03BB                     u7460:	
  5731  03BB                     l7499:	
  5732  03BB  0864               	movf	_turn_down,w
  5733  03BC  1D03               	btfss	3,2
  5734  03BD  2BBF               	goto	u7471
  5735  03BE  2BC0               	goto	u7470
  5736  03BF                     u7471:	
  5737  03BF  2BF7               	goto	l7515
  5738  03C0                     u7470:	
  5739  03C0                     l7501:	
  5740                           
  5741                           ;main.c: 288:             {;main.c: 289:                 counter_1s++;
  5742  03C0  3001               	movlw	1
  5743  03C1  07DB               	addwf	_counter_1s,f
  5744  03C2  3000               	movlw	0
  5745  03C3  3DDC               	addwfc	_counter_1s+1,f
  5746                           
  5747                           ;main.c: 290:                 if(counter_1s >= 30)
  5748  03C4  3000               	movlw	0
  5749  03C5  025C               	subwf	_counter_1s+1,w
  5750  03C6  301E               	movlw	30
  5751  03C7  1903               	skipnz
  5752  03C8  025B               	subwf	_counter_1s,w
  5753  03C9  1C03               	skipc
  5754  03CA  2BCC               	goto	u7481
  5755  03CB  2BCD               	goto	u7480
  5756  03CC                     u7481:	
  5757  03CC  2BE1               	goto	l7509
  5758  03CD                     u7480:	
  5759  03CD                     l7503:	
  5760                           
  5761                           ;main.c: 291:                 {;main.c: 292:                     counter_1s = 0;
  5762  03CD  01DB               	clrf	_counter_1s
  5763  03CE  01DC               	clrf	_counter_1s+1
  5764  03CF                     l7505:	
  5765                           
  5766                           ;main.c: 293:                     triac_level.level++;
  5767  03CF  0859               	movf	_triac_level,w
  5768  03D0  390F               	andlw	15
  5769  03D1  00D4               	movwf	??_main
  5770  03D2  0AD4               	incf	??_main,f
  5771  03D3  0859               	movf	_triac_level,w
  5772  03D4  0654               	xorwf	??_main,w
  5773  03D5  39F0               	andlw	-16
  5774  03D6  0654               	xorwf	??_main,w
  5775  03D7  00D9               	movwf	_triac_level
  5776  03D8                     l7507:	
  5777                           
  5778                           ;main.c: 294:                     triac_level.last_level = triac_level.level;
  5779  03D8  0859               	movf	_triac_level,w
  5780  03D9  390F               	andlw	15
  5781  03DA  00D4               	movwf	??_main
  5782  03DB  0ED4               	swapf	??_main,f
  5783  03DC  0859               	movf	_triac_level,w
  5784  03DD  0654               	xorwf	??_main,w
  5785  03DE  390F               	andlw	-241
  5786  03DF  0654               	xorwf	??_main,w
  5787  03E0  00D9               	movwf	_triac_level
  5788  03E1                     l7509:	
  5789                           
  5790                           ;main.c: 296:                 if(triac_level.level == rc_level.level)
  5791  03E1  0021               	movlb	1	; select bank1
  5792  03E2  083C               	movf	_rc_level^(0+128),w
  5793  03E3  390F               	andlw	15
  5794  03E4  0020               	movlb	0	; select bank0
  5795  03E5  00D4               	movwf	??_main
  5796  03E6  0859               	movf	_triac_level,w
  5797  03E7  390F               	andlw	15
  5798  03E8  0654               	xorwf	??_main,w
  5799  03E9  1D03               	skipz
  5800  03EA  2BEC               	goto	u7491
  5801  03EB  2BED               	goto	u7490
  5802  03EC                     u7491:	
  5803  03EC  2BF7               	goto	l7515
  5804  03ED                     u7490:	
  5805  03ED                     l7511:	
  5806                           
  5807                           ;main.c: 297:                 {;main.c: 298:                     triac_level.last_level 
      +                          = triac_level.level;
  5808  03ED  0859               	movf	_triac_level,w
  5809  03EE  390F               	andlw	15
  5810  03EF  00D4               	movwf	??_main
  5811  03F0  0ED4               	swapf	??_main,f
  5812  03F1  0859               	movf	_triac_level,w
  5813  03F2  0654               	xorwf	??_main,w
  5814  03F3  390F               	andlw	-241
  5815  03F4  0654               	xorwf	??_main,w
  5816  03F5  00D9               	movwf	_triac_level
  5817  03F6                     l7513:	
  5818                           
  5819                           ;main.c: 299:                     turn_up = 0;
  5820  03F6  01E5               	clrf	_turn_up
  5821  03F7                     l7515:	
  5822                           
  5823                           ;main.c: 302:             if(turn_off == 0 && turn_on == 0 && turn_up == 0 && turn_down 
      +                          == 1)
  5824  03F7  0867               	movf	_turn_off,w
  5825  03F8  1D03               	btfss	3,2
  5826  03F9  2BFB               	goto	u7501
  5827  03FA  2BFC               	goto	u7500
  5828  03FB                     u7501:	
  5829  03FB  28C3               	goto	l7249
  5830  03FC                     u7500:	
  5831  03FC                     l7517:	
  5832  03FC  0866               	movf	_turn_on,w
  5833  03FD  1D03               	btfss	3,2
  5834  03FE  2C00               	goto	u7511
  5835  03FF  2C01               	goto	u7510
  5836  0400                     u7511:	
  5837  0400  28C3               	goto	l7249
  5838  0401                     u7510:	
  5839  0401                     l7519:	
  5840  0401  0865               	movf	_turn_up,w
  5841  0402  1D03               	btfss	3,2
  5842  0403  2C05               	goto	u7521
  5843  0404  2C06               	goto	u7520
  5844  0405                     u7521:	
  5845  0405  28C3               	goto	l7249
  5846  0406                     u7520:	
  5847  0406                     l7521:	
  5848  0406  0364               	decf	_turn_down,w
  5849  0407  1D03               	btfss	3,2
  5850  0408  2C0A               	goto	u7531
  5851  0409  2C0B               	goto	u7530
  5852  040A                     u7531:	
  5853  040A  28C3               	goto	l7249
  5854  040B                     u7530:	
  5855  040B                     l7523:	
  5856                           
  5857                           ;main.c: 303:             {;main.c: 304:                 counter_1s++;
  5858  040B  3001               	movlw	1
  5859  040C  07DB               	addwf	_counter_1s,f
  5860  040D  3000               	movlw	0
  5861  040E  3DDC               	addwfc	_counter_1s+1,f
  5862                           
  5863                           ;main.c: 305:                 if(counter_1s >= 30)
  5864  040F  3000               	movlw	0
  5865  0410  025C               	subwf	_counter_1s+1,w
  5866  0411  301E               	movlw	30
  5867  0412  1903               	skipnz
  5868  0413  025B               	subwf	_counter_1s,w
  5869  0414  1C03               	skipc
  5870  0415  2C17               	goto	u7541
  5871  0416  2C18               	goto	u7540
  5872  0417                     u7541:	
  5873  0417  2C2C               	goto	l7531
  5874  0418                     u7540:	
  5875  0418                     l7525:	
  5876                           
  5877                           ;main.c: 306:                 {;main.c: 307:                     counter_1s = 0;
  5878  0418  01DB               	clrf	_counter_1s
  5879  0419  01DC               	clrf	_counter_1s+1
  5880  041A                     l7527:	
  5881                           
  5882                           ;main.c: 308:                     triac_level.level--;
  5883  041A  0859               	movf	_triac_level,w
  5884  041B  390F               	andlw	15
  5885  041C  00D4               	movwf	??_main
  5886  041D  03D4               	decf	??_main,f
  5887  041E  0859               	movf	_triac_level,w
  5888  041F  0654               	xorwf	??_main,w
  5889  0420  39F0               	andlw	-16
  5890  0421  0654               	xorwf	??_main,w
  5891  0422  00D9               	movwf	_triac_level
  5892  0423                     l7529:	
  5893                           
  5894                           ;main.c: 309:                     triac_level.last_level = triac_level.level;
  5895  0423  0859               	movf	_triac_level,w
  5896  0424  390F               	andlw	15
  5897  0425  00D4               	movwf	??_main
  5898  0426  0ED4               	swapf	??_main,f
  5899  0427  0859               	movf	_triac_level,w
  5900  0428  0654               	xorwf	??_main,w
  5901  0429  390F               	andlw	-241
  5902  042A  0654               	xorwf	??_main,w
  5903  042B  00D9               	movwf	_triac_level
  5904  042C                     l7531:	
  5905                           
  5906                           ;main.c: 311:                 if(triac_level.level == rc_level.level)
  5907  042C  0021               	movlb	1	; select bank1
  5908  042D  083C               	movf	_rc_level^(0+128),w
  5909  042E  390F               	andlw	15
  5910  042F  0020               	movlb	0	; select bank0
  5911  0430  00D4               	movwf	??_main
  5912  0431  0859               	movf	_triac_level,w
  5913  0432  390F               	andlw	15
  5914  0433  0654               	xorwf	??_main,w
  5915  0434  1D03               	skipz
  5916  0435  2C37               	goto	u7551
  5917  0436  2C38               	goto	u7550
  5918  0437                     u7551:	
  5919  0437  2C43               	goto	l1232
  5920  0438                     u7550:	
  5921  0438                     l7533:	
  5922                           
  5923                           ;main.c: 312:                 {;main.c: 313:                     triac_level.last_level 
      +                          = triac_level.level;
  5924  0438  0859               	movf	_triac_level,w
  5925  0439  390F               	andlw	15
  5926  043A  00D4               	movwf	??_main
  5927  043B  0ED4               	swapf	??_main,f
  5928  043C  0859               	movf	_triac_level,w
  5929  043D  0654               	xorwf	??_main,w
  5930  043E  390F               	andlw	-241
  5931  043F  0654               	xorwf	??_main,w
  5932  0440  00D9               	movwf	_triac_level
  5933  0441                     l7535:	
  5934                           
  5935                           ;main.c: 314:                     turn_down = 0;
  5936  0441  01E4               	clrf	_turn_down
  5937  0442  28C3               	goto	l7249
  5938  0443                     l1232:	
  5939                           ;main.c: 317:         }
  5940                           
  5941  0443  28C3               	goto	l7249
  5942  0444  3180  2846         	ljmp	start
  5943  0446                     __end_of_main:	
  5944                           
  5945                           	psect	text1
  5946  10B2                     __ptext1:	
  5947 ;; *************** function _update_state *****************
  5948 ;; Defined at:
  5949 ;;		line 371 in file "main.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;		None
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;		None
  5954 ;; Return value:  Size  Location     Type
  5955 ;;                  1    wreg      void 
  5956 ;; Registers used:
  5957 ;;		None
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5963 ;;      Params:         0       0       0       0       0       0       0       0
  5964 ;;      Locals:         0       0       0       0       0       0       0       0
  5965 ;;      Temps:          0       0       0       0       0       0       0       0
  5966 ;;      Totals:         0       0       0       0       0       0       0       0
  5967 ;;Total ram usage:        0 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    5
  5970 ;; This function calls:
  5971 ;;		Nothing
  5972 ;; This function is called by:
  5973 ;;		_main
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _update_state
  5979  10B2                     _update_state:	
  5980  10B2                     l7217:	
  5981                           ;incstack = 0
  5982                           ; Regs used in _update_state: []
  5983                           
  5984  10B2                     l1307:	
  5985                           ;main.c: 373:     switch(triac_level.level)
  5986                           
  5987  10B2  0008               	return
  5988  10B3                     __end_of_update_state:	
  5989                           
  5990                           	psect	text2
  5991  0936                     __ptext2:	
  5992 ;; *************** function _strstr *****************
  5993 ;; Defined at:
  5994 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strstr.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  h               1    wreg     PTR const unsigned char 
  5997 ;;		 -> Storage(64), NULL(0), 
  5998 ;;  n               2    9[BANK0 ] PTR const unsigned char 
  5999 ;;		 -> STR_1(6), 
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;  h               1   16[BANK0 ] PTR const unsigned char 
  6002 ;;		 -> Storage(64), NULL(0), 
  6003 ;;  nl              2   14[BANK0 ] unsigned int 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      PTR unsigned char 
  6006 ;; Registers used:
  6007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6013 ;;      Params:         0       2       0       0       0       0       0       0
  6014 ;;      Locals:         0       3       0       0       0       0       0       0
  6015 ;;      Temps:          0       3       0       0       0       0       0       0
  6016 ;;      Totals:         0       8       0       0       0       0       0       0
  6017 ;;Total ram usage:        8 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    6
  6020 ;; This function calls:
  6021 ;;		_strchr
  6022 ;;		_strlen
  6023 ;;		_strncmp
  6024 ;; This function is called by:
  6025 ;;		_main
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           
  6030                           ;psect for function _strstr
  6031  0936                     _strstr:	
  6032                           
  6033                           ;incstack = 0
  6034                           ; Regs used in _strstr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6035                           ;strstr@h stored from wreg
  6036  0936  0020               	movlb	0	; select bank0
  6037  0937  00B0               	movwf	strstr@h
  6038  0938                     l7151:	
  6039  0938  0829               	movf	strstr@n,w
  6040  0939  042A               	iorwf	strstr@n+1,w
  6041  093A  1903               	btfsc	3,2
  6042  093B  293D               	goto	u6811
  6043  093C  293E               	goto	u6810
  6044  093D                     u6811:	
  6045  093D  2982               	goto	l7167
  6046  093E                     u6810:	
  6047  093E                     l7153:	
  6048  093E  082A               	movf	strstr@n+1,w
  6049  093F  00A1               	movwf	strlen@s+1
  6050  0940  0829               	movf	strstr@n,w
  6051  0941  00A0               	movwf	strlen@s
  6052  0942  3193  23BB  3189   	fcall	_strlen
  6053  0945  0020               	movlb	0	; select bank0
  6054  0946  0821               	movf	?_strlen+1,w
  6055  0947  00AF               	movwf	strstr@nl+1
  6056  0948  0820               	movf	?_strlen,w
  6057  0949  00AE               	movwf	strstr@nl
  6058  094A  2974               	goto	l7163
  6059  094B                     l7155:	
  6060  094B  082A               	movf	strstr@n+1,w
  6061  094C  00A1               	movwf	strncmp@_r+1
  6062  094D  0829               	movf	strstr@n,w
  6063  094E  00A0               	movwf	strncmp@_r
  6064  094F  082F               	movf	strstr@nl+1,w
  6065  0950  00A3               	movwf	strncmp@n+1
  6066  0951  082E               	movf	strstr@nl,w
  6067  0952  00A2               	movwf	strncmp@n
  6068  0953  0830               	movf	strstr@h,w
  6069  0954  318A  2233  3189   	fcall	_strncmp
  6070  0957  0020               	movlb	0	; select bank0
  6071  0958  0820               	movf	?_strncmp,w
  6072  0959  0421               	iorwf	?_strncmp+1,w
  6073  095A  1D03               	btfss	3,2
  6074  095B  295D               	goto	u6821
  6075  095C  295E               	goto	u6820
  6076  095D                     u6821:	
  6077  095D  2960               	goto	l7161
  6078  095E                     u6820:	
  6079  095E                     l7157:	
  6080  095E  0830               	movf	strstr@h,w
  6081  095F  2983               	goto	l2061
  6082  0960                     l7161:	
  6083  0960  0829               	movf	strstr@n,w
  6084  0961  0084               	movwf	4
  6085  0962  082A               	movf	strstr@n+1,w
  6086  0963  0085               	movwf	5
  6087  0964  0800               	movf	0,w	;code access
  6088  0965  00AB               	movwf	??_strstr
  6089  0966  01AC               	clrf	??_strstr+1
  6090  0967  082B               	movf	??_strstr,w
  6091  0968  00A0               	movwf	strchr@c
  6092  0969  082C               	movf	??_strstr+1,w
  6093  096A  00A1               	movwf	strchr@c+1
  6094  096B  0830               	movf	strstr@h,w
  6095  096C  3E01               	addlw	1
  6096  096D  3193  23A1  3189   	fcall	_strchr
  6097  0970  0020               	movlb	0	; select bank0
  6098  0971  00AD               	movwf	??_strstr+2
  6099  0972  082D               	movf	??_strstr+2,w
  6100  0973  00B0               	movwf	strstr@h
  6101  0974                     l7163:	
  6102  0974  0830               	movf	strstr@h,w
  6103  0975  1903               	btfsc	3,2
  6104  0976  2978               	goto	u6831
  6105  0977  2979               	goto	u6830
  6106  0978                     u6831:	
  6107  0978  2982               	goto	l7167
  6108  0979                     u6830:	
  6109  0979                     l7165:	
  6110  0979  0830               	movf	strstr@h,w
  6111  097A  0086               	movwf	6
  6112  097B  3002               	movlw	2	; select bank4/5
  6113  097C  0087               	movwf	7
  6114  097D  0801               	movf	1,w
  6115  097E  1D03               	btfss	3,2
  6116  097F  2981               	goto	u6841
  6117  0980  2982               	goto	u6840
  6118  0981                     u6841:	
  6119  0981  294B               	goto	l7155
  6120  0982                     u6840:	
  6121  0982                     l7167:	
  6122  0982  3000               	movlw	0
  6123  0983                     l2061:	
  6124  0983  0008               	return
  6125  0984                     __end_of_strstr:	
  6126                           
  6127                           	psect	text3
  6128  0A33                     __ptext3:	
  6129 ;; *************** function _strncmp *****************
  6130 ;; Defined at:
  6131 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncmp.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;  _l              1    wreg     PTR const unsigned char 
  6134 ;;		 -> Storage(64), NULL(0), 
  6135 ;;  _r              2    0[BANK0 ] PTR const unsigned char 
  6136 ;;		 -> STR_1(6), 
  6137 ;;  n               2    2[BANK0 ] unsigned int 
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;  _l              1    5[BANK0 ] PTR const unsigned char 
  6140 ;;		 -> Storage(64), NULL(0), 
  6141 ;;  r               2    6[BANK0 ] PTR const unsigned char 
  6142 ;;		 -> STR_1(6), 
  6143 ;;  l               1    8[BANK0 ] PTR const unsigned char 
  6144 ;;		 -> Storage(64), NULL(0), 
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  2    0[BANK0 ] int 
  6147 ;; Registers used:
  6148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6154 ;;      Params:         0       4       0       0       0       0       0       0
  6155 ;;      Locals:         0       4       0       0       0       0       0       0
  6156 ;;      Temps:          0       1       0       0       0       0       0       0
  6157 ;;      Totals:         0       9       0       0       0       0       0       0
  6158 ;;Total ram usage:        9 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    5
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_strstr
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           
  6169                           ;psect for function _strncmp
  6170  0A33                     _strncmp:	
  6171                           
  6172                           ;incstack = 0
  6173                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  6174                           ;strncmp@_l stored from wreg
  6175  0A33  0020               	movlb	0	; select bank0
  6176  0A34  00A5               	movwf	strncmp@_l
  6177  0A35                     l5359:	
  6178  0A35  0825               	movf	strncmp@_l,w
  6179  0A36  00A4               	movwf	??_strncmp
  6180  0A37  0824               	movf	??_strncmp,w
  6181  0A38  00A8               	movwf	strncmp@l
  6182  0A39  0821               	movf	strncmp@_r+1,w
  6183  0A3A  00A7               	movwf	strncmp@r+1
  6184  0A3B  0820               	movf	strncmp@_r,w
  6185  0A3C  00A6               	movwf	strncmp@r
  6186  0A3D                     l5361:	
  6187  0A3D  3001               	movlw	1
  6188  0A3E  02A2               	subwf	strncmp@n,f
  6189  0A3F  3000               	movlw	0
  6190  0A40  3BA3               	subwfb	strncmp@n+1,f
  6191  0A41  0A22               	incf	strncmp@n,w
  6192  0A42  1D03               	skipz
  6193  0A43  2A48               	goto	u4421
  6194  0A44  0A23               	incf	strncmp@n+1,w
  6195  0A45  1D03               	btfss	3,2
  6196  0A46  2A48               	goto	u4421
  6197  0A47  2A49               	goto	u4420
  6198  0A48                     u4421:	
  6199  0A48  2A58               	goto	l5373
  6200  0A49                     u4420:	
  6201  0A49                     l5363:	
  6202  0A49  01A0               	clrf	?_strncmp
  6203  0A4A  01A1               	clrf	?_strncmp+1
  6204  0A4B  2A8E               	goto	l2086
  6205  0A4C                     l5367:	
  6206  0A4C  3001               	movlw	1
  6207  0A4D  00A4               	movwf	??_strncmp
  6208  0A4E  0824               	movf	??_strncmp,w
  6209  0A4F  07A8               	addwf	strncmp@l,f
  6210  0A50                     l5369:	
  6211  0A50  3001               	movlw	1
  6212  0A51  07A6               	addwf	strncmp@r,f
  6213  0A52  3000               	movlw	0
  6214  0A53  3DA7               	addwfc	strncmp@r+1,f
  6215  0A54                     l5371:	
  6216  0A54  3001               	movlw	1
  6217  0A55  02A2               	subwf	strncmp@n,f
  6218  0A56  3000               	movlw	0
  6219  0A57  3BA3               	subwfb	strncmp@n+1,f
  6220  0A58                     l5373:	
  6221  0A58  0828               	movf	strncmp@l,w
  6222  0A59  0086               	movwf	6
  6223  0A5A  3002               	movlw	2	; select bank4/5
  6224  0A5B  0087               	movwf	7
  6225  0A5C  0801               	movf	1,w
  6226  0A5D  1903               	btfsc	3,2
  6227  0A5E  2A60               	goto	u4431
  6228  0A5F  2A61               	goto	u4430
  6229  0A60                     u4431:	
  6230  0A60  2A80               	goto	l5381
  6231  0A61                     u4430:	
  6232  0A61                     l5375:	
  6233  0A61  0826               	movf	strncmp@r,w
  6234  0A62  0084               	movwf	4
  6235  0A63  0827               	movf	strncmp@r+1,w
  6236  0A64  0085               	movwf	5
  6237  0A65  0012               	moviw fsr0++
  6238  0A66  1903               	btfsc	3,2
  6239  0A67  2A69               	goto	u4441
  6240  0A68  2A6A               	goto	u4440
  6241  0A69                     u4441:	
  6242  0A69  2A80               	goto	l5381
  6243  0A6A                     u4440:	
  6244  0A6A                     l5377:	
  6245  0A6A  0822               	movf	strncmp@n,w
  6246  0A6B  0423               	iorwf	strncmp@n+1,w
  6247  0A6C  1903               	btfsc	3,2
  6248  0A6D  2A6F               	goto	u4451
  6249  0A6E  2A70               	goto	u4450
  6250  0A6F                     u4451:	
  6251  0A6F  2A80               	goto	l5381
  6252  0A70                     u4450:	
  6253  0A70                     l5379:	
  6254  0A70  0826               	movf	strncmp@r,w
  6255  0A71  0084               	movwf	4
  6256  0A72  0827               	movf	strncmp@r+1,w
  6257  0A73  0085               	movwf	5
  6258  0A74  0800               	movf	0,w	;code access
  6259  0A75  00A4               	movwf	??_strncmp
  6260  0A76  0828               	movf	strncmp@l,w
  6261  0A77  0086               	movwf	6
  6262  0A78  3002               	movlw	2	; select bank4/5
  6263  0A79  0087               	movwf	7
  6264  0A7A  0801               	movf	1,w
  6265  0A7B  0624               	xorwf	??_strncmp,w
  6266  0A7C  1903               	skipnz
  6267  0A7D  2A7F               	goto	u4461
  6268  0A7E  2A80               	goto	u4460
  6269  0A7F                     u4461:	
  6270  0A7F  2A4C               	goto	l5367
  6271  0A80                     u4460:	
  6272  0A80                     l5381:	
  6273  0A80  0828               	movf	strncmp@l,w
  6274  0A81  0086               	movwf	6
  6275  0A82  3002               	movlw	2	; select bank4/5
  6276  0A83  0087               	movwf	7
  6277  0A84  0826               	movf	strncmp@r,w
  6278  0A85  0084               	movwf	4
  6279  0A86  0827               	movf	strncmp@r+1,w
  6280  0A87  0085               	movwf	5
  6281  0A88  0800               	movf	0,w	;code access
  6282  0A89  0201               	subwf	1,w
  6283  0A8A  00A0               	movwf	?_strncmp
  6284  0A8B  01A1               	clrf	?_strncmp+1
  6285  0A8C  1C03               	skipc
  6286  0A8D  03A1               	decf	?_strncmp+1,f
  6287  0A8E                     l2086:	
  6288  0A8E  0008               	return
  6289  0A8F                     __end_of_strncmp:	
  6290                           
  6291                           	psect	text4
  6292  13BB                     __ptext4:	
  6293 ;; *************** function _strlen *****************
  6294 ;; Defined at:
  6295 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  6298 ;;		 -> STR_1(6), 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  a               2    3[BANK0 ] PTR const unsigned char 
  6301 ;;		 -> STR_1(6), 
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  2    0[BANK0 ] unsigned int 
  6304 ;; Registers used:
  6305 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6311 ;;      Params:         0       2       0       0       0       0       0       0
  6312 ;;      Locals:         0       2       0       0       0       0       0       0
  6313 ;;      Temps:          0       1       0       0       0       0       0       0
  6314 ;;      Totals:         0       5       0       0       0       0       0       0
  6315 ;;Total ram usage:        5 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    5
  6318 ;; This function calls:
  6319 ;;		Nothing
  6320 ;; This function is called by:
  6321 ;;		_strstr
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           
  6326                           ;psect for function _strlen
  6327  13BB                     _strlen:	
  6328  13BB                     l5349:	
  6329                           ;incstack = 0
  6330                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  6331                           
  6332  13BB  0020               	movlb	0	; select bank0
  6333  13BC  0821               	movf	strlen@s+1,w
  6334  13BD  00A4               	movwf	strlen@a+1
  6335  13BE  0820               	movf	strlen@s,w
  6336  13BF  00A3               	movwf	strlen@a
  6337  13C0  2BC5               	goto	l5353
  6338  13C1                     l5351:	
  6339  13C1  3001               	movlw	1
  6340  13C2  07A0               	addwf	strlen@s,f
  6341  13C3  3000               	movlw	0
  6342  13C4  3DA1               	addwfc	strlen@s+1,f
  6343  13C5                     l5353:	
  6344  13C5  0820               	movf	strlen@s,w
  6345  13C6  0084               	movwf	4
  6346  13C7  0821               	movf	strlen@s+1,w
  6347  13C8  0085               	movwf	5
  6348  13C9  0012               	moviw fsr0++
  6349  13CA  1D03               	btfss	3,2
  6350  13CB  2BCD               	goto	u4411
  6351  13CC  2BCE               	goto	u4410
  6352  13CD                     u4411:	
  6353  13CD  2BC1               	goto	l5351
  6354  13CE                     u4410:	
  6355  13CE                     l5355:	
  6356  13CE  0823               	movf	strlen@a,w
  6357  13CF  0220               	subwf	strlen@s,w
  6358  13D0  00A0               	movwf	?_strlen
  6359  13D1  0824               	movf	strlen@a+1,w
  6360  13D2  3B21               	subwfb	strlen@s+1,w
  6361  13D3  00A1               	movwf	?_strlen+1
  6362  13D4                     l2082:	
  6363  13D4  0008               	return
  6364  13D5                     __end_of_strlen:	
  6365                           
  6366                           	psect	text5
  6367  13A1                     __ptext5:	
  6368 ;; *************** function _strchr *****************
  6369 ;; Defined at:
  6370 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strchr.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;  s               1    wreg     PTR const unsigned char 
  6373 ;;		 -> Storage(64), NULL(0), 
  6374 ;;  c               2    0[BANK0 ] int 
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;  s               1    2[BANK0 ] PTR const unsigned char 
  6377 ;;		 -> Storage(64), NULL(0), 
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      PTR unsigned char 
  6380 ;; Registers used:
  6381 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6387 ;;      Params:         0       2       0       0       0       0       0       0
  6388 ;;      Locals:         0       1       0       0       0       0       0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0
  6390 ;;      Totals:         0       3       0       0       0       0       0       0
  6391 ;;Total ram usage:        3 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    5
  6394 ;; This function calls:
  6395 ;;		Nothing
  6396 ;; This function is called by:
  6397 ;;		_strstr
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           
  6402                           ;psect for function _strchr
  6403  13A1                     _strchr:	
  6404                           
  6405                           ;incstack = 0
  6406                           ; Regs used in _strchr: [wreg+fsr1l+fsr1h+status,2+status,0]
  6407                           ;strchr@s stored from wreg
  6408  13A1  0020               	movlb	0	; select bank0
  6409  13A2  00A2               	movwf	strchr@s
  6410  13A3                     l2073:	
  6411  13A3                     l7073:	
  6412  13A3  0822               	movf	strchr@s,w
  6413  13A4  0086               	movwf	6
  6414  13A5  3002               	movlw	2	; select bank4/5
  6415  13A6  0087               	movwf	7
  6416  13A7  0801               	movf	1,w
  6417  13A8  0620               	xorwf	strchr@c,w
  6418  13A9  1D03               	skipz
  6419  13AA  2BAC               	goto	u6741
  6420  13AB  2BAD               	goto	u6740
  6421  13AC                     u6741:	
  6422  13AC  2BAF               	goto	l7079
  6423  13AD                     u6740:	
  6424  13AD                     l7075:	
  6425  13AD  0822               	movf	strchr@s,w
  6426  13AE  2BBA               	goto	l2075
  6427  13AF                     l7079:	
  6428  13AF  0822               	movf	strchr@s,w
  6429  13B0  0086               	movwf	6
  6430  13B1  3002               	movlw	2	; select bank4/5
  6431  13B2  0087               	movwf	7
  6432  13B3  0AA2               	incf	strchr@s,f
  6433  13B4  0801               	movf	1,w
  6434  13B5  1D03               	btfss	3,2
  6435  13B6  2BB8               	goto	u6751
  6436  13B7  2BB9               	goto	u6750
  6437  13B8                     u6751:	
  6438  13B8  2BA3               	goto	l2073
  6439  13B9                     u6750:	
  6440  13B9                     l7081:	
  6441  13B9  3000               	movlw	0
  6442  13BA                     l2075:	
  6443  13BA  0008               	return
  6444  13BB                     __end_of_strchr:	
  6445                           
  6446                           	psect	text6
  6447  1614                     __ptext6:	
  6448 ;; *************** function _strcpy *****************
  6449 ;; Defined at:
  6450 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strcpy.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  dest            2    0[BANK0 ] PTR unsigned char 
  6453 ;;		 -> Storage2(9), Storage(64), 
  6454 ;;  src             2    2[BANK0 ] PTR const unsigned char 
  6455 ;;		 -> ResponseBuffer(64), Storage(64), NULL(0), 
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  d               2   10[BANK0 ] PTR unsigned char 
  6458 ;;		 -> Storage2(9), Storage(64), 
  6459 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  6460 ;;		 -> ResponseBuffer(64), Storage(64), NULL(0), 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  2    0[BANK0 ] PTR unsigned char 
  6463 ;; Registers used:
  6464 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6470 ;;      Params:         0       4       0       0       0       0       0       0
  6471 ;;      Locals:         0       4       0       0       0       0       0       0
  6472 ;;      Temps:          0       4       0       0       0       0       0       0
  6473 ;;      Totals:         0      12       0       0       0       0       0       0
  6474 ;;Total ram usage:       12 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    5
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_main
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           
  6485                           ;psect for function _strcpy
  6486  1614                     _strcpy:	
  6487  1614                     l7147:	
  6488                           ;incstack = 0
  6489                           ; Regs used in _strcpy: [wreg-fsr1h]
  6490                           
  6491  1614  0020               	movlb	0	; select bank0
  6492  1615  0823               	movf	strcpy@src+1,w
  6493  1616  00A9               	movwf	strcpy@s+1
  6494  1617  0822               	movf	strcpy@src,w
  6495  1618  00A8               	movwf	strcpy@s
  6496  1619  0821               	movf	strcpy@dest+1,w
  6497  161A  00AB               	movwf	strcpy@d+1
  6498  161B  0820               	movf	strcpy@dest,w
  6499  161C  00AA               	movwf	strcpy@d
  6500  161D                     l7149:	
  6501  161D  082B               	movf	strcpy@d+1,w
  6502  161E  00A5               	movwf	??_strcpy+1
  6503  161F  082A               	movf	strcpy@d,w
  6504  1620  00A4               	movwf	??_strcpy
  6505  1621  0AAA               	incf	strcpy@d,f
  6506  1622  1903               	skipnz
  6507  1623  0AAB               	incf	strcpy@d+1,f
  6508  1624  0824               	movf	??_strcpy,w
  6509  1625  0086               	movwf	6
  6510  1626  0825               	movf	??_strcpy+1,w
  6511  1627  0087               	movwf	7
  6512  1628  0829               	movf	strcpy@s+1,w
  6513  1629  00A7               	movwf	??_strcpy+3
  6514  162A  0828               	movf	strcpy@s,w
  6515  162B  00A6               	movwf	??_strcpy+2
  6516  162C  0AA8               	incf	strcpy@s,f
  6517  162D  1903               	skipnz
  6518  162E  0AA9               	incf	strcpy@s+1,f
  6519  162F  0826               	movf	??_strcpy+2,w
  6520  1630  0084               	movwf	4
  6521  1631  0827               	movf	??_strcpy+3,w
  6522  1632  0085               	movwf	5
  6523  1633  0800               	movf	0,w
  6524  1634  3FC0               	movwi [0]fsr1
  6525  1635  0889               	movf	9,f
  6526  1636  1D03               	btfss	3,2
  6527  1637  2E39               	goto	u6801
  6528  1638  2E3A               	goto	u6800
  6529  1639                     u6801:	
  6530  1639  2E1D               	goto	l7149
  6531  163A                     u6800:	
  6532  163A                     l2048:	
  6533  163A  0008               	return
  6534  163B                     __end_of_strcpy:	
  6535                           
  6536                           	psect	text7
  6537  0EB2                     __ptext7:	
  6538 ;; *************** function _memset *****************
  6539 ;; Defined at:
  6540 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memset.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  dest            1    wreg     PTR void 
  6543 ;;		 -> Num_Char(3), Storage2(9), 
  6544 ;;  c               2    0[BANK0 ] int 
  6545 ;;  n               2    2[BANK0 ] unsigned int 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  dest            1    8[BANK0 ] PTR void 
  6548 ;;		 -> Num_Char(3), Storage2(9), 
  6549 ;;  k               2    6[BANK0 ] unsigned int 
  6550 ;;  s               1    9[BANK0 ] PTR unsigned char 
  6551 ;;		 -> Num_Char(3), Storage2(9), 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      PTR void 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6561 ;;      Params:         0       4       0       0       0       0       0       0
  6562 ;;      Locals:         0       4       0       0       0       0       0       0
  6563 ;;      Temps:          0       2       0       0       0       0       0       0
  6564 ;;      Totals:         0      10       0       0       0       0       0       0
  6565 ;;Total ram usage:       10 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    5
  6568 ;; This function calls:
  6569 ;;		Nothing
  6570 ;; This function is called by:
  6571 ;;		_main
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           
  6576                           ;psect for function _memset
  6577  0EB2                     _memset:	
  6578                           
  6579                           ;incstack = 0
  6580                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6581                           ;memset@dest stored from wreg
  6582  0EB2  0020               	movlb	0	; select bank0
  6583  0EB3  00A8               	movwf	memset@dest
  6584  0EB4                     l5601:	
  6585  0EB4  0828               	movf	memset@dest,w
  6586  0EB5  00A4               	movwf	??_memset
  6587  0EB6  0824               	movf	??_memset,w
  6588  0EB7  00A9               	movwf	memset@s
  6589  0EB8                     l5603:	
  6590  0EB8  0822               	movf	memset@n,w
  6591  0EB9  0423               	iorwf	memset@n+1,w
  6592  0EBA  1D03               	btfss	3,2
  6593  0EBB  2EBD               	goto	u4741
  6594  0EBC  2EBE               	goto	u4740
  6595  0EBD                     u4741:	
  6596  0EBD  2EBF               	goto	l5607
  6597  0EBE                     u4740:	
  6598  0EBE  2F56               	goto	l2036
  6599  0EBF                     l5607:	
  6600  0EBF  0820               	movf	memset@c,w
  6601  0EC0  00A4               	movwf	??_memset
  6602  0EC1  0829               	movf	memset@s,w
  6603  0EC2  0086               	movwf	6
  6604  0EC3  0187               	clrf	7
  6605  0EC4  0824               	movf	??_memset,w
  6606  0EC5  0081               	movwf	1
  6607  0EC6                     l5609:	
  6608  0EC6  0820               	movf	memset@c,w
  6609  0EC7  00A4               	movwf	??_memset
  6610  0EC8  0822               	movf	memset@n,w
  6611  0EC9  0729               	addwf	memset@s,w
  6612  0ECA  00A5               	movwf	??_memset+1
  6613  0ECB  0825               	movf	??_memset+1,w
  6614  0ECC  3EFF               	addlw	255
  6615  0ECD  0086               	movwf	6
  6616  0ECE  0187               	clrf	7
  6617  0ECF  0824               	movf	??_memset,w
  6618  0ED0  0081               	movwf	1
  6619  0ED1                     l5611:	
  6620  0ED1  3000               	movlw	0
  6621  0ED2  0223               	subwf	memset@n+1,w
  6622  0ED3  3003               	movlw	3
  6623  0ED4  1903               	skipnz
  6624  0ED5  0222               	subwf	memset@n,w
  6625  0ED6  1803               	skipnc
  6626  0ED7  2ED9               	goto	u4751
  6627  0ED8  2EDA               	goto	u4750
  6628  0ED9                     u4751:	
  6629  0ED9  2EDB               	goto	l5615
  6630  0EDA                     u4750:	
  6631  0EDA  2F56               	goto	l2036
  6632  0EDB                     l5615:	
  6633  0EDB  0820               	movf	memset@c,w
  6634  0EDC  00A4               	movwf	??_memset
  6635  0EDD  0A29               	incf	memset@s,w
  6636  0EDE  0086               	movwf	6
  6637  0EDF  0187               	clrf	7
  6638  0EE0  0824               	movf	??_memset,w
  6639  0EE1  0081               	movwf	1
  6640  0EE2                     l5617:	
  6641  0EE2  0820               	movf	memset@c,w
  6642  0EE3  00A4               	movwf	??_memset
  6643  0EE4  0829               	movf	memset@s,w
  6644  0EE5  3E02               	addlw	2
  6645  0EE6  0086               	movwf	6
  6646  0EE7  0187               	clrf	7
  6647  0EE8  0824               	movf	??_memset,w
  6648  0EE9  0081               	movwf	1
  6649  0EEA                     l5619:	
  6650  0EEA  0820               	movf	memset@c,w
  6651  0EEB  00A4               	movwf	??_memset
  6652  0EEC  0822               	movf	memset@n,w
  6653  0EED  0729               	addwf	memset@s,w
  6654  0EEE  00A5               	movwf	??_memset+1
  6655  0EEF  0825               	movf	??_memset+1,w
  6656  0EF0  3EFE               	addlw	254
  6657  0EF1  0086               	movwf	6
  6658  0EF2  0187               	clrf	7
  6659  0EF3  0824               	movf	??_memset,w
  6660  0EF4  0081               	movwf	1
  6661  0EF5                     l5621:	
  6662  0EF5  0820               	movf	memset@c,w
  6663  0EF6  00A4               	movwf	??_memset
  6664  0EF7  0822               	movf	memset@n,w
  6665  0EF8  0729               	addwf	memset@s,w
  6666  0EF9  00A5               	movwf	??_memset+1
  6667  0EFA  0825               	movf	??_memset+1,w
  6668  0EFB  3EFD               	addlw	253
  6669  0EFC  0086               	movwf	6
  6670  0EFD  0187               	clrf	7
  6671  0EFE  0824               	movf	??_memset,w
  6672  0EFF  0081               	movwf	1
  6673  0F00                     l5623:	
  6674  0F00  3000               	movlw	0
  6675  0F01  0223               	subwf	memset@n+1,w
  6676  0F02  3007               	movlw	7
  6677  0F03  1903               	skipnz
  6678  0F04  0222               	subwf	memset@n,w
  6679  0F05  1803               	skipnc
  6680  0F06  2F08               	goto	u4761
  6681  0F07  2F09               	goto	u4760
  6682  0F08                     u4761:	
  6683  0F08  2F0A               	goto	l5627
  6684  0F09                     u4760:	
  6685  0F09  2F56               	goto	l2036
  6686  0F0A                     l5627:	
  6687  0F0A  0820               	movf	memset@c,w
  6688  0F0B  00A4               	movwf	??_memset
  6689  0F0C  0829               	movf	memset@s,w
  6690  0F0D  3E03               	addlw	3
  6691  0F0E  0086               	movwf	6
  6692  0F0F  0187               	clrf	7
  6693  0F10  0824               	movf	??_memset,w
  6694  0F11  0081               	movwf	1
  6695  0F12  0820               	movf	memset@c,w
  6696  0F13  00A4               	movwf	??_memset
  6697  0F14  0822               	movf	memset@n,w
  6698  0F15  0729               	addwf	memset@s,w
  6699  0F16  00A5               	movwf	??_memset+1
  6700  0F17  0825               	movf	??_memset+1,w
  6701  0F18  3EFC               	addlw	252
  6702  0F19  0086               	movwf	6
  6703  0F1A  0187               	clrf	7
  6704  0F1B  0824               	movf	??_memset,w
  6705  0F1C  0081               	movwf	1
  6706  0F1D                     l5629:	
  6707  0F1D  3000               	movlw	0
  6708  0F1E  0223               	subwf	memset@n+1,w
  6709  0F1F  3009               	movlw	9
  6710  0F20  1903               	skipnz
  6711  0F21  0222               	subwf	memset@n,w
  6712  0F22  1803               	skipnc
  6713  0F23  2F25               	goto	u4771
  6714  0F24  2F26               	goto	u4770
  6715  0F25                     u4771:	
  6716  0F25  2F27               	goto	l5633
  6717  0F26                     u4770:	
  6718  0F26  2F56               	goto	l2036
  6719  0F27                     l5633:	
  6720  0F27  0929               	comf	memset@s,w
  6721  0F28  00A4               	movwf	??_memset
  6722  0F29  092A               	comf	memset@s+1,w
  6723  0F2A  00A5               	movwf	??_memset+1
  6724  0F2B  0AA4               	incf	??_memset,f
  6725  0F2C  1903               	skipnz
  6726  0F2D  0AA5               	incf	??_memset+1,f
  6727  0F2E  3003               	movlw	3
  6728  0F2F  0524               	andwf	??_memset,w
  6729  0F30  00A6               	movwf	memset@k
  6730  0F31  3000               	movlw	0
  6731  0F32  0525               	andwf	??_memset+1,w
  6732  0F33  00A7               	movwf	memset@k+1
  6733  0F34  0826               	movf	memset@k,w
  6734  0F35  00A4               	movwf	??_memset
  6735  0F36  0824               	movf	??_memset,w
  6736  0F37  07A9               	addwf	memset@s,f
  6737  0F38                     l5635:	
  6738  0F38  0826               	movf	memset@k,w
  6739  0F39  02A2               	subwf	memset@n,f
  6740  0F3A  0827               	movf	memset@k+1,w
  6741  0F3B  3BA3               	subwfb	memset@n+1,f
  6742  0F3C                     l5637:	
  6743  0F3C  30FC               	movlw	252
  6744  0F3D  05A2               	andwf	memset@n,f
  6745  0F3E  30FF               	movlw	255
  6746  0F3F  05A3               	andwf	memset@n+1,f
  6747  0F40  2F50               	goto	l5645
  6748  0F41                     l5639:	
  6749  0F41  0820               	movf	memset@c,w
  6750  0F42  00A4               	movwf	??_memset
  6751  0F43  0829               	movf	memset@s,w
  6752  0F44  0086               	movwf	6
  6753  0F45  0187               	clrf	7
  6754  0F46  0824               	movf	??_memset,w
  6755  0F47  0081               	movwf	1
  6756  0F48                     l5641:	
  6757  0F48  3001               	movlw	1
  6758  0F49  02A2               	subwf	memset@n,f
  6759  0F4A  3000               	movlw	0
  6760  0F4B  3BA3               	subwfb	memset@n+1,f
  6761  0F4C                     l5643:	
  6762  0F4C  3001               	movlw	1
  6763  0F4D  00A4               	movwf	??_memset
  6764  0F4E  0824               	movf	??_memset,w
  6765  0F4F  07A9               	addwf	memset@s,f
  6766  0F50                     l5645:	
  6767  0F50  0822               	movf	memset@n,w
  6768  0F51  0423               	iorwf	memset@n+1,w
  6769  0F52  1D03               	btfss	3,2
  6770  0F53  2F55               	goto	u4781
  6771  0F54  2F56               	goto	u4780
  6772  0F55                     u4781:	
  6773  0F55  2F41               	goto	l5639
  6774  0F56                     u4780:	
  6775  0F56                     l2036:	
  6776  0F56  0008               	return
  6777  0F57                     __end_of_memset:	
  6778                           
  6779                           	psect	text8
  6780  1445                     __ptext8:	
  6781 ;; *************** function _blockingWait *****************
  6782 ;; Defined at:
  6783 ;;		line 51 in file "uart.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;  limit           2    0[BANK0 ] unsigned short 
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;  counter         2    3[BANK0 ] unsigned short 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6797 ;;      Params:         0       2       0       0       0       0       0       0
  6798 ;;      Locals:         0       2       0       0       0       0       0       0
  6799 ;;      Temps:          0       1       0       0       0       0       0       0
  6800 ;;      Totals:         0       5       0       0       0       0       0       0
  6801 ;;Total ram usage:        5 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    5
  6804 ;; This function calls:
  6805 ;;		Nothing
  6806 ;; This function is called by:
  6807 ;;		_main
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           
  6812                           ;psect for function _blockingWait
  6813  1445                     _blockingWait:	
  6814  1445                     l5523:	
  6815                           ;incstack = 0
  6816                           ; Regs used in _blockingWait: [wreg+status,2]
  6817                           
  6818                           
  6819                           ;uart.c: 51: void blockingWait (uint16_t limit);uart.c: 52: {;uart.c: 53:     for (uint1
      +                          6_t counter = 0; counter < limit; counter++)
  6820  1445  0020               	movlb	0	; select bank0
  6821  1446  01A3               	clrf	blockingWait@counter
  6822  1447  01A4               	clrf	blockingWait@counter+1
  6823  1448  2C57               	goto	l1453
  6824  1449                     l5525:	
  6825                           
  6826                           ;uart.c: 54:   _delay((unsigned long)((10)*(32000000/4000.0)));
  6827  1449  3068               	movlw	104
  6828  144A  0020               	movlb	0	; select bank0
  6829  144B  00A2               	movwf	??_blockingWait
  6830  144C  30E4               	movlw	228
  6831  144D                     u7567:	
  6832  144D  0B89               	decfsz	9,f
  6833  144E  2C4D               	goto	u7567
  6834  144F  0BA2               	decfsz	??_blockingWait,f
  6835  1450  2C4D               	goto	u7567
  6836  1451  0000               	nop
  6837  1452  3001               	movlw	1
  6838  1453  0020               	movlb	0	; select bank0
  6839  1454  07A3               	addwf	blockingWait@counter,f
  6840  1455  3000               	movlw	0
  6841  1456  3DA4               	addwfc	blockingWait@counter+1,f
  6842  1457                     l1453:	
  6843  1457  0821               	movf	blockingWait@limit+1,w
  6844  1458  0224               	subwf	blockingWait@counter+1,w
  6845  1459  1D03               	skipz
  6846  145A  2C5D               	goto	u4615
  6847  145B  0820               	movf	blockingWait@limit,w
  6848  145C  0223               	subwf	blockingWait@counter,w
  6849  145D                     u4615:	
  6850  145D  1C03               	skipc
  6851  145E  2C60               	goto	u4611
  6852  145F  2C61               	goto	u4610
  6853  1460                     u4611:	
  6854  1460  2C49               	goto	l5525
  6855  1461                     u4610:	
  6856  1461                     l1456:	
  6857  1461  0008               	return
  6858  1462                     __end_of_blockingWait:	
  6859                           
  6860                           	psect	text9
  6861  0F57                     __ptext9:	
  6862 ;; *************** function _atoi *****************
  6863 ;; Defined at:
  6864 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\atoi.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  s               1    wreg     PTR const unsigned char 
  6867 ;;		 -> Num_Char(3), 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  s               1   21[BANK0 ] PTR const unsigned char 
  6870 ;;		 -> Num_Char(3), 
  6871 ;;  n               2   19[BANK0 ] int 
  6872 ;;  neg             2   12[BANK0 ] int 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  2    6[BANK0 ] int 
  6875 ;; Registers used:
  6876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6882 ;;      Params:         0       2       0       0       0       0       0       0
  6883 ;;      Locals:         0      10       0       0       0       0       0       0
  6884 ;;      Temps:          0       4       0       0       0       0       0       0
  6885 ;;      Totals:         0      16       0       0       0       0       0       0
  6886 ;;Total ram usage:       16 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    6
  6889 ;; This function calls:
  6890 ;;		___wmul
  6891 ;;		_isdigit
  6892 ;;		_isspace
  6893 ;; This function is called by:
  6894 ;;		_main
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           
  6899                           ;psect for function _atoi
  6900  0F57                     _atoi:	
  6901                           
  6902                           ;incstack = 0
  6903                           ; Regs used in _atoi: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6904                           ;atoi@s stored from wreg
  6905  0F57  0020               	movlb	0	; select bank0
  6906  0F58  00B5               	movwf	atoi@s
  6907  0F59                     l7171:	
  6908  0F59  01B3               	clrf	atoi@n
  6909  0F5A  01B4               	clrf	atoi@n+1
  6910  0F5B  01AC               	clrf	atoi@neg
  6911  0F5C  01AD               	clrf	atoi@neg+1
  6912  0F5D  2F62               	goto	l7175
  6913  0F5E                     l7173:	
  6914  0F5E  3001               	movlw	1
  6915  0F5F  00A8               	movwf	??_atoi
  6916  0F60  0828               	movf	??_atoi,w
  6917  0F61  07B5               	addwf	atoi@s,f
  6918  0F62                     l7175:	
  6919  0F62  01B2               	clrf	_atoi$2608
  6920  0F63  0AB2               	incf	_atoi$2608,f
  6921  0F64                     l7177:	
  6922  0F64  0835               	movf	atoi@s,w
  6923  0F65  0086               	movwf	6
  6924  0F66  0187               	clrf	7
  6925  0F67  3020               	movlw	32
  6926  0F68  0601               	xorwf	1,w
  6927  0F69  1903               	btfsc	3,2
  6928  0F6A  2F6C               	goto	u6851
  6929  0F6B  2F6D               	goto	u6850
  6930  0F6C                     u6851:	
  6931  0F6C  2F81               	goto	l7183
  6932  0F6D                     u6850:	
  6933  0F6D                     l7179:	
  6934  0F6D  0835               	movf	atoi@s,w
  6935  0F6E  0086               	movwf	6
  6936  0F6F  0187               	clrf	7
  6937  0F70  0801               	movf	1,w
  6938  0F71  3EF7               	addlw	247
  6939  0F72  00A8               	movwf	??_atoi
  6940  0F73  30FF               	movlw	255
  6941  0F74  1803               	skipnc
  6942  0F75  3000               	movlw	0
  6943  0F76  00A9               	movwf	??_atoi+1
  6944  0F77  3000               	movlw	0
  6945  0F78  0229               	subwf	??_atoi+1,w
  6946  0F79  3005               	movlw	5
  6947  0F7A  1903               	skipnz
  6948  0F7B  0228               	subwf	??_atoi,w
  6949  0F7C  1C03               	skipc
  6950  0F7D  2F7F               	goto	u6861
  6951  0F7E  2F80               	goto	u6860
  6952  0F7F                     u6861:	
  6953  0F7F  2F81               	goto	l7183
  6954  0F80                     u6860:	
  6955  0F80                     l7181:	
  6956  0F80  01B2               	clrf	_atoi$2608
  6957  0F81                     l7183:	
  6958  0F81  0832               	movf	_atoi$2608,w
  6959  0F82  00A8               	movwf	??_atoi
  6960  0F83  01A9               	clrf	??_atoi+1
  6961  0F84  0828               	movf	??_atoi,w
  6962  0F85  00AE               	movwf	_atoi$2607
  6963  0F86  0829               	movf	??_atoi+1,w
  6964  0F87  00AF               	movwf	_atoi$2607+1
  6965  0F88                     l7187:	
  6966  0F88  082E               	movf	_atoi$2607,w
  6967  0F89  042F               	iorwf	_atoi$2607+1,w
  6968  0F8A  1D03               	btfss	3,2
  6969  0F8B  2F8D               	goto	u6871
  6970  0F8C  2F8E               	goto	u6870
  6971  0F8D                     u6871:	
  6972  0F8D  2F5E               	goto	l7173
  6973  0F8E                     u6870:	
  6974  0F8E  2F98               	goto	l7193
  6975  0F8F                     l7189:	
  6976  0F8F  3001               	movlw	1
  6977  0F90  00AC               	movwf	atoi@neg
  6978  0F91  3000               	movlw	0
  6979  0F92  00AD               	movwf	atoi@neg+1
  6980  0F93                     l7191:	
  6981  0F93  3001               	movlw	1
  6982  0F94  00A8               	movwf	??_atoi
  6983  0F95  0828               	movf	??_atoi,w
  6984  0F96  07B5               	addwf	atoi@s,f
  6985  0F97  2FC8               	goto	l7199
  6986  0F98                     l7193:	
  6987  0F98  0835               	movf	atoi@s,w
  6988  0F99  0086               	movwf	6
  6989  0F9A  0187               	clrf	7
  6990  0F9B  0801               	movf	1,w
  6991  0F9C  00A8               	movwf	??_atoi
  6992  0F9D  01A9               	clrf	??_atoi+1
  6993                           
  6994                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6995                           ; Switch size 1, requested type "simple"
  6996                           ; Number of cases is 1, Range of values is 0 to 0
  6997                           ; switch strategies available:
  6998                           ; Name         Instructions Cycles
  6999                           ; simple_byte            4     3 (average)
  7000                           ; direct_byte            8     6 (fixed)
  7001                           ; jumptable            260     6 (fixed)
  7002                           ;	Chosen strategy is simple_byte
  7003  0F9E  0829               	movf	??_atoi+1,w
  7004  0F9F  3A00               	xorlw	0	; case 0
  7005  0FA0  1903               	skipnz
  7006  0FA1  2FA3               	goto	l7597
  7007  0FA2  2FC8               	goto	l7199
  7008  0FA3                     l7597:	
  7009                           
  7010                           ; Switch size 1, requested type "simple"
  7011                           ; Number of cases is 2, Range of values is 43 to 45
  7012                           ; switch strategies available:
  7013                           ; Name         Instructions Cycles
  7014                           ; simple_byte            7     4 (average)
  7015                           ; direct_byte           15     9 (fixed)
  7016                           ; jumptable            263     9 (fixed)
  7017                           ;	Chosen strategy is simple_byte
  7018  0FA3  0828               	movf	??_atoi,w
  7019  0FA4  3A2B               	xorlw	43	; case 43
  7020  0FA5  1903               	skipnz
  7021  0FA6  2F93               	goto	l7191
  7022  0FA7  3A06               	xorlw	6	; case 45
  7023  0FA8  1903               	skipnz
  7024  0FA9  2F8F               	goto	l7189
  7025  0FAA  2FC8               	goto	l7199
  7026  0FAB                     l7195:	
  7027  0FAB  0835               	movf	atoi@s,w
  7028  0FAC  0086               	movwf	6
  7029  0FAD  0187               	clrf	7
  7030  0FAE  0834               	movf	atoi@n+1,w
  7031  0FAF  00A1               	movwf	___wmul@multiplier+1
  7032  0FB0  0833               	movf	atoi@n,w
  7033  0FB1  00A0               	movwf	___wmul@multiplier
  7034  0FB2  300A               	movlw	10
  7035  0FB3  00A2               	movwf	___wmul@multiplicand
  7036  0FB4  3000               	movlw	0
  7037  0FB5  00A3               	movwf	___wmul@multiplicand+1
  7038  0FB6  3195  253C  318F   	fcall	___wmul
  7039  0FB9  0020               	movlb	0	; select bank0
  7040  0FBA  0821               	movf	?___wmul+1,w
  7041  0FBB  00A9               	movwf	??_atoi+1
  7042  0FBC  0801               	movf	1,w
  7043  0FBD  0220               	subwf	?___wmul,w
  7044  0FBE  00A8               	movwf	??_atoi
  7045  0FBF  1C03               	skipc
  7046  0FC0  03A9               	decf	??_atoi+1,f
  7047  0FC1  0828               	movf	??_atoi,w
  7048  0FC2  3E30               	addlw	48
  7049  0FC3  00B3               	movwf	atoi@n
  7050  0FC4  3000               	movlw	0
  7051  0FC5  3D29               	addwfc	??_atoi+1,w
  7052  0FC6  00B4               	movwf	atoi@n+1
  7053  0FC7  2F93               	goto	l7191
  7054  0FC8                     l7199:	
  7055  0FC8  0835               	movf	atoi@s,w
  7056  0FC9  0086               	movwf	6
  7057  0FCA  0187               	clrf	7
  7058  0FCB  0801               	movf	1,w
  7059  0FCC  3ED0               	addlw	208
  7060  0FCD  00A8               	movwf	??_atoi
  7061  0FCE  30FF               	movlw	255
  7062  0FCF  1803               	skipnc
  7063  0FD0  3000               	movlw	0
  7064  0FD1  00A9               	movwf	??_atoi+1
  7065  0FD2  3000               	movlw	0
  7066  0FD3  0229               	subwf	??_atoi+1,w
  7067  0FD4  300A               	movlw	10
  7068  0FD5  1903               	skipnz
  7069  0FD6  0228               	subwf	??_atoi,w
  7070  0FD7  1C03               	skipc
  7071  0FD8  2FDA               	goto	u6881
  7072  0FD9  2FDC               	goto	u6880
  7073  0FDA                     u6881:	
  7074  0FDA  3001               	movlw	1
  7075  0FDB  2FDD               	goto	u6890
  7076  0FDC                     u6880:	
  7077  0FDC  3000               	movlw	0
  7078  0FDD                     u6890:	
  7079  0FDD  00AA               	movwf	??_atoi+2
  7080  0FDE  01AB               	clrf	??_atoi+3
  7081  0FDF  082A               	movf	??_atoi+2,w
  7082  0FE0  00B0               	movwf	_atoi$2609
  7083  0FE1  082B               	movf	??_atoi+3,w
  7084  0FE2  00B1               	movwf	_atoi$2609+1
  7085  0FE3                     l7203:	
  7086  0FE3  0830               	movf	_atoi$2609,w
  7087  0FE4  0431               	iorwf	_atoi$2609+1,w
  7088  0FE5  1D03               	btfss	3,2
  7089  0FE6  2FE8               	goto	u6901
  7090  0FE7  2FE9               	goto	u6900
  7091  0FE8                     u6901:	
  7092  0FE8  2FAB               	goto	l7195
  7093  0FE9                     u6900:	
  7094  0FE9                     l7205:	
  7095  0FE9  082C               	movf	atoi@neg,w
  7096  0FEA  042D               	iorwf	atoi@neg+1,w
  7097  0FEB  1D03               	btfss	3,2
  7098  0FEC  2FEE               	goto	u6911
  7099  0FED  2FEF               	goto	u6910
  7100  0FEE                     u6911:	
  7101  0FEE  2FFB               	goto	l7209
  7102  0FEF                     u6910:	
  7103  0FEF                     l7207:	
  7104  0FEF  0933               	comf	atoi@n,w
  7105  0FF0  00A8               	movwf	??_atoi
  7106  0FF1  0934               	comf	atoi@n+1,w
  7107  0FF2  00A9               	movwf	??_atoi+1
  7108  0FF3  0AA8               	incf	??_atoi,f
  7109  0FF4  1903               	skipnz
  7110  0FF5  0AA9               	incf	??_atoi+1,f
  7111  0FF6  0828               	movf	??_atoi,w
  7112  0FF7  00A6               	movwf	?_atoi
  7113  0FF8  0829               	movf	??_atoi+1,w
  7114  0FF9  00A7               	movwf	?_atoi+1
  7115  0FFA  2FFF               	goto	l2012
  7116  0FFB                     l7209:	
  7117  0FFB  0834               	movf	atoi@n+1,w
  7118  0FFC  00A7               	movwf	?_atoi+1
  7119  0FFD  0833               	movf	atoi@n,w
  7120  0FFE  00A6               	movwf	?_atoi
  7121  0FFF                     l2012:	
  7122  0FFF  0008               	return
  7123  1000                     __end_of_atoi:	
  7124                           
  7125                           	psect	text10
  7126  155C                     __ptext10:	
  7127 ;; *************** function _isspace *****************
  7128 ;; Defined at:
  7129 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isspace.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;  c               2    0[BANK0 ] int 
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;		None
  7134 ;; Return value:  Size  Location     Type
  7135 ;;                  2    0[BANK0 ] int 
  7136 ;; Registers used:
  7137 ;;		wreg, status,2, status,0
  7138 ;; Tracked objects:
  7139 ;;		On entry : 0/0
  7140 ;;		On exit  : 0/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7143 ;;      Params:         0       2       0       0       0       0       0       0
  7144 ;;      Locals:         0       1       0       0       0       0       0       0
  7145 ;;      Temps:          0       2       0       0       0       0       0       0
  7146 ;;      Totals:         0       5       0       0       0       0       0       0
  7147 ;;Total ram usage:        5 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:    5
  7150 ;; This function calls:
  7151 ;;		Nothing
  7152 ;; This function is called by:
  7153 ;;		_atoi
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           
  7158                           ;psect for function _isspace
  7159  155C                     _isspace:	
  7160  155C                     l5333:	
  7161                           ;incstack = 0
  7162                           ; Regs used in _isspace: [wreg+status,2+status,0]
  7163                           
  7164  155C  0020               	movlb	0	; select bank0
  7165  155D  01A4               	clrf	_isspace$2625
  7166  155E  0AA4               	incf	_isspace$2625,f
  7167  155F                     l5335:	
  7168  155F  3020               	movlw	32
  7169  1560  0620               	xorwf	isspace@c,w
  7170  1561  0421               	iorwf	isspace@c+1,w
  7171  1562  1903               	btfsc	3,2
  7172  1563  2D65               	goto	u4371
  7173  1564  2D66               	goto	u4370
  7174  1565                     u4371:	
  7175  1565  2D76               	goto	l5341
  7176  1566                     u4370:	
  7177  1566                     l5337:	
  7178  1566  0820               	movf	isspace@c,w
  7179  1567  3EF7               	addlw	247
  7180  1568  00A2               	movwf	??_isspace
  7181  1569  30FF               	movlw	255
  7182  156A  3D21               	addwfc	isspace@c+1,w
  7183  156B  00A3               	movwf	??_isspace+1
  7184  156C  3000               	movlw	0
  7185  156D  0223               	subwf	??_isspace+1,w
  7186  156E  3005               	movlw	5
  7187  156F  1903               	skipnz
  7188  1570  0222               	subwf	??_isspace,w
  7189  1571  1C03               	skipc
  7190  1572  2D74               	goto	u4381
  7191  1573  2D75               	goto	u4380
  7192  1574                     u4381:	
  7193  1574  2D76               	goto	l5341
  7194  1575                     u4380:	
  7195  1575                     l5339:	
  7196  1575  01A4               	clrf	_isspace$2625
  7197  1576                     l5341:	
  7198  1576  0824               	movf	_isspace$2625,w
  7199  1577  00A2               	movwf	??_isspace
  7200  1578  01A3               	clrf	??_isspace+1
  7201  1579  0822               	movf	??_isspace,w
  7202  157A  00A0               	movwf	?_isspace
  7203  157B  0823               	movf	??_isspace+1,w
  7204  157C  00A1               	movwf	?_isspace+1
  7205  157D                     l2023:	
  7206  157D  0008               	return
  7207  157E                     __end_of_isspace:	
  7208                           
  7209                           	psect	text11
  7210  1320                     __ptext11:	
  7211 ;; *************** function _isdigit *****************
  7212 ;; Defined at:
  7213 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isdigit.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  c               2    0[BANK0 ] int 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;		None
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  2    0[BANK0 ] int 
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7227 ;;      Params:         0       2       0       0       0       0       0       0
  7228 ;;      Locals:         0       0       0       0       0       0       0       0
  7229 ;;      Temps:          0       4       0       0       0       0       0       0
  7230 ;;      Totals:         0       6       0       0       0       0       0       0
  7231 ;;Total ram usage:        6 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    5
  7234 ;; This function calls:
  7235 ;;		Nothing
  7236 ;; This function is called by:
  7237 ;;		_atoi
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           
  7242                           ;psect for function _isdigit
  7243  1320                     _isdigit:	
  7244  1320                     l5345:	
  7245                           ;incstack = 0
  7246                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7247                           
  7248  1320  0020               	movlb	0	; select bank0
  7249  1321  0820               	movf	isdigit@c,w
  7250  1322  3ED0               	addlw	208
  7251  1323  00A2               	movwf	??_isdigit
  7252  1324  30FF               	movlw	255
  7253  1325  3D21               	addwfc	isdigit@c+1,w
  7254  1326  00A3               	movwf	??_isdigit+1
  7255  1327  3000               	movlw	0
  7256  1328  0223               	subwf	??_isdigit+1,w
  7257  1329  300A               	movlw	10
  7258  132A  1903               	skipnz
  7259  132B  0222               	subwf	??_isdigit,w
  7260  132C  1C03               	skipc
  7261  132D  2B2F               	goto	u4391
  7262  132E  2B31               	goto	u4390
  7263  132F                     u4391:	
  7264  132F  3001               	movlw	1
  7265  1330  2B32               	goto	u4400
  7266  1331                     u4390:	
  7267  1331  3000               	movlw	0
  7268  1332                     u4400:	
  7269  1332  00A4               	movwf	??_isdigit+2
  7270  1333  01A5               	clrf	??_isdigit+3
  7271  1334  0824               	movf	??_isdigit+2,w
  7272  1335  00A0               	movwf	?_isdigit
  7273  1336  0825               	movf	??_isdigit+3,w
  7274  1337  00A1               	movwf	?_isdigit+1
  7275  1338                     l2015:	
  7276  1338  0008               	return
  7277  1339                     __end_of_isdigit:	
  7278                           
  7279                           	psect	text12
  7280  153C                     __ptext12:	
  7281 ;; *************** function ___wmul *****************
  7282 ;; Defined at:
  7283 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7286 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  product         2    4[BANK0 ] unsigned int 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  2    0[BANK0 ] unsigned int 
  7291 ;; Registers used:
  7292 ;;		wreg, status,2, status,0
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7298 ;;      Params:         0       4       0       0       0       0       0       0
  7299 ;;      Locals:         0       2       0       0       0       0       0       0
  7300 ;;      Temps:          0       0       0       0       0       0       0       0
  7301 ;;      Totals:         0       6       0       0       0       0       0       0
  7302 ;;Total ram usage:        6 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    5
  7305 ;; This function calls:
  7306 ;;		Nothing
  7307 ;; This function is called by:
  7308 ;;		_atoi
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function ___wmul
  7314  153C                     ___wmul:	
  7315  153C                     l7059:	
  7316                           ;incstack = 0
  7317                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7318                           
  7319  153C  0020               	movlb	0	; select bank0
  7320  153D  01A4               	clrf	___wmul@product
  7321  153E  01A5               	clrf	___wmul@product+1
  7322  153F                     l7061:	
  7323  153F  1C20               	btfss	___wmul@multiplier,0
  7324  1540  2D42               	goto	u6701
  7325  1541  2D43               	goto	u6700
  7326  1542                     u6701:	
  7327  1542  2D47               	goto	l1524
  7328  1543                     u6700:	
  7329  1543                     l7063:	
  7330  1543  0822               	movf	___wmul@multiplicand,w
  7331  1544  07A4               	addwf	___wmul@product,f
  7332  1545  0823               	movf	___wmul@multiplicand+1,w
  7333  1546  3DA5               	addwfc	___wmul@product+1,f
  7334  1547                     l1524:	
  7335  1547  3001               	movlw	1
  7336  1548                     u6715:	
  7337  1548  35A2               	lslf	___wmul@multiplicand,f
  7338  1549  0DA3               	rlf	___wmul@multiplicand+1,f
  7339  154A  0B89               	decfsz	9,f
  7340  154B  2D48               	goto	u6715
  7341  154C                     l7065:	
  7342  154C  3001               	movlw	1
  7343  154D                     u6725:	
  7344  154D  36A1               	lsrf	___wmul@multiplier+1,f
  7345  154E  0CA0               	rrf	___wmul@multiplier,f
  7346  154F  0B89               	decfsz	9,f
  7347  1550  2D4D               	goto	u6725
  7348  1551                     l7067:	
  7349  1551  0820               	movf	___wmul@multiplier,w
  7350  1552  0421               	iorwf	___wmul@multiplier+1,w
  7351  1553  1D03               	btfss	3,2
  7352  1554  2D56               	goto	u6731
  7353  1555  2D57               	goto	u6730
  7354  1556                     u6731:	
  7355  1556  2D3F               	goto	l7061
  7356  1557                     u6730:	
  7357  1557                     l7069:	
  7358  1557  0825               	movf	___wmul@product+1,w
  7359  1558  00A1               	movwf	?___wmul+1
  7360  1559  0824               	movf	___wmul@product,w
  7361  155A  00A0               	movwf	?___wmul
  7362  155B                     l1526:	
  7363  155B  0008               	return
  7364  155C                     __end_of___wmul:	
  7365                           
  7366                           	psect	text13
  7367  1307                     __ptext13:	
  7368 ;; *************** function _SYSTEM_Initialize *****************
  7369 ;; Defined at:
  7370 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;		None
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;		None
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      void 
  7377 ;; Registers used:
  7378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7384 ;;      Params:         0       0       0       0       0       0       0       0
  7385 ;;      Locals:         0       0       0       0       0       0       0       0
  7386 ;;      Temps:          0       0       0       0       0       0       0       0
  7387 ;;      Totals:         0       0       0       0       0       0       0       0
  7388 ;;Total ram usage:        0 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:   10
  7391 ;; This function calls:
  7392 ;;		_EUSART_Initialize
  7393 ;;		_EXT_INT_Initialize
  7394 ;;		_MTOUCH_Initialize
  7395 ;;		_OSCILLATOR_Initialize
  7396 ;;		_PIN_MANAGER_Initialize
  7397 ;;		_TMR0_Initialize
  7398 ;;		_TMR2_Initialize
  7399 ;;		_WDT_Initialize
  7400 ;; This function is called by:
  7401 ;;		_main
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           
  7406                           ;psect for function _SYSTEM_Initialize
  7407  1307                     _SYSTEM_Initialize:	
  7408  1307                     l7117:	
  7409                           ;incstack = 0
  7410                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7411                           
  7412                           
  7413                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  7414  1307  3194  240C  3193   	fcall	_PIN_MANAGER_Initialize
  7415                           
  7416                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  7417  130A  3190  20EB  3193   	fcall	_OSCILLATOR_Initialize
  7418                           
  7419                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  7420  130D  3190  20DD  3193   	fcall	_WDT_Initialize
  7421                           
  7422                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  7423  1310  3191  2104  3193   	fcall	_TMR2_Initialize
  7424                           
  7425                           ;mcc_generated_files/mcc.c: 57:     EXT_INT_Initialize();
  7426  1313  3191  21AB  3193   	fcall	_EXT_INT_Initialize
  7427                           
  7428                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
  7429  1316  3188  2000  3193   	fcall	_TMR0_Initialize
  7430                           
  7431                           ;mcc_generated_files/mcc.c: 59:     EUSART_Initialize();
  7432  1319  3188  20A2  3193   	fcall	_EUSART_Initialize
  7433  131C                     l7119:	
  7434                           
  7435                           ;mcc_generated_files/mcc.c: 60:     MTOUCH_Initialize();
  7436  131C  3191  21B8  3193   	fcall	_MTOUCH_Initialize
  7437  131F                     l948:	
  7438  131F  0008               	return
  7439  1320                     __end_of_SYSTEM_Initialize:	
  7440                           
  7441                           	psect	text14
  7442  10DD                     __ptext14:	
  7443 ;; *************** function _WDT_Initialize *****************
  7444 ;; Defined at:
  7445 ;;		line 71 in file "mcc_generated_files/mcc.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;		None
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;		None
  7450 ;; Return value:  Size  Location     Type
  7451 ;;                  1    wreg      void 
  7452 ;; Registers used:
  7453 ;;		wreg
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7459 ;;      Params:         0       0       0       0       0       0       0       0
  7460 ;;      Locals:         0       0       0       0       0       0       0       0
  7461 ;;      Temps:          0       0       0       0       0       0       0       0
  7462 ;;      Totals:         0       0       0       0       0       0       0       0
  7463 ;;Total ram usage:        0 bytes
  7464 ;; Hardware stack levels used:    1
  7465 ;; Hardware stack levels required when called:    5
  7466 ;; This function calls:
  7467 ;;		Nothing
  7468 ;; This function is called by:
  7469 ;;		_SYSTEM_Initialize
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           
  7474                           ;psect for function _WDT_Initialize
  7475  10DD                     _WDT_Initialize:	
  7476  10DD                     l7043:	
  7477                           ;incstack = 0
  7478                           ; Regs used in _WDT_Initialize: [wreg]
  7479                           
  7480                           
  7481                           ;mcc_generated_files/mcc.c: 74:     WDTCON = 0x19;
  7482  10DD  3019               	movlw	25
  7483  10DE  0021               	movlb	1	; select bank1
  7484  10DF  0097               	movwf	23	;volatile
  7485  10E0                     l954:	
  7486  10E0  0008               	return
  7487  10E1                     __end_of_WDT_Initialize:	
  7488                           
  7489                           	psect	text15
  7490  1104                     __ptext15:	
  7491 ;; *************** function _TMR2_Initialize *****************
  7492 ;; Defined at:
  7493 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      void 
  7500 ;; Registers used:
  7501 ;;		wreg, status,2
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7507 ;;      Params:         0       0       0       0       0       0       0       0
  7508 ;;      Locals:         0       0       0       0       0       0       0       0
  7509 ;;      Temps:          0       0       0       0       0       0       0       0
  7510 ;;      Totals:         0       0       0       0       0       0       0       0
  7511 ;;Total ram usage:        0 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    5
  7514 ;; This function calls:
  7515 ;;		Nothing
  7516 ;; This function is called by:
  7517 ;;		_SYSTEM_Initialize
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           
  7522                           ;psect for function _TMR2_Initialize
  7523  1104                     _TMR2_Initialize:	
  7524  1104                     l7005:	
  7525                           ;incstack = 0
  7526                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  7527                           
  7528                           
  7529                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  7530  1104  30FF               	movlw	255
  7531  1105  0020               	movlb	0	; select bank0
  7532  1106  009B               	movwf	27	;volatile
  7533  1107                     l7007:	
  7534                           
  7535                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  7536  1107  019A               	clrf	26	;volatile
  7537  1108                     l7009:	
  7538                           
  7539                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  7540  1108  1091               	bcf	17,1	;volatile
  7541  1109                     l7011:	
  7542                           
  7543                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  7544  1109  3004               	movlw	4
  7545  110A  009C               	movwf	28	;volatile
  7546  110B                     l799:	
  7547  110B  0008               	return
  7548  110C                     __end_of_TMR2_Initialize:	
  7549                           
  7550                           	psect	text16
  7551  0800                     __ptext16:	
  7552 ;; *************** function _TMR0_Initialize *****************
  7553 ;; Defined at:
  7554 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;		None
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0, pclath, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7568 ;;      Params:         0       0       0       0       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0       0       0       0
  7570 ;;      Temps:          0       1       0       0       0       0       0       0
  7571 ;;      Totals:         0       1       0       0       0       0       0       0
  7572 ;;Total ram usage:        1 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    6
  7575 ;; This function calls:
  7576 ;;		_TMR0_SetInterruptHandler
  7577 ;; This function is called by:
  7578 ;;		_SYSTEM_Initialize
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _TMR0_Initialize
  7584  0800                     _TMR0_Initialize:	
  7585  0800                     l7045:	
  7586                           ;incstack = 0
  7587                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7588                           
  7589                           
  7590                           ;mcc_generated_files/tmr0.c: 71:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD7 
      +                          & 0x3F));
  7591  0800  0021               	movlb	1	; select bank1
  7592  0801  0815               	movf	21,w	;volatile
  7593  0802  39C0               	andlw	192
  7594  0803  3817               	iorlw	23
  7595  0804  0095               	movwf	21	;volatile
  7596  0805                     l7047:	
  7597                           
  7598                           ;mcc_generated_files/tmr0.c: 74:     TMR0 = 0xF0;
  7599  0805  30F0               	movlw	240
  7600  0806  0020               	movlb	0	; select bank0
  7601  0807  0095               	movwf	21	;volatile
  7602  0808                     l7049:	
  7603                           
  7604                           ;mcc_generated_files/tmr0.c: 77:     timer0ReloadVal= 240;
  7605  0808  30F0               	movlw	240
  7606  0809  00A2               	movwf	??_TMR0_Initialize
  7607  080A  0822               	movf	??_TMR0_Initialize,w
  7608  080B  0021               	movlb	1	; select bank1
  7609  080C  00E2               	movwf	_timer0ReloadVal^(0+128)	;volatile
  7610  080D                     l7051:	
  7611                           
  7612                           ;mcc_generated_files/tmr0.c: 80:     INTCONbits.TMR0IF = 0;
  7613  080D  110B               	bcf	11,2	;volatile
  7614  080E                     l7053:	
  7615                           
  7616                           ;mcc_generated_files/tmr0.c: 83:     INTCONbits.TMR0IE = 1;
  7617  080E  168B               	bsf	11,5	;volatile
  7618  080F                     l7055:	
  7619                           
  7620                           ;mcc_generated_files/tmr0.c: 86:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  7621  080F  30AF               	movlw	low _TMR0_DefaultInterruptHandler
  7622  0810  0020               	movlb	0	; select bank0
  7623  0811  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7624  0812  3010               	movlw	high _TMR0_DefaultInterruptHandler
  7625  0813  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7626  0814  3191  2181  3188   	fcall	_TMR0_SetInterruptHandler
  7627  0817                     l1019:	
  7628  0817  0008               	return
  7629  0818                     __end_of_TMR0_Initialize:	
  7630                           
  7631                           	psect	text17
  7632  1181                     __ptext17:	
  7633 ;; *************** function _TMR0_SetInterruptHandler *****************
  7634 ;; Defined at:
  7635 ;;		line 154 in file "mcc_generated_files/tmr0.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  7638 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;		None
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      void 
  7643 ;; Registers used:
  7644 ;;		wreg
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7650 ;;      Params:         0       2       0       0       0       0       0       0
  7651 ;;      Locals:         0       0       0       0       0       0       0       0
  7652 ;;      Temps:          0       0       0       0       0       0       0       0
  7653 ;;      Totals:         0       2       0       0       0       0       0       0
  7654 ;;Total ram usage:        2 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    5
  7657 ;; This function calls:
  7658 ;;		Nothing
  7659 ;; This function is called by:
  7660 ;;		_TMR0_Initialize
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _TMR0_SetInterruptHandler
  7666  1181                     _TMR0_SetInterruptHandler:	
  7667  1181                     l6923:	
  7668                           ;incstack = 0
  7669                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  7670                           
  7671                           
  7672                           ;mcc_generated_files/tmr0.c: 155:     TMR0_InterruptHandler = InterruptHandler;
  7673  1181  0020               	movlb	0	; select bank0
  7674  1182  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  7675  1183  0021               	movlb	1	; select bank1
  7676  1184  00D9               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  7677  1185  0020               	movlb	0	; select bank0
  7678  1186  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  7679  1187  0021               	movlb	1	; select bank1
  7680  1188  00D8               	movwf	_TMR0_InterruptHandler^(0+128)
  7681  1189                     l1050:	
  7682  1189  0008               	return
  7683  118A                     __end_of_TMR0_SetInterruptHandler:	
  7684                           
  7685                           	psect	text18
  7686  140C                     __ptext18:	
  7687 ;; *************** function _PIN_MANAGER_Initialize *****************
  7688 ;; Defined at:
  7689 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;		None
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;		None
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      void 
  7696 ;; Registers used:
  7697 ;;		wreg, status,2
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7703 ;;      Params:         0       0       0       0       0       0       0       0
  7704 ;;      Locals:         0       0       0       0       0       0       0       0
  7705 ;;      Temps:          0       0       0       0       0       0       0       0
  7706 ;;      Totals:         0       0       0       0       0       0       0       0
  7707 ;;Total ram usage:        0 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    5
  7710 ;; This function calls:
  7711 ;;		Nothing
  7712 ;; This function is called by:
  7713 ;;		_SYSTEM_Initialize
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           
  7718                           ;psect for function _PIN_MANAGER_Initialize
  7719  140C                     _PIN_MANAGER_Initialize:	
  7720  140C                     l7019:	
  7721                           ;incstack = 0
  7722                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7723                           
  7724                           
  7725                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x30;
  7726  140C  3030               	movlw	48
  7727  140D  0022               	movlb	2	; select bank2
  7728  140E  008C               	movwf	12	;volatile
  7729  140F                     l7021:	
  7730                           
  7731                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  7732  140F  018D               	clrf	13	;volatile
  7733  1410                     l7023:	
  7734                           
  7735                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x40;
  7736  1410  3040               	movlw	64
  7737  1411  008E               	movwf	14	;volatile
  7738  1412                     l7025:	
  7739                           
  7740                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x0F;
  7741  1412  300F               	movlw	15
  7742  1413  0021               	movlb	1	; select bank1
  7743  1414  008C               	movwf	12	;volatile
  7744  1415                     l7027:	
  7745                           
  7746                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  7747  1415  3060               	movlw	96
  7748  1416  008D               	movwf	13	;volatile
  7749  1417                     l7029:	
  7750                           
  7751                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x13;
  7752  1417  3013               	movlw	19
  7753  1418  008E               	movwf	14	;volatile
  7754  1419                     l7031:	
  7755                           
  7756                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xFF;
  7757  1419  30FF               	movlw	255
  7758  141A  0023               	movlb	3	; select bank3
  7759  141B  008E               	movwf	14	;volatile
  7760  141C                     l7033:	
  7761                           
  7762                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  7763  141C  3050               	movlw	80
  7764  141D  008D               	movwf	13	;volatile
  7765  141E                     l7035:	
  7766                           
  7767                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x33;
  7768  141E  3033               	movlw	51
  7769  141F  008C               	movwf	12	;volatile
  7770                           
  7771                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  7772  1420  0024               	movlb	4	; select bank4
  7773  1421  018D               	clrf	13	;volatile
  7774                           
  7775                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  7776  1422  018C               	clrf	12	;volatile
  7777  1423                     l7037:	
  7778                           
  7779                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  7780  1423  0021               	movlb	1	; select bank1
  7781  1424  1795               	bsf	21,7	;volatile
  7782                           
  7783                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  7784  1425  0022               	movlb	2	; select bank2
  7785  1426  019D               	clrf	29	;volatile
  7786  1427                     l983:	
  7787  1427  0008               	return
  7788  1428                     __end_of_PIN_MANAGER_Initialize:	
  7789                           
  7790                           	psect	text19
  7791  10EB                     __ptext19:	
  7792 ;; *************** function _OSCILLATOR_Initialize *****************
  7793 ;; Defined at:
  7794 ;;		line 63 in file "mcc_generated_files/mcc.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;		None
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;		None
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  1    wreg      void 
  7801 ;; Registers used:
  7802 ;;		wreg, status,2
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7808 ;;      Params:         0       0       0       0       0       0       0       0
  7809 ;;      Locals:         0       0       0       0       0       0       0       0
  7810 ;;      Temps:          0       0       0       0       0       0       0       0
  7811 ;;      Totals:         0       0       0       0       0       0       0       0
  7812 ;;Total ram usage:        0 bytes
  7813 ;; Hardware stack levels used:    1
  7814 ;; Hardware stack levels required when called:    5
  7815 ;; This function calls:
  7816 ;;		Nothing
  7817 ;; This function is called by:
  7818 ;;		_SYSTEM_Initialize
  7819 ;; This function uses a non-reentrant model
  7820 ;;
  7821                           
  7822                           
  7823                           ;psect for function _OSCILLATOR_Initialize
  7824  10EB                     _OSCILLATOR_Initialize:	
  7825  10EB                     l7039:	
  7826                           ;incstack = 0
  7827                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7828                           
  7829                           
  7830                           ;mcc_generated_files/mcc.c: 66:     OSCCON = 0xF0;
  7831  10EB  30F0               	movlw	240
  7832  10EC  0021               	movlb	1	; select bank1
  7833  10ED  0099               	movwf	25	;volatile
  7834  10EE                     l7041:	
  7835                           
  7836                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  7837  10EE  0022               	movlb	2	; select bank2
  7838  10EF  0196               	clrf	22	;volatile
  7839  10F0                     l951:	
  7840  10F0  0008               	return
  7841  10F1                     __end_of_OSCILLATOR_Initialize:	
  7842                           
  7843                           	psect	text20
  7844  11B8                     __ptext20:	
  7845 ;; *************** function _MTOUCH_Initialize *****************
  7846 ;; Defined at:
  7847 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;		None
  7850 ;; Auto vars:     Size  Location     Type
  7851 ;;		None
  7852 ;; Return value:  Size  Location     Type
  7853 ;;                  1    wreg      void 
  7854 ;; Registers used:
  7855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7856 ;; Tracked objects:
  7857 ;;		On entry : 0/0
  7858 ;;		On exit  : 0/0
  7859 ;;		Unchanged: 0/0
  7860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7861 ;;      Params:         0       0       0       0       0       0       0       0
  7862 ;;      Locals:         0       0       0       0       0       0       0       0
  7863 ;;      Temps:          0       0       0       0       0       0       0       0
  7864 ;;      Totals:         0       0       0       0       0       0       0       0
  7865 ;;Total ram usage:        0 bytes
  7866 ;; Hardware stack levels used:    1
  7867 ;; Hardware stack levels required when called:    9
  7868 ;; This function calls:
  7869 ;;		_MTOUCH_Button_InitializeAll
  7870 ;;		_MTOUCH_Sensor_InitializeAll
  7871 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7872 ;;		_MTOUCH_Sensor_Scan_Initialize
  7873 ;; This function is called by:
  7874 ;;		_SYSTEM_Initialize
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           
  7879                           ;psect for function _MTOUCH_Initialize
  7880  11B8                     _MTOUCH_Initialize:	
  7881  11B8                     l6925:	
  7882                           ;incstack = 0
  7883                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7884                           
  7885                           
  7886                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  7887  11B8  3192  225A  3191   	fcall	_MTOUCH_Sensor_InitializeAll
  7888  11BB                     l6927:	
  7889                           
  7890                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  7891  11BB  3194  24DD  3191   	fcall	_MTOUCH_Button_InitializeAll
  7892  11BE                     l6929:	
  7893                           
  7894                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  7895  11BE  3195  251C  3191   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7896  11C1                     l6931:	
  7897                           
  7898                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  7899  11C1  3191  21E2  3191   	fcall	_MTOUCH_Sensor_Scan_Initialize
  7900  11C4                     l40:	
  7901  11C4  0008               	return
  7902  11C5                     __end_of_MTOUCH_Initialize:	
  7903                           
  7904                           	psect	text21
  7905  125A                     __ptext21:	
  7906 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  7907 ;; Defined at:
  7908 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;		None
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;  sensor          1    9[BANK0 ] enum E2878
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  1    wreg      void 
  7915 ;; Registers used:
  7916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7922 ;;      Params:         0       0       0       0       0       0       0       0
  7923 ;;      Locals:         0       1       0       0       0       0       0       0
  7924 ;;      Temps:          0       1       0       0       0       0       0       0
  7925 ;;      Totals:         0       2       0       0       0       0       0       0
  7926 ;;Total ram usage:        2 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    8
  7929 ;; This function calls:
  7930 ;;		_MTOUCH_Sensor_Initialize
  7931 ;; This function is called by:
  7932 ;;		_MTOUCH_Initialize
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           
  7937                           ;psect for function _MTOUCH_Sensor_InitializeAll
  7938  125A                     _MTOUCH_Sensor_InitializeAll:	
  7939  125A                     l6835:	
  7940                           ;incstack = 0
  7941                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  7942                           
  7943                           
  7944                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  7945  125A  0020               	movlb	0	; select bank0
  7946  125B  01A9               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  7947  125C                     l6841:	
  7948                           
  7949                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  7950  125C  0829               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  7951  125D  3192  22EE  3192   	fcall	_MTOUCH_Sensor_Initialize
  7952  1260                     l6843:	
  7953                           
  7954                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  7955  1260  3001               	movlw	1
  7956  1261  0020               	movlb	0	; select bank0
  7957  1262  00A8               	movwf	??_MTOUCH_Sensor_InitializeAll
  7958  1263  0828               	movf	??_MTOUCH_Sensor_InitializeAll,w
  7959  1264  07A9               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  7960  1265                     l6845:	
  7961  1265  3003               	movlw	3
  7962  1266  0229               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  7963  1267  1C03               	skipc
  7964  1268  2A6A               	goto	u6561
  7965  1269  2A6B               	goto	u6560
  7966  126A                     u6561:	
  7967  126A  2A5C               	goto	l6841
  7968  126B                     u6560:	
  7969  126B                     l180:	
  7970  126B  0008               	return
  7971  126C                     __end_of_MTOUCH_Sensor_InitializeAll:	
  7972                           
  7973                           	psect	text22
  7974  12EE                     __ptext22:	
  7975 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  7976 ;; Defined at:
  7977 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  sensor          1    wreg     enum E2878
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;  sensor          1    7[BANK0 ] enum E2878
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  1    wreg      enum E2882
  7984 ;; Registers used:
  7985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7991 ;;      Params:         0       0       0       0       0       0       0       0
  7992 ;;      Locals:         0       1       0       0       0       0       0       0
  7993 ;;      Temps:          0       1       0       0       0       0       0       0
  7994 ;;      Totals:         0       2       0       0       0       0       0       0
  7995 ;;Total ram usage:        2 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; Hardware stack levels required when called:    7
  7998 ;; This function calls:
  7999 ;;		_MTOUCH_Sensor_Calibrate
  8000 ;;		_MTOUCH_Sensor_Enable
  8001 ;;		_Sensor_Sampled_Reset
  8002 ;;		___bmul
  8003 ;; This function is called by:
  8004 ;;		_MTOUCH_Sensor_InitializeAll
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           
  8009                           ;psect for function _MTOUCH_Sensor_Initialize
  8010  12EE                     _MTOUCH_Sensor_Initialize:	
  8011                           
  8012                           ;incstack = 0
  8013                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  8014                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  8015  12EE  0020               	movlb	0	; select bank0
  8016  12EF  00A7               	movwf	MTOUCH_Sensor_Initialize@sensor
  8017  12F0                     l6747:	
  8018                           
  8019                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  8020  12F0  0827               	movf	MTOUCH_Sensor_Initialize@sensor,w
  8021  12F1  3192  22C0  3192   	fcall	_MTOUCH_Sensor_Enable
  8022                           
  8023                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  8024  12F4  0020               	movlb	0	; select bank0
  8025  12F5  0827               	movf	MTOUCH_Sensor_Initialize@sensor,w
  8026  12F6  3192  22AA  3192   	fcall	_MTOUCH_Sensor_Calibrate
  8027                           
  8028                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  8029  12F9  3009               	movlw	9
  8030  12FA  0020               	movlb	0	; select bank0
  8031  12FB  00A6               	movwf	??_MTOUCH_Sensor_Initialize
  8032  12FC  0826               	movf	??_MTOUCH_Sensor_Initialize,w
  8033  12FD  00A0               	movwf	___bmul@multiplicand
  8034  12FE  0827               	movf	MTOUCH_Sensor_Initialize@sensor,w
  8035  12FF  3192  2294  3192   	fcall	___bmul
  8036  1302  3E50               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  8037  1303  3191  214B  3192   	fcall	_Sensor_Sampled_Reset
  8038  1306                     l175:	
  8039  1306  0008               	return
  8040  1307                     __end_of_MTOUCH_Sensor_Initialize:	
  8041                           
  8042                           	psect	text23
  8043  12C0                     __ptext23:	
  8044 ;; *************** function _MTOUCH_Sensor_Enable *****************
  8045 ;; Defined at:
  8046 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;  sensor          1    wreg     enum E2878
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;  sensor          1    5[BANK0 ] enum E2878
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      void 
  8053 ;; Registers used:
  8054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8060 ;;      Params:         0       0       0       0       0       0       0       0
  8061 ;;      Locals:         0       1       0       0       0       0       0       0
  8062 ;;      Temps:          0       1       0       0       0       0       0       0
  8063 ;;      Totals:         0       2       0       0       0       0       0       0
  8064 ;;Total ram usage:        2 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:    6
  8067 ;; This function calls:
  8068 ;;		___bmul
  8069 ;; This function is called by:
  8070 ;;		_MTOUCH_Sensor_Initialize
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           
  8075                           ;psect for function _MTOUCH_Sensor_Enable
  8076  12C0                     _MTOUCH_Sensor_Enable:	
  8077                           
  8078                           ;incstack = 0
  8079                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8080                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  8081  12C0  0020               	movlb	0	; select bank0
  8082  12C1  00A5               	movwf	MTOUCH_Sensor_Enable@sensor
  8083  12C2                     l4693:	
  8084                           
  8085                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  8086  12C2  3003               	movlw	3
  8087  12C3  0225               	subwf	MTOUCH_Sensor_Enable@sensor,w
  8088  12C4  1803               	skipnc
  8089  12C5  2AC7               	goto	u3591
  8090  12C6  2AC8               	goto	u3590
  8091  12C7                     u3591:	
  8092  12C7  2AD5               	goto	l360
  8093  12C8                     u3590:	
  8094  12C8                     l4695:	
  8095                           
  8096                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  8097  12C8  3009               	movlw	9
  8098  12C9  00A4               	movwf	??_MTOUCH_Sensor_Enable
  8099  12CA  0824               	movf	??_MTOUCH_Sensor_Enable,w
  8100  12CB  00A0               	movwf	___bmul@multiplicand
  8101  12CC  0825               	movf	MTOUCH_Sensor_Enable@sensor,w
  8102  12CD  3192  2294  3192   	fcall	___bmul
  8103  12D0  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  8104  12D1  0086               	movwf	6
  8105  12D2  3001               	movlw	1	; select bank2/3
  8106  12D3  0087               	movwf	7
  8107  12D4  1581               	bsf	1,3
  8108  12D5                     l360:	
  8109  12D5  0008               	return
  8110  12D6                     __end_of_MTOUCH_Sensor_Enable:	
  8111                           
  8112                           	psect	text24
  8113  14DD                     __ptext24:	
  8114 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  8115 ;; Defined at:
  8116 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;		None
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  button          1   11[BANK0 ] enum E3069
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      void 
  8123 ;; Registers used:
  8124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8130 ;;      Params:         0       0       0       0       0       0       0       0
  8131 ;;      Locals:         0       1       0       0       0       0       0       0
  8132 ;;      Temps:          0       1       0       0       0       0       0       0
  8133 ;;      Totals:         0       2       0       0       0       0       0       0
  8134 ;;Total ram usage:        2 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    8
  8137 ;; This function calls:
  8138 ;;		_MTOUCH_Button_Initialize
  8139 ;;		_memcpy
  8140 ;; This function is called by:
  8141 ;;		_MTOUCH_Initialize
  8142 ;;		_main
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           
  8147                           ;psect for function _MTOUCH_Button_InitializeAll
  8148  14DD                     _MTOUCH_Button_InitializeAll:	
  8149  14DD                     l4983:	
  8150                           ;incstack = 0
  8151                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8152                           
  8153                           
  8154                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  8155  14DD  3000               	movlw	low (_mtouch_button_init| (0+32768))
  8156  14DE  0020               	movlb	0	; select bank0
  8157  14DF  00A0               	movwf	memcpy@s1
  8158  14E0  3098               	movlw	high (_mtouch_button_init| (0+32768))
  8159  14E1  00A1               	movwf	memcpy@s1+1
  8160  14E2  3030               	movlw	48
  8161  14E3  00A2               	movwf	memcpy@n
  8162  14E4  3000               	movlw	0
  8163  14E5  00A3               	movwf	memcpy@n+1
  8164  14E6  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  8165  14E7  3196  26EC  3194   	fcall	_memcpy
  8166  14EA                     l4985:	
  8167                           
  8168                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  8169  14EA  0020               	movlb	0	; select bank0
  8170  14EB  01AB               	clrf	MTOUCH_Button_InitializeAll@button
  8171  14EC                     l4991:	
  8172                           
  8173                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  8174  14EC  082B               	movf	MTOUCH_Button_InitializeAll@button,w
  8175  14ED  3197  2751  3194   	fcall	_MTOUCH_Button_Initialize
  8176  14F0                     l4993:	
  8177                           
  8178                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  8179  14F0  3001               	movlw	1
  8180  14F1  0020               	movlb	0	; select bank0
  8181  14F2  00AA               	movwf	??_MTOUCH_Button_InitializeAll
  8182  14F3  082A               	movf	??_MTOUCH_Button_InitializeAll,w
  8183  14F4  07AB               	addwf	MTOUCH_Button_InitializeAll@button,f
  8184  14F5                     l4995:	
  8185  14F5  3003               	movlw	3
  8186  14F6  022B               	subwf	MTOUCH_Button_InitializeAll@button,w
  8187  14F7  1C03               	skipc
  8188  14F8  2CFA               	goto	u4061
  8189  14F9  2CFB               	goto	u4060
  8190  14FA                     u4061:	
  8191  14FA  2CEC               	goto	l4991
  8192  14FB                     u4060:	
  8193  14FB                     l501:	
  8194  14FB  0008               	return
  8195  14FC                     __end_of_MTOUCH_Button_InitializeAll:	
  8196                           
  8197                           	psect	text25
  8198  16EC                     __ptext25:	
  8199 ;; *************** function _memcpy *****************
  8200 ;; Defined at:
  8201 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  d1              1    wreg     PTR void 
  8204 ;;		 -> mtouch_button(48), 
  8205 ;;  s1              2    0[BANK0 ] PTR const void 
  8206 ;;		 -> mtouch_button_init(48), 
  8207 ;;  n               2    2[BANK0 ] unsigned int 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  d1              1    8[BANK0 ] PTR void 
  8210 ;;		 -> mtouch_button(48), 
  8211 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  8212 ;;		 -> mtouch_button_init(48), 
  8213 ;;  d               1    9[BANK0 ] PTR unsigned char 
  8214 ;;		 -> mtouch_button(48), 
  8215 ;;  tmp             1    7[BANK0 ] unsigned char 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  1    wreg      PTR void 
  8218 ;; Registers used:
  8219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8225 ;;      Params:         0       4       0       0       0       0       0       0
  8226 ;;      Locals:         0       5       0       0       0       0       0       0
  8227 ;;      Temps:          0       1       0       0       0       0       0       0
  8228 ;;      Totals:         0      10       0       0       0       0       0       0
  8229 ;;Total ram usage:       10 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    5
  8232 ;; This function calls:
  8233 ;;		Nothing
  8234 ;; This function is called by:
  8235 ;;		_MTOUCH_Button_InitializeAll
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _memcpy
  8241  16EC                     _memcpy:	
  8242                           
  8243                           ;incstack = 0
  8244                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  8245                           ;memcpy@d1 stored from wreg
  8246  16EC  0020               	movlb	0	; select bank0
  8247  16ED  00A8               	movwf	memcpy@d1
  8248  16EE                     l4879:	
  8249  16EE  0821               	movf	memcpy@s1+1,w
  8250  16EF  00A6               	movwf	memcpy@s+1
  8251  16F0  0820               	movf	memcpy@s1,w
  8252  16F1  00A5               	movwf	memcpy@s
  8253  16F2  0828               	movf	memcpy@d1,w
  8254  16F3  00A4               	movwf	??_memcpy
  8255  16F4  0824               	movf	??_memcpy,w
  8256  16F5  00A9               	movwf	memcpy@d
  8257  16F6  2F0F               	goto	l4889
  8258  16F7                     l4881:	
  8259  16F7  0825               	movf	memcpy@s,w
  8260  16F8  0084               	movwf	4
  8261  16F9  0826               	movf	memcpy@s+1,w
  8262  16FA  0085               	movwf	5
  8263  16FB  0800               	movf	0,w	;code access
  8264  16FC  00A4               	movwf	??_memcpy
  8265  16FD  0824               	movf	??_memcpy,w
  8266  16FE  00A7               	movwf	memcpy@tmp
  8267  16FF                     l4883:	
  8268  16FF  3001               	movlw	1
  8269  1700  07A5               	addwf	memcpy@s,f
  8270  1701  3000               	movlw	0
  8271  1702  3DA6               	addwfc	memcpy@s+1,f
  8272  1703                     l4885:	
  8273  1703  0827               	movf	memcpy@tmp,w
  8274  1704  00A4               	movwf	??_memcpy
  8275  1705  0829               	movf	memcpy@d,w
  8276  1706  0086               	movwf	6
  8277  1707  3001               	movlw	1	; select bank2/3
  8278  1708  0087               	movwf	7
  8279  1709  0824               	movf	??_memcpy,w
  8280  170A  0081               	movwf	1
  8281  170B                     l4887:	
  8282  170B  3001               	movlw	1
  8283  170C  00A4               	movwf	??_memcpy
  8284  170D  0824               	movf	??_memcpy,w
  8285  170E  07A9               	addwf	memcpy@d,f
  8286  170F                     l4889:	
  8287  170F  3001               	movlw	1
  8288  1710  02A2               	subwf	memcpy@n,f
  8289  1711  3000               	movlw	0
  8290  1712  3BA3               	subwfb	memcpy@n+1,f
  8291  1713  0A22               	incf	memcpy@n,w
  8292  1714  1D03               	skipz
  8293  1715  2F1A               	goto	u3871
  8294  1716  0A23               	incf	memcpy@n+1,w
  8295  1717  1D03               	btfss	3,2
  8296  1718  2F1A               	goto	u3871
  8297  1719  2F1B               	goto	u3870
  8298  171A                     u3871:	
  8299  171A  2EF7               	goto	l4881
  8300  171B                     u3870:	
  8301  171B                     l2032:	
  8302  171B  0008               	return
  8303  171C                     __end_of_memcpy:	
  8304                           
  8305                           	psect	text26
  8306  11AB                     __ptext26:	
  8307 ;; *************** function _EXT_INT_Initialize *****************
  8308 ;; Defined at:
  8309 ;;		line 78 in file "mcc_generated_files/ext_int.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;		None
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;		None
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  1    wreg      void 
  8316 ;; Registers used:
  8317 ;;		wreg, status,2, status,0, pclath, cstack
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8323 ;;      Params:         0       0       0       0       0       0       0       0
  8324 ;;      Locals:         0       0       0       0       0       0       0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0       0
  8326 ;;      Totals:         0       0       0       0       0       0       0       0
  8327 ;;Total ram usage:        0 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    6
  8330 ;; This function calls:
  8331 ;;		_INT_SetInterruptHandler
  8332 ;; This function is called by:
  8333 ;;		_SYSTEM_Initialize
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           
  8338                           ;psect for function _EXT_INT_Initialize
  8339  11AB                     _EXT_INT_Initialize:	
  8340  11AB                     l7013:	
  8341                           ;incstack = 0
  8342                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8343                           
  8344                           
  8345                           ;mcc_generated_files/ext_int.c: 83:     (INTCONbits.INTF = 0);
  8346  11AB  108B               	bcf	11,1	;volatile
  8347                           
  8348                           ;mcc_generated_files/ext_int.c: 84:     (OPTION_REGbits.INTEDG = 0);
  8349  11AC  0021               	movlb	1	; select bank1
  8350  11AD  1315               	bcf	21,6	;volatile
  8351  11AE                     l7015:	
  8352                           
  8353                           ;mcc_generated_files/ext_int.c: 86:     INT_SetInterruptHandler(INT_DefaultInterruptHand
      +                          ler);
  8354  11AE  30AD               	movlw	low _INT_DefaultInterruptHandler
  8355  11AF  0020               	movlb	0	; select bank0
  8356  11B0  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
  8357  11B1  3010               	movlw	high _INT_DefaultInterruptHandler
  8358  11B2  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  8359  11B3  3191  2178  3191   	fcall	_INT_SetInterruptHandler
  8360  11B6                     l7017:	
  8361                           
  8362                           ;mcc_generated_files/ext_int.c: 87:     (INTCONbits.INTE = 1);
  8363  11B6  160B               	bsf	11,4	;volatile
  8364  11B7                     l890:	
  8365  11B7  0008               	return
  8366  11B8                     __end_of_EXT_INT_Initialize:	
  8367                           
  8368                           	psect	text27
  8369  1178                     __ptext27:	
  8370 ;; *************** function _INT_SetInterruptHandler *****************
  8371 ;; Defined at:
  8372 ;;		line 69 in file "mcc_generated_files/ext_int.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  8375 ;;		 -> INT_DefaultInterruptHandler(1), 
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;		None
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  1    wreg      void 
  8380 ;; Registers used:
  8381 ;;		wreg
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8387 ;;      Params:         0       2       0       0       0       0       0       0
  8388 ;;      Locals:         0       0       0       0       0       0       0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0
  8390 ;;      Totals:         0       2       0       0       0       0       0       0
  8391 ;;Total ram usage:        2 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    5
  8394 ;; This function calls:
  8395 ;;		Nothing
  8396 ;; This function is called by:
  8397 ;;		_EXT_INT_Initialize
  8398 ;; This function uses a non-reentrant model
  8399 ;;
  8400                           
  8401                           
  8402                           ;psect for function _INT_SetInterruptHandler
  8403  1178                     _INT_SetInterruptHandler:	
  8404  1178                     l6921:	
  8405                           ;incstack = 0
  8406                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  8407                           
  8408                           
  8409                           ;mcc_generated_files/ext_int.c: 70:     INT_InterruptHandler = InterruptHandler;
  8410  1178  0020               	movlb	0	; select bank0
  8411  1179  0821               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  8412  117A  0021               	movlb	1	; select bank1
  8413  117B  00DB               	movwf	(_INT_InterruptHandler+1)^(0+128)
  8414  117C  0020               	movlb	0	; select bank0
  8415  117D  0820               	movf	INT_SetInterruptHandler@InterruptHandler,w
  8416  117E  0021               	movlb	1	; select bank1
  8417  117F  00DA               	movwf	_INT_InterruptHandler^(0+128)
  8418  1180                     l884:	
  8419  1180  0008               	return
  8420  1181                     __end_of_INT_SetInterruptHandler:	
  8421                           
  8422                           	psect	text28
  8423  08A2                     __ptext28:	
  8424 ;; *************** function _EUSART_Initialize *****************
  8425 ;; Defined at:
  8426 ;;		line 85 in file "mcc_generated_files/eusart.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;		None
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;		None
  8431 ;; Return value:  Size  Location     Type
  8432 ;;                  1    wreg      void 
  8433 ;; Registers used:
  8434 ;;		wreg, status,2, status,0, pclath, cstack
  8435 ;; Tracked objects:
  8436 ;;		On entry : 0/0
  8437 ;;		On exit  : 0/0
  8438 ;;		Unchanged: 0/0
  8439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8440 ;;      Params:         0       0       0       0       0       0       0       0
  8441 ;;      Locals:         0       0       0       0       0       0       0       0
  8442 ;;      Temps:          0       1       0       0       0       0       0       0
  8443 ;;      Totals:         0       1       0       0       0       0       0       0
  8444 ;;Total ram usage:        1 bytes
  8445 ;; Hardware stack levels used:    1
  8446 ;; Hardware stack levels required when called:    6
  8447 ;; This function calls:
  8448 ;;		_EUSART_SetErrorHandler
  8449 ;;		_EUSART_SetFramingErrorHandler
  8450 ;;		_EUSART_SetOverrunErrorHandler
  8451 ;;		_EUSART_SetRxInterruptHandler
  8452 ;;		_EUSART_SetTxInterruptHandler
  8453 ;; This function is called by:
  8454 ;;		_SYSTEM_Initialize
  8455 ;; This function uses a non-reentrant model
  8456 ;;
  8457                           
  8458                           
  8459                           ;psect for function _EUSART_Initialize
  8460  08A2                     _EUSART_Initialize:	
  8461  08A2                     l6973:	
  8462                           ;incstack = 0
  8463                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8464                           
  8465                           
  8466                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  8467  08A2  0021               	movlb	1	; select bank1
  8468  08A3  1291               	bcf	17,5	;volatile
  8469  08A4                     l6975:	
  8470                           
  8471                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  8472  08A4  30C3               	movlw	low _EUSART_Receive_ISR
  8473  08A5  0020               	movlb	0	; select bank0
  8474  08A6  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  8475  08A7  3017               	movlw	high _EUSART_Receive_ISR
  8476  08A8  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  8477  08A9  3191  2115  3188   	fcall	_EUSART_SetRxInterruptHandler
  8478  08AC                     l6977:	
  8479                           
  8480                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  8481  08AC  0021               	movlb	1	; select bank1
  8482  08AD  1211               	bcf	17,4	;volatile
  8483                           
  8484                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  8485  08AE  307E               	movlw	low _EUSART_Transmit_ISR
  8486  08AF  0020               	movlb	0	; select bank0
  8487  08B0  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  8488  08B1  3015               	movlw	high _EUSART_Transmit_ISR
  8489  08B2  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  8490  08B3  3191  216F  3188   	fcall	_EUSART_SetTxInterruptHandler
  8491  08B6                     l6979:	
  8492                           
  8493                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x0A;
  8494  08B6  300A               	movlw	10
  8495  08B7  0023               	movlb	3	; select bank3
  8496  08B8  009F               	movwf	31	;volatile
  8497  08B9                     l6981:	
  8498                           
  8499                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x90;
  8500  08B9  3090               	movlw	144
  8501  08BA  009D               	movwf	29	;volatile
  8502  08BB                     l6983:	
  8503                           
  8504                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  8505  08BB  3024               	movlw	36
  8506  08BC  009E               	movwf	30	;volatile
  8507  08BD                     l6985:	
  8508                           
  8509                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0x44;
  8510  08BD  3044               	movlw	68
  8511  08BE  009B               	movwf	27	;volatile
  8512  08BF                     l6987:	
  8513                           
  8514                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x00;
  8515  08BF  019C               	clrf	28	;volatile
  8516  08C0                     l6989:	
  8517                           
  8518                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  8519  08C0  30AE               	movlw	low _EUSART_DefaultFramingErrorHandler
  8520  08C1  0020               	movlb	0	; select bank0
  8521  08C2  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  8522  08C3  3010               	movlw	high _EUSART_DefaultFramingErrorHandler
  8523  08C4  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  8524  08C5  3191  215D  3188   	fcall	_EUSART_SetFramingErrorHandler
  8525  08C8                     l6991:	
  8526                           
  8527                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  8528  08C8  30D1               	movlw	low _EUSART_DefaultOverrunErrorHandler
  8529  08C9  0020               	movlb	0	; select bank0
  8530  08CA  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  8531  08CB  3010               	movlw	high _EUSART_DefaultOverrunErrorHandler
  8532  08CC  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  8533  08CD  3191  2166  3188   	fcall	_EUSART_SetOverrunErrorHandler
  8534  08D0                     l6993:	
  8535                           
  8536                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  8537  08D0  30CD               	movlw	low _EUSART_DefaultErrorHandler
  8538  08D1  0020               	movlb	0	; select bank0
  8539  08D2  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  8540  08D3  3010               	movlw	high _EUSART_DefaultErrorHandler
  8541  08D4  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  8542  08D5  3191  2154  3188   	fcall	_EUSART_SetErrorHandler
  8543                           
  8544                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  8545  08D8  0021               	movlb	1	; select bank1
  8546  08D9  01CB               	clrf	_eusartRxLastError^(0+128)	;volatile
  8547                           
  8548                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  8549  08DA  0020               	movlb	0	; select bank0
  8550  08DB  01EC               	clrf	_eusartTxHead	;volatile
  8551                           
  8552                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  8553  08DC  01EB               	clrf	_eusartTxTail	;volatile
  8554  08DD                     l6995:	
  8555                           
  8556                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  8557  08DD  3008               	movlw	8
  8558  08DE  00A2               	movwf	??_EUSART_Initialize
  8559  08DF  0822               	movf	??_EUSART_Initialize,w
  8560  08E0  0021               	movlb	1	; select bank1
  8561  08E1  00E3               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  8562  08E2                     l6997:	
  8563                           
  8564                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  8565  08E2  0020               	movlb	0	; select bank0
  8566  08E3  01EA               	clrf	_eusartRxHead	;volatile
  8567  08E4                     l6999:	
  8568                           
  8569                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  8570  08E4  01F5               	clrf	_eusartRxTail	;volatile
  8571  08E5                     l7001:	
  8572                           
  8573                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  8574  08E5  01F4               	clrf	_eusartRxCount	;volatile
  8575  08E6                     l7003:	
  8576                           
  8577                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  8578  08E6  0021               	movlb	1	; select bank1
  8579  08E7  1691               	bsf	17,5	;volatile
  8580  08E8                     l717:	
  8581  08E8  0008               	return
  8582  08E9                     __end_of_EUSART_Initialize:	
  8583                           
  8584                           	psect	text29
  8585  116F                     __ptext29:	
  8586 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  8587 ;; Defined at:
  8588 ;;		line 273 in file "mcc_generated_files/eusart.c"
  8589 ;; Parameters:    Size  Location     Type
  8590 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8591 ;;		 -> EUSART_Transmit_ISR(1), 
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;		None
  8594 ;; Return value:  Size  Location     Type
  8595 ;;                  1    wreg      void 
  8596 ;; Registers used:
  8597 ;;		wreg
  8598 ;; Tracked objects:
  8599 ;;		On entry : 0/0
  8600 ;;		On exit  : 0/0
  8601 ;;		Unchanged: 0/0
  8602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8603 ;;      Params:         0       2       0       0       0       0       0       0
  8604 ;;      Locals:         0       0       0       0       0       0       0       0
  8605 ;;      Temps:          0       0       0       0       0       0       0       0
  8606 ;;      Totals:         0       2       0       0       0       0       0       0
  8607 ;;Total ram usage:        2 bytes
  8608 ;; Hardware stack levels used:    1
  8609 ;; Hardware stack levels required when called:    5
  8610 ;; This function calls:
  8611 ;;		Nothing
  8612 ;; This function is called by:
  8613 ;;		_EUSART_Initialize
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           
  8618                           ;psect for function _EUSART_SetTxInterruptHandler
  8619  116F                     _EUSART_SetTxInterruptHandler:	
  8620  116F                     l6913:	
  8621                           ;incstack = 0
  8622                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  8623                           
  8624                           
  8625                           ;mcc_generated_files/eusart.c: 274:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  8626  116F  0020               	movlb	0	; select bank0
  8627  1170  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  8628  1171  0021               	movlb	1	; select bank1
  8629  1172  00E1               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  8630  1173  0020               	movlb	0	; select bank0
  8631  1174  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  8632  1175  0021               	movlb	1	; select bank1
  8633  1176  00E0               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  8634  1177                     l783:	
  8635  1177  0008               	return
  8636  1178                     __end_of_EUSART_SetTxInterruptHandler:	
  8637                           
  8638                           	psect	text30
  8639  1166                     __ptext30:	
  8640 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  8641 ;; Defined at:
  8642 ;;		line 265 in file "mcc_generated_files/eusart.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8645 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  8646 ;; Auto vars:     Size  Location     Type
  8647 ;;		None
  8648 ;; Return value:  Size  Location     Type
  8649 ;;                  1    wreg      void 
  8650 ;; Registers used:
  8651 ;;		wreg
  8652 ;; Tracked objects:
  8653 ;;		On entry : 0/0
  8654 ;;		On exit  : 0/0
  8655 ;;		Unchanged: 0/0
  8656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8657 ;;      Params:         0       2       0       0       0       0       0       0
  8658 ;;      Locals:         0       0       0       0       0       0       0       0
  8659 ;;      Temps:          0       0       0       0       0       0       0       0
  8660 ;;      Totals:         0       2       0       0       0       0       0       0
  8661 ;;Total ram usage:        2 bytes
  8662 ;; Hardware stack levels used:    1
  8663 ;; Hardware stack levels required when called:    5
  8664 ;; This function calls:
  8665 ;;		Nothing
  8666 ;; This function is called by:
  8667 ;;		_EUSART_Initialize
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671                           
  8672                           ;psect for function _EUSART_SetOverrunErrorHandler
  8673  1166                     _EUSART_SetOverrunErrorHandler:	
  8674  1166                     l6917:	
  8675                           ;incstack = 0
  8676                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  8677                           
  8678                           
  8679                           ;mcc_generated_files/eusart.c: 266:     EUSART_OverrunErrorHandler = interruptHandler;
  8680  1166  0020               	movlb	0	; select bank0
  8681  1167  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  8682  1168  0022               	movlb	2	; select bank2
  8683  1169  00EE               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  8684  116A  0020               	movlb	0	; select bank0
  8685  116B  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  8686  116C  0022               	movlb	2	; select bank2
  8687  116D  00ED               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  8688  116E                     l777:	
  8689  116E  0008               	return
  8690  116F                     __end_of_EUSART_SetOverrunErrorHandler:	
  8691                           
  8692                           	psect	text31
  8693  115D                     __ptext31:	
  8694 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  8695 ;; Defined at:
  8696 ;;		line 261 in file "mcc_generated_files/eusart.c"
  8697 ;; Parameters:    Size  Location     Type
  8698 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8699 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;		None
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8711 ;;      Params:         0       2       0       0       0       0       0       0
  8712 ;;      Locals:         0       0       0       0       0       0       0       0
  8713 ;;      Temps:          0       0       0       0       0       0       0       0
  8714 ;;      Totals:         0       2       0       0       0       0       0       0
  8715 ;;Total ram usage:        2 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    5
  8718 ;; This function calls:
  8719 ;;		Nothing
  8720 ;; This function is called by:
  8721 ;;		_EUSART_Initialize
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function _EUSART_SetFramingErrorHandler
  8727  115D                     _EUSART_SetFramingErrorHandler:	
  8728  115D                     l6915:	
  8729                           ;incstack = 0
  8730                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  8731                           
  8732                           
  8733                           ;mcc_generated_files/eusart.c: 262:     EUSART_FramingErrorHandler = interruptHandler;
  8734  115D  0020               	movlb	0	; select bank0
  8735  115E  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  8736  115F  0021               	movlb	1	; select bank1
  8737  1160  00DD               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  8738  1161  0020               	movlb	0	; select bank0
  8739  1162  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  8740  1163  0021               	movlb	1	; select bank1
  8741  1164  00DC               	movwf	_EUSART_FramingErrorHandler^(0+128)
  8742  1165                     l774:	
  8743  1165  0008               	return
  8744  1166                     __end_of_EUSART_SetFramingErrorHandler:	
  8745                           
  8746                           	psect	text32
  8747  1154                     __ptext32:	
  8748 ;; *************** function _EUSART_SetErrorHandler *****************
  8749 ;; Defined at:
  8750 ;;		line 269 in file "mcc_generated_files/eusart.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8753 ;;		 -> EUSART_DefaultErrorHandler(1), 
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;		None
  8756 ;; Return value:  Size  Location     Type
  8757 ;;                  1    wreg      void 
  8758 ;; Registers used:
  8759 ;;		wreg
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8765 ;;      Params:         0       2       0       0       0       0       0       0
  8766 ;;      Locals:         0       0       0       0       0       0       0       0
  8767 ;;      Temps:          0       0       0       0       0       0       0       0
  8768 ;;      Totals:         0       2       0       0       0       0       0       0
  8769 ;;Total ram usage:        2 bytes
  8770 ;; Hardware stack levels used:    1
  8771 ;; Hardware stack levels required when called:    5
  8772 ;; This function calls:
  8773 ;;		Nothing
  8774 ;; This function is called by:
  8775 ;;		_EUSART_Initialize
  8776 ;; This function uses a non-reentrant model
  8777 ;;
  8778                           
  8779                           
  8780                           ;psect for function _EUSART_SetErrorHandler
  8781  1154                     _EUSART_SetErrorHandler:	
  8782  1154                     l6919:	
  8783                           ;incstack = 0
  8784                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  8785                           
  8786                           
  8787                           ;mcc_generated_files/eusart.c: 270:     EUSART_ErrorHandler = interruptHandler;
  8788  1154  0020               	movlb	0	; select bank0
  8789  1155  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  8790  1156  0022               	movlb	2	; select bank2
  8791  1157  00EC               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  8792  1158  0020               	movlb	0	; select bank0
  8793  1159  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  8794  115A  0022               	movlb	2	; select bank2
  8795  115B  00EB               	movwf	_EUSART_ErrorHandler^(0+256)
  8796  115C                     l780:	
  8797  115C  0008               	return
  8798  115D                     __end_of_EUSART_SetErrorHandler:	
  8799                           
  8800                           	psect	text33
  8801  1280                     __ptext33:	
  8802 ;; *************** function _ReadyReceiveBuffer *****************
  8803 ;; Defined at:
  8804 ;;		line 41 in file "uart.c"
  8805 ;; Parameters:    Size  Location     Type
  8806 ;;		None
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;  position        1    1[BANK0 ] unsigned char 
  8809 ;; Return value:  Size  Location     Type
  8810 ;;                  1    wreg      void 
  8811 ;; Registers used:
  8812 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8813 ;; Tracked objects:
  8814 ;;		On entry : 0/0
  8815 ;;		On exit  : 0/0
  8816 ;;		Unchanged: 0/0
  8817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8818 ;;      Params:         0       0       0       0       0       0       0       0
  8819 ;;      Locals:         0       1       0       0       0       0       0       0
  8820 ;;      Temps:          0       1       0       0       0       0       0       0
  8821 ;;      Totals:         0       2       0       0       0       0       0       0
  8822 ;;Total ram usage:        2 bytes
  8823 ;; Hardware stack levels used:    1
  8824 ;; Hardware stack levels required when called:    5
  8825 ;; This function calls:
  8826 ;;		Nothing
  8827 ;; This function is called by:
  8828 ;;		_main
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           
  8833                           ;psect for function _ReadyReceiveBuffer
  8834  1280                     _ReadyReceiveBuffer:	
  8835  1280                     l5511:	
  8836                           ;incstack = 0
  8837                           ; Regs used in _ReadyReceiveBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  8838                           
  8839                           
  8840                           ;uart.c: 43:     ResponseIndex = 0;
  8841  1280  0020               	movlb	0	; select bank0
  8842  1281  01E0               	clrf	_ResponseIndex
  8843                           
  8844                           ;uart.c: 44:     for (uint8_t position = 0; position < 64; position++)
  8845  1282  01A1               	clrf	ReadyReceiveBuffer@position
  8846  1283                     l5517:	
  8847                           
  8848                           ;uart.c: 45:         ResponseBuffer[position] = 0;
  8849  1283  0821               	movf	ReadyReceiveBuffer@position,w
  8850  1284  3EA0               	addlw	(low (_ResponseBuffer| (0+256)))& (0+255)
  8851  1285  0086               	movwf	6
  8852  1286  3001               	movlw	1	; select bank3/4
  8853  1287  0087               	movwf	7
  8854  1288  0181               	clrf	1
  8855  1289                     l5519:	
  8856  1289  3001               	movlw	1
  8857  128A  00A0               	movwf	??_ReadyReceiveBuffer
  8858  128B  0820               	movf	??_ReadyReceiveBuffer,w
  8859  128C  07A1               	addwf	ReadyReceiveBuffer@position,f
  8860  128D                     l5521:	
  8861  128D  3040               	movlw	64
  8862  128E  0221               	subwf	ReadyReceiveBuffer@position,w
  8863  128F  1C03               	skipc
  8864  1290  2A92               	goto	u4601
  8865  1291  2A93               	goto	u4600
  8866  1292                     u4601:	
  8867  1292  2A83               	goto	l5517
  8868  1293                     u4600:	
  8869  1293                     l1447:	
  8870  1293  0008               	return
  8871  1294                     __end_of_ReadyReceiveBuffer:	
  8872                           
  8873                           	psect	text34
  8874  1462                     __ptext34:	
  8875 ;; *************** function _MTOUCH_Service_Mainloop *****************
  8876 ;; Defined at:
  8877 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;		None
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  1    wreg      _Bool 
  8884 ;; Registers used:
  8885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8891 ;;      Params:         0       0       0       0       0       0       0       0
  8892 ;;      Locals:         0       0       0       0       0       0       0       0
  8893 ;;      Temps:          0       1       0       0       0       0       0       0
  8894 ;;      Totals:         0       1       0       0       0       0       0       0
  8895 ;;Total ram usage:        1 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:   12
  8898 ;; This function calls:
  8899 ;;		_MTOUCH_Button_ServiceAll
  8900 ;;		_MTOUCH_Sensor_SampleAll
  8901 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  8902 ;;		_MTOUCH_Tick
  8903 ;;		_MTOUCH_needReburst
  8904 ;; This function is called by:
  8905 ;;		_main
  8906 ;;		_touch_example
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           
  8911                           ;psect for function _MTOUCH_Service_Mainloop
  8912  1462                     _MTOUCH_Service_Mainloop:	
  8913  1462                     l7085:	
  8914                           ;incstack = 0
  8915                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8916                           
  8917                           
  8918                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  8919  1462  01F6               	clrf	_mtouch_time_toScan
  8920  1463  0AF6               	incf	_mtouch_time_toScan,f
  8921  1464                     l7087:	
  8922  1464                     l7089:	
  8923                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  8924                           
  8925                           
  8926                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  8927  1464  3193  236D  3194   	fcall	_MTOUCH_Sensor_SampleAll
  8928  1467  3A00               	xorlw	0
  8929  1468  1D03               	skipz
  8930  1469  2C6B               	goto	u6761
  8931  146A  2C6C               	goto	u6760
  8932  146B                     u6761:	
  8933  146B  2C6E               	goto	l7095
  8934  146C                     u6760:	
  8935  146C                     l7091:	
  8936                           
  8937                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  8938  146C  3000               	movlw	0
  8939  146D  2C7F               	goto	l45
  8940  146E                     l7095:	
  8941                           
  8942                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  8943  146E  3192  2248  3194   	fcall	_MTOUCH_Button_ServiceAll
  8944  1471                     l7097:	
  8945                           
  8946                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  8947  1471  3180  2002  3194   	fcall	_MTOUCH_needReburst
  8948  1474  0020               	movlb	0	; select bank0
  8949  1475  00D3               	movwf	??_MTOUCH_Service_Mainloop
  8950  1476  0853               	movf	??_MTOUCH_Service_Mainloop,w
  8951  1477  00F6               	movwf	_mtouch_time_toScan
  8952  1478                     l7099:	
  8953                           
  8954                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  8955  1478  3195  251C  3194   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  8956  147B                     l7101:	
  8957                           
  8958                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  8959  147B  3190  20D9  3194   	fcall	_MTOUCH_Tick
  8960  147E                     l7103:	
  8961                           
  8962                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  8963  147E  3001               	movlw	1
  8964  147F                     l45:	
  8965  147F  0008               	return
  8966  1480                     __end_of_MTOUCH_Service_Mainloop:	
  8967                           
  8968                           	psect	text35
  8969  0002                     __ptext35:	
  8970 ;; *************** function _MTOUCH_needReburst *****************
  8971 ;; Defined at:
  8972 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  8973 ;; Parameters:    Size  Location     Type
  8974 ;;		None
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;  needReburst     1    0        _Bool 
  8977 ;; Return value:  Size  Location     Type
  8978 ;;                  1    wreg      _Bool 
  8979 ;; Registers used:
  8980 ;;		wreg, status,2
  8981 ;; Tracked objects:
  8982 ;;		On entry : 0/0
  8983 ;;		On exit  : 0/0
  8984 ;;		Unchanged: 0/0
  8985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8986 ;;      Params:         0       0       0       0       0       0       0       0
  8987 ;;      Locals:         0       1       0       0       0       0       0       0
  8988 ;;      Temps:          0       0       0       0       0       0       0       0
  8989 ;;      Totals:         0       1       0       0       0       0       0       0
  8990 ;;Total ram usage:        1 bytes
  8991 ;; Hardware stack levels used:    1
  8992 ;; Hardware stack levels required when called:    5
  8993 ;; This function calls:
  8994 ;;		Nothing
  8995 ;; This function is called by:
  8996 ;;		_MTOUCH_Service_Mainloop
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           
  9001                           ;psect for function _MTOUCH_needReburst
  9002  0002                     _MTOUCH_needReburst:	
  9003  0002                     l6965:	
  9004                           ;incstack = 0
  9005                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  9006                           
  9007  0002                     l6967:	
  9008                           
  9009                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  9010  0002  3000               	movlw	0
  9011  0003                     l52:	
  9012  0003  0008               	return
  9013  0004                     __end_of_MTOUCH_needReburst:	
  9014                           
  9015                           	psect	text36
  9016  10D9                     __ptext36:	
  9017 ;; *************** function _MTOUCH_Tick *****************
  9018 ;; Defined at:
  9019 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;		None
  9022 ;; Auto vars:     Size  Location     Type
  9023 ;;		None
  9024 ;; Return value:  Size  Location     Type
  9025 ;;                  1    wreg      void 
  9026 ;; Registers used:
  9027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9028 ;; Tracked objects:
  9029 ;;		On entry : 0/0
  9030 ;;		On exit  : 0/0
  9031 ;;		Unchanged: 0/0
  9032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9033 ;;      Params:         0       0       0       0       0       0       0       0
  9034 ;;      Locals:         0       0       0       0       0       0       0       0
  9035 ;;      Temps:          0       0       0       0       0       0       0       0
  9036 ;;      Totals:         0       0       0       0       0       0       0       0
  9037 ;;Total ram usage:        0 bytes
  9038 ;; Hardware stack levels used:    1
  9039 ;; Hardware stack levels required when called:    7
  9040 ;; This function calls:
  9041 ;;		_MTOUCH_Button_Tick
  9042 ;; This function is called by:
  9043 ;;		_MTOUCH_Service_Mainloop
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           
  9048                           ;psect for function _MTOUCH_Tick
  9049  10D9                     _MTOUCH_Tick:	
  9050  10D9                     l6971:	
  9051                           ;incstack = 0
  9052                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9053                           
  9054                           
  9055                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  9056  10D9  3193  2387  3190   	fcall	_MTOUCH_Button_Tick
  9057  10DC                     l49:	
  9058  10DC  0008               	return
  9059  10DD                     __end_of_MTOUCH_Tick:	
  9060                           
  9061                           	psect	text37
  9062  1387                     __ptext37:	
  9063 ;; *************** function _MTOUCH_Button_Tick *****************
  9064 ;; Defined at:
  9065 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;		None
  9068 ;; Auto vars:     Size  Location     Type
  9069 ;;  i               1    4[BANK0 ] unsigned char 
  9070 ;; Return value:  Size  Location     Type
  9071 ;;                  1    wreg      void 
  9072 ;; Registers used:
  9073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9074 ;; Tracked objects:
  9075 ;;		On entry : 0/0
  9076 ;;		On exit  : 0/0
  9077 ;;		Unchanged: 0/0
  9078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9079 ;;      Params:         0       0       0       0       0       0       0       0
  9080 ;;      Locals:         0       1       0       0       0       0       0       0
  9081 ;;      Temps:          0       1       0       0       0       0       0       0
  9082 ;;      Totals:         0       2       0       0       0       0       0       0
  9083 ;;Total ram usage:        2 bytes
  9084 ;; Hardware stack levels used:    1
  9085 ;; Hardware stack levels required when called:    6
  9086 ;; This function calls:
  9087 ;;		_Button_Tick_helper
  9088 ;; This function is called by:
  9089 ;;		_MTOUCH_Tick
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           
  9094                           ;psect for function _MTOUCH_Button_Tick
  9095  1387                     _MTOUCH_Button_Tick:	
  9096  1387                     l5007:	
  9097                           ;incstack = 0
  9098                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9099                           
  9100                           
  9101                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  9102  1387  0020               	movlb	0	; select bank0
  9103  1388  01A4               	clrf	MTOUCH_Button_Tick@i
  9104  1389                     l5013:	
  9105                           
  9106                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  9107  1389  0824               	movf	MTOUCH_Button_Tick@i,w
  9108  138A  00A3               	movwf	??_MTOUCH_Button_Tick
  9109  138B  3003               	movlw	3
  9110  138C                     u4095:	
  9111  138C  35A3               	lslf	??_MTOUCH_Button_Tick,f
  9112  138D  3EFF               	addlw	-1
  9113  138E  1D03               	skipz
  9114  138F  2B8C               	goto	u4095
  9115  1390  3523               	lslf	??_MTOUCH_Button_Tick,w
  9116  1391  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  9117  1392  3196  2691  3193   	fcall	_Button_Tick_helper
  9118  1395                     l5015:	
  9119                           
  9120                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  9121  1395  3001               	movlw	1
  9122  1396  0020               	movlb	0	; select bank0
  9123  1397  00A3               	movwf	??_MTOUCH_Button_Tick
  9124  1398  0823               	movf	??_MTOUCH_Button_Tick,w
  9125  1399  07A4               	addwf	MTOUCH_Button_Tick@i,f
  9126  139A                     l5017:	
  9127  139A  3003               	movlw	3
  9128  139B  0224               	subwf	MTOUCH_Button_Tick@i,w
  9129  139C  1C03               	skipc
  9130  139D  2B9F               	goto	u4101
  9131  139E  2BA0               	goto	u4100
  9132  139F                     u4101:	
  9133  139F  2B89               	goto	l5013
  9134  13A0                     u4100:	
  9135  13A0                     l537:	
  9136  13A0  0008               	return
  9137  13A1                     __end_of_MTOUCH_Button_Tick:	
  9138                           
  9139                           	psect	text38
  9140  1691                     __ptext38:	
  9141 ;; *************** function _Button_Tick_helper *****************
  9142 ;; Defined at:
  9143 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9144 ;; Parameters:    Size  Location     Type
  9145 ;;  button          1    wreg     PTR struct .
  9146 ;;		 -> mtouch_button(48), 
  9147 ;; Auto vars:     Size  Location     Type
  9148 ;;  button          1    2[BANK0 ] PTR struct .
  9149 ;;		 -> mtouch_button(48), 
  9150 ;; Return value:  Size  Location     Type
  9151 ;;                  1    wreg      void 
  9152 ;; Registers used:
  9153 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9154 ;; Tracked objects:
  9155 ;;		On entry : 0/0
  9156 ;;		On exit  : 0/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9159 ;;      Params:         0       0       0       0       0       0       0       0
  9160 ;;      Locals:         0       1       0       0       0       0       0       0
  9161 ;;      Temps:          0       2       0       0       0       0       0       0
  9162 ;;      Totals:         0       3       0       0       0       0       0       0
  9163 ;;Total ram usage:        3 bytes
  9164 ;; Hardware stack levels used:    1
  9165 ;; Hardware stack levels required when called:    5
  9166 ;; This function calls:
  9167 ;;		Nothing
  9168 ;; This function is called by:
  9169 ;;		_MTOUCH_Button_Tick
  9170 ;; This function uses a non-reentrant model
  9171 ;;
  9172                           
  9173                           
  9174                           ;psect for function _Button_Tick_helper
  9175  1691                     _Button_Tick_helper:	
  9176                           
  9177                           ;incstack = 0
  9178                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  9179                           ;Button_Tick_helper@button stored from wreg
  9180  1691  0020               	movlb	0	; select bank0
  9181  1692  00A2               	movwf	Button_Tick_helper@button
  9182  1693                     l4955:	
  9183                           
  9184                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  9185  1693  0822               	movf	Button_Tick_helper@button,w
  9186  1694  3E02               	addlw	2
  9187  1695  0086               	movwf	6
  9188  1696  3001               	movlw	1	; select bank2/3
  9189  1697  0087               	movwf	7
  9190  1698  3002               	movlw	2
  9191  1699  0601               	xorwf	1,w
  9192  169A  1D03               	btfss	3,2
  9193  169B  2E9D               	goto	u4021
  9194  169C  2E9E               	goto	u4020
  9195  169D                     u4021:	
  9196  169D  2EBC               	goto	l542
  9197  169E                     u4020:	
  9198  169E                     l4957:	
  9199                           
  9200                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  9201  169E  0822               	movf	Button_Tick_helper@button,w
  9202  169F  3E0A               	addlw	10
  9203  16A0  0086               	movwf	6
  9204  16A1  3001               	movlw	1	; select bank2/3
  9205  16A2  0087               	movwf	7
  9206  16A3  3001               	movlw	1
  9207  16A4  0781               	addwf	1,f
  9208  16A5  3141               	addfsr 1,1
  9209  16A6  1803               	skipnc
  9210  16A7  0A81               	incf	1,f
  9211                           
  9212                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  9213  16A8  0822               	movf	Button_Tick_helper@button,w
  9214  16A9  3E0A               	addlw	10
  9215  16AA  0086               	movwf	6
  9216  16AB  3001               	movlw	1	; select bank2/3
  9217  16AC  0087               	movwf	7
  9218  16AD  0016               	moviw fsr1++
  9219  16AE  0401               	iorwf	1,w
  9220  16AF  1D03               	btfss	3,2
  9221  16B0  2EB2               	goto	u4031
  9222  16B1  2EB3               	goto	u4030
  9223  16B2                     u4031:	
  9224  16B2  2EBC               	goto	l542
  9225  16B3                     u4030:	
  9226  16B3                     l4959:	
  9227                           
  9228                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  9229  16B3  0822               	movf	Button_Tick_helper@button,w
  9230  16B4  3E0A               	addlw	10
  9231  16B5  0086               	movwf	6
  9232  16B6  3001               	movlw	1	; select bank2/3
  9233  16B7  0087               	movwf	7
  9234  16B8  30FF               	movlw	255
  9235  16B9  3FC0               	movwi [0]fsr1
  9236  16BA  30FF               	movlw	255
  9237  16BB  3FC1               	movwi [1]fsr1
  9238  16BC                     l542:	
  9239  16BC  0008               	return
  9240  16BD                     __end_of_Button_Tick_helper:	
  9241                           
  9242                           	psect	text39
  9243  151C                     __ptext39:	
  9244 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  9245 ;; Defined at:
  9246 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;		None
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;  sensor          1    2[BANK0 ] PTR struct .
  9251 ;;		 -> mtouch_sensor(27), 
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  1    wreg      void 
  9254 ;; Registers used:
  9255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9261 ;;      Params:         0       0       0       0       0       0       0       0
  9262 ;;      Locals:         0       1       0       0       0       0       0       0
  9263 ;;      Temps:          0       1       0       0       0       0       0       0
  9264 ;;      Totals:         0       2       0       0       0       0       0       0
  9265 ;;Total ram usage:        2 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:    6
  9268 ;; This function calls:
  9269 ;;		_Sensor_Sampled_Reset
  9270 ;; This function is called by:
  9271 ;;		_MTOUCH_Initialize
  9272 ;;		_MTOUCH_Service_Mainloop
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           
  9277                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  9278  151C                     _MTOUCH_Sensor_Sampled_ResetAll:	
  9279  151C                     l6847:	
  9280                           ;incstack = 0
  9281                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  9282                           
  9283                           
  9284                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  9285  151C  3050               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  9286  151D  0020               	movlb	0	; select bank0
  9287  151E  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9288  151F  0821               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9289  1520  00A2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  9290  1521  3062               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  9291  1522  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9292  1523  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  9293  1524  0221               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9294  1525  1803               	skipnc
  9295  1526  2D28               	goto	u6571
  9296  1527  2D29               	goto	u6570
  9297  1528                     u6571:	
  9298  1528  2D2A               	goto	l6851
  9299  1529                     u6570:	
  9300  1529  2D3B               	goto	l410
  9301  152A                     l6851:	
  9302                           
  9303                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  9304  152A  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  9305  152B  3191  214B  3195   	fcall	_Sensor_Sampled_Reset
  9306  152E                     l6853:	
  9307                           
  9308                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  9309  152E  3009               	movlw	9
  9310  152F  0020               	movlb	0	; select bank0
  9311  1530  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9312  1531  0821               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9313  1532  07A2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  9314  1533                     l6855:	
  9315  1533  3062               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  9316  1534  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  9317  1535  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  9318  1536  0221               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  9319  1537  1803               	skipnc
  9320  1538  2D3A               	goto	u6581
  9321  1539  2D3B               	goto	u6580
  9322  153A                     u6581:	
  9323  153A  2D2A               	goto	l6851
  9324  153B                     u6580:	
  9325  153B                     l410:	
  9326  153B  0008               	return
  9327  153C                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  9328                           
  9329                           	psect	text40
  9330  114B                     __ptext40:	
  9331 ;; *************** function _Sensor_Sampled_Reset *****************
  9332 ;; Defined at:
  9333 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  sensor          1    wreg     PTR struct .
  9336 ;;		 -> mtouch_sensor(27), 
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;  sensor          1    0[BANK0 ] PTR struct .
  9339 ;;		 -> mtouch_sensor(27), 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  1    wreg      void 
  9342 ;; Registers used:
  9343 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9349 ;;      Params:         0       0       0       0       0       0       0       0
  9350 ;;      Locals:         0       1       0       0       0       0       0       0
  9351 ;;      Temps:          0       0       0       0       0       0       0       0
  9352 ;;      Totals:         0       1       0       0       0       0       0       0
  9353 ;;Total ram usage:        1 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    5
  9356 ;; This function calls:
  9357 ;;		Nothing
  9358 ;; This function is called by:
  9359 ;;		_MTOUCH_Sensor_Initialize
  9360 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _Sensor_Sampled_Reset
  9366  114B                     _Sensor_Sampled_Reset:	
  9367                           
  9368                           ;incstack = 0
  9369                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9370                           ;Sensor_Sampled_Reset@sensor stored from wreg
  9371  114B  0020               	movlb	0	; select bank0
  9372  114C  00A0               	movwf	Sensor_Sampled_Reset@sensor
  9373  114D                     l6675:	
  9374                           
  9375                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  9376  114D  0820               	movf	Sensor_Sampled_Reset@sensor,w
  9377  114E  3E08               	addlw	8
  9378  114F  0086               	movwf	6
  9379  1150  3001               	movlw	1	; select bank2/3
  9380  1151  0087               	movwf	7
  9381  1152  1001               	bcf	1,0
  9382  1153                     l416:	
  9383  1153  0008               	return
  9384  1154                     __end_of_Sensor_Sampled_Reset:	
  9385                           
  9386                           	psect	text41
  9387  136D                     __ptext41:	
  9388 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  9389 ;; Defined at:
  9390 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;		None
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;  group           1   50[BANK0 ] unsigned char 
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      _Bool 
  9397 ;; Registers used:
  9398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9404 ;;      Params:         0       0       0       0       0       0       0       0
  9405 ;;      Locals:         0       1       0       0       0       0       0       0
  9406 ;;      Temps:          0       1       0       0       0       0       0       0
  9407 ;;      Totals:         0       2       0       0       0       0       0       0
  9408 ;;Total ram usage:        2 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:   11
  9411 ;; This function calls:
  9412 ;;		_Sensor_Service
  9413 ;; This function is called by:
  9414 ;;		_MTOUCH_Service_Mainloop
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           
  9419                           ;psect for function _MTOUCH_Sensor_SampleAll
  9420  136D                     _MTOUCH_Sensor_SampleAll:	
  9421  136D                     l6933:	
  9422                           ;incstack = 0
  9423                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9424                           
  9425                           
  9426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  9427  136D  0020               	movlb	0	; select bank0
  9428  136E  01D2               	clrf	MTOUCH_Sensor_SampleAll@group
  9429  136F                     l6939:	
  9430                           
  9431                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  9432  136F  0852               	movf	MTOUCH_Sensor_SampleAll@group,w
  9433  1370  318D  2570  3193   	fcall	_Sensor_Service
  9434  1373  3A00               	xorlw	0
  9435  1374  1903               	skipnz
  9436  1375  2B77               	goto	u6671
  9437  1376  2B78               	goto	u6670
  9438  1377                     u6671:	
  9439  1377  2B7A               	goto	l6945
  9440  1378                     u6670:	
  9441  1378                     l6941:	
  9442                           
  9443                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  9444  1378  3000               	movlw	0
  9445  1379  2B86               	goto	l189
  9446  137A                     l6945:	
  9447                           
  9448                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  9449  137A  3001               	movlw	1
  9450  137B  0020               	movlb	0	; select bank0
  9451  137C  00D1               	movwf	??_MTOUCH_Sensor_SampleAll
  9452  137D  0851               	movf	??_MTOUCH_Sensor_SampleAll,w
  9453  137E  07D2               	addwf	MTOUCH_Sensor_SampleAll@group,f
  9454  137F                     l6947:	
  9455  137F  3002               	movlw	2
  9456  1380  0252               	subwf	MTOUCH_Sensor_SampleAll@group,w
  9457  1381  1C03               	skipc
  9458  1382  2B84               	goto	u6681
  9459  1383  2B85               	goto	u6680
  9460  1384                     u6681:	
  9461  1384  2B6F               	goto	l6939
  9462  1385                     u6680:	
  9463  1385                     l6949:	
  9464                           
  9465                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  9466  1385  3001               	movlw	1
  9467  1386                     l189:	
  9468  1386  0008               	return
  9469  1387                     __end_of_MTOUCH_Sensor_SampleAll:	
  9470                           
  9471                           	psect	text42
  9472  0D70                     __ptext42:	
  9473 ;; *************** function _Sensor_Service *****************
  9474 ;; Defined at:
  9475 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;  scanGroup       1    wreg     unsigned char 
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;  scanGroup       1   45[BANK0 ] unsigned char 
  9480 ;;  sensor_adc2     1   48[BANK0 ] PTR struct .
  9481 ;;		 -> mtouch_sensor(27), 
  9482 ;;  sensor_adc1     1   47[BANK0 ] PTR struct .
  9483 ;;		 -> NULL(0), mtouch_sensor(27), 
  9484 ;;  error           1   46[BANK0 ] enum E2882
  9485 ;; Return value:  Size  Location     Type
  9486 ;;                  1    wreg      enum E2882
  9487 ;; Registers used:
  9488 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9494 ;;      Params:         0       0       0       0       0       0       0       0
  9495 ;;      Locals:         0       4       0       0       0       0       0       0
  9496 ;;      Temps:          0       3       0       0       0       0       0       0
  9497 ;;      Totals:         0       7       0       0       0       0       0       0
  9498 ;;Total ram usage:        7 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:   10
  9501 ;; This function calls:
  9502 ;;		_Sensor_Acquisition
  9503 ;;		_Sensor_DefaultCallback
  9504 ;;		_Sensor_RawSample_Update
  9505 ;;		_Sensor_isEnabled
  9506 ;;		_Sensor_setSampled
  9507 ;; This function is called by:
  9508 ;;		_MTOUCH_Sensor_SampleAll
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           
  9513                           ;psect for function _Sensor_Service
  9514  0D70                     _Sensor_Service:	
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9518                           ;Sensor_Service@scanGroup stored from wreg
  9519  0D70  0020               	movlb	0	; select bank0
  9520  0D71  00CD               	movwf	Sensor_Service@scanGroup
  9521  0D72                     l6857:	
  9522                           
  9523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  9524  0D72  084D               	movf	Sensor_Service@scanGroup,w
  9525  0D73  00CA               	movwf	??_Sensor_Service
  9526  0D74  01CB               	clrf	??_Sensor_Service+1
  9527  0D75  35CA               	lslf	??_Sensor_Service,f
  9528  0D76  0DCB               	rlf	??_Sensor_Service+1,f
  9529  0D77  3072               	movlw	low (_sensor_scan_group| (0+32768))
  9530  0D78  074A               	addwf	??_Sensor_Service,w
  9531  0D79  0084               	movwf	4
  9532  0D7A  3098               	movlw	high (_sensor_scan_group| (0+32768))
  9533  0D7B  3D4B               	addwfc	??_Sensor_Service+1,w
  9534  0D7C  0085               	movwf	5
  9535  0D7D  0800               	movf	0,w	;code access
  9536  0D7E  00CC               	movwf	??_Sensor_Service+2
  9537  0D7F  084C               	movf	??_Sensor_Service+2,w
  9538  0D80  00CF               	movwf	Sensor_Service@sensor_adc1
  9539                           
  9540                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  9541  0D81  084D               	movf	Sensor_Service@scanGroup,w
  9542  0D82  00CA               	movwf	??_Sensor_Service
  9543  0D83  01CB               	clrf	??_Sensor_Service+1
  9544  0D84  35CA               	lslf	??_Sensor_Service,f
  9545  0D85  0DCB               	rlf	??_Sensor_Service+1,f
  9546  0D86  3073               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  9547  0D87  074A               	addwf	??_Sensor_Service,w
  9548  0D88  0084               	movwf	4
  9549  0D89  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  9550  0D8A  3D4B               	addwfc	??_Sensor_Service+1,w
  9551  0D8B  0085               	movwf	5
  9552  0D8C  0800               	movf	0,w	;code access
  9553  0D8D  00CC               	movwf	??_Sensor_Service+2
  9554  0D8E  084C               	movf	??_Sensor_Service+2,w
  9555  0D8F  00D0               	movwf	Sensor_Service@sensor_adc2
  9556  0D90                     l6859:	
  9557                           
  9558                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  9559  0D90  0850               	movf	Sensor_Service@sensor_adc2,w
  9560  0D91  00CA               	movwf	??_Sensor_Service
  9561  0D92  084A               	movf	??_Sensor_Service,w
  9562  0D93  00C6               	movwf	Sensor_Acquisition@sensor_adc2
  9563  0D94  084F               	movf	Sensor_Service@sensor_adc1,w
  9564  0D95  318B  2361  318D   	fcall	_Sensor_Acquisition
  9565  0D98  0020               	movlb	0	; select bank0
  9566  0D99  00CB               	movwf	??_Sensor_Service+1
  9567  0D9A  084B               	movf	??_Sensor_Service+1,w
  9568  0D9B  00CE               	movwf	Sensor_Service@error
  9569                           
  9570                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  9571  0D9C  2DE7               	goto	l6883
  9572  0D9D                     l6861:	
  9573                           
  9574                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  9575  0D9D  084F               	movf	Sensor_Service@sensor_adc1,w
  9576  0D9E  3192  226C  318D   	fcall	_Sensor_isEnabled
  9577  0DA1  3A00               	xorlw	0
  9578  0DA2  1903               	skipnz
  9579  0DA3  2DA5               	goto	u6591
  9580  0DA4  2DA6               	goto	u6590
  9581  0DA5                     u6591:	
  9582  0DA5  2DC1               	goto	l6871
  9583  0DA6                     u6590:	
  9584  0DA6                     l6863:	
  9585                           
  9586                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  9587  0DA6  0020               	movlb	0	; select bank0
  9588  0DA7  086E               	movf	_lowpowerActivated,w
  9589  0DA8  1D03               	btfss	3,2
  9590  0DA9  2DAB               	goto	u6601
  9591  0DAA  2DAC               	goto	u6600
  9592  0DAB                     u6601:	
  9593  0DAB  2DB0               	goto	l6867
  9594  0DAC                     u6600:	
  9595  0DAC                     l6865:	
  9596                           
  9597                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  9598  0DAC  084F               	movf	Sensor_Service@sensor_adc1,w
  9599  0DAD  3196  2665  318D   	fcall	_Sensor_RawSample_Update
  9600  0DB0                     l6867:	
  9601                           
  9602                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  9603  0DB0  0020               	movlb	0	; select bank0
  9604  0DB1  084F               	movf	Sensor_Service@sensor_adc1,w
  9605  0DB2  3191  2142  318D   	fcall	_Sensor_setSampled
  9606  0DB5                     l6869:	
  9607                           
  9608                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  9609  0DB5  0020               	movlb	0	; select bank0
  9610  0DB6  084F               	movf	Sensor_Service@sensor_adc1,w
  9611  0DB7  0086               	movwf	6
  9612  0DB8  3001               	movlw	1	; select bank2/3
  9613  0DB9  0087               	movwf	7
  9614  0DBA  0801               	movf	1,w
  9615  0DBB  00CA               	movwf	??_Sensor_Service
  9616  0DBC  084A               	movf	??_Sensor_Service,w
  9617  0DBD  00A0               	movwf	Sensor_DefaultCallback@sensor
  9618  0DBE  3190  20B1  318D   	fcall	_Sensor_DefaultCallback
  9619  0DC1                     l6871:	
  9620                           
  9621                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  9622  0DC1  0020               	movlb	0	; select bank0
  9623  0DC2  0850               	movf	Sensor_Service@sensor_adc2,w
  9624  0DC3  3192  226C  318D   	fcall	_Sensor_isEnabled
  9625  0DC6  3A00               	xorlw	0
  9626  0DC7  1903               	skipnz
  9627  0DC8  2DCA               	goto	u6611
  9628  0DC9  2DCB               	goto	u6610
  9629  0DCA                     u6611:	
  9630  0DCA  2E0A               	goto	l6885
  9631  0DCB                     u6610:	
  9632  0DCB                     l6873:	
  9633                           
  9634                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  9635  0DCB  0020               	movlb	0	; select bank0
  9636  0DCC  086E               	movf	_lowpowerActivated,w
  9637  0DCD  1D03               	btfss	3,2
  9638  0DCE  2DD0               	goto	u6621
  9639  0DCF  2DD1               	goto	u6620
  9640  0DD0                     u6621:	
  9641  0DD0  2DD5               	goto	l6877
  9642  0DD1                     u6620:	
  9643  0DD1                     l6875:	
  9644                           
  9645                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  9646  0DD1  0850               	movf	Sensor_Service@sensor_adc2,w
  9647  0DD2  3196  2665  318D   	fcall	_Sensor_RawSample_Update
  9648  0DD5                     l6877:	
  9649                           
  9650                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  9651  0DD5  0020               	movlb	0	; select bank0
  9652  0DD6  0850               	movf	Sensor_Service@sensor_adc2,w
  9653  0DD7  3191  2142  318D   	fcall	_Sensor_setSampled
  9654  0DDA                     l6879:	
  9655                           
  9656                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  9657  0DDA  0020               	movlb	0	; select bank0
  9658  0DDB  0850               	movf	Sensor_Service@sensor_adc2,w
  9659  0DDC  0086               	movwf	6
  9660  0DDD  3001               	movlw	1	; select bank2/3
  9661  0DDE  0087               	movwf	7
  9662  0DDF  0801               	movf	1,w
  9663  0DE0  00CA               	movwf	??_Sensor_Service
  9664  0DE1  084A               	movf	??_Sensor_Service,w
  9665  0DE2  00A0               	movwf	Sensor_DefaultCallback@sensor
  9666  0DE3  3190  20B1  318D   	fcall	_Sensor_DefaultCallback
  9667  0DE6  2E0A               	goto	l6885
  9668  0DE7                     l6883:	
  9669  0DE7  084E               	movf	Sensor_Service@error,w
  9670  0DE8  00CA               	movwf	??_Sensor_Service
  9671  0DE9  01CB               	clrf	??_Sensor_Service+1
  9672  0DEA  1BCA               	btfsc	??_Sensor_Service,7
  9673  0DEB  03CB               	decf	??_Sensor_Service+1,f
  9674                           
  9675                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  9676                           ; Switch size 1, requested type "simple"
  9677                           ; Number of cases is 2, Range of values is 0 to 255
  9678                           ; switch strategies available:
  9679                           ; Name         Instructions Cycles
  9680                           ; simple_byte            7     4 (average)
  9681                           ; jumptable            260     6 (fixed)
  9682                           ;	Chosen strategy is simple_byte
  9683  0DEC  084B               	movf	??_Sensor_Service+1,w
  9684  0DED  3A00               	xorlw	0	; case 0
  9685  0DEE  1903               	skipnz
  9686  0DEF  2DF4               	goto	l7599
  9687  0DF0  3AFF               	xorlw	255	; case 255
  9688  0DF1  1903               	skipnz
  9689  0DF2  2DF9               	goto	l7601
  9690  0DF3  2E0A               	goto	l6885
  9691  0DF4                     l7599:	
  9692                           
  9693                           ; Switch size 1, requested type "simple"
  9694                           ; Number of cases is 1, Range of values is 0 to 0
  9695                           ; switch strategies available:
  9696                           ; Name         Instructions Cycles
  9697                           ; simple_byte            4     3 (average)
  9698                           ; direct_byte            8     6 (fixed)
  9699                           ; jumptable            260     6 (fixed)
  9700                           ;	Chosen strategy is simple_byte
  9701  0DF4  084A               	movf	??_Sensor_Service,w
  9702  0DF5  3A00               	xorlw	0	; case 0
  9703  0DF6  1903               	skipnz
  9704  0DF7  2D9D               	goto	l6861
  9705  0DF8  2E0A               	goto	l6885
  9706  0DF9                     l7601:	
  9707                           
  9708                           ; Switch size 1, requested type "simple"
  9709                           ; Number of cases is 5, Range of values is 251 to 255
  9710                           ; switch strategies available:
  9711                           ; Name         Instructions Cycles
  9712                           ; direct_byte           15     5 (fixed)
  9713                           ; simple_byte           16     9 (average)
  9714                           ; jumptable            263     9 (fixed)
  9715                           ;	Chosen strategy is simple_byte
  9716  0DF9  084A               	movf	??_Sensor_Service,w
  9717  0DFA  3AFB               	xorlw	251	; case 251
  9718  0DFB  1903               	skipnz
  9719  0DFC  2E0A               	goto	l6885
  9720  0DFD  3A07               	xorlw	7	; case 252
  9721  0DFE  1903               	skipnz
  9722  0DFF  2E0A               	goto	l6885
  9723  0E00  3A01               	xorlw	1	; case 253
  9724  0E01  1903               	skipnz
  9725  0E02  2E0A               	goto	l6885
  9726  0E03  3A03               	xorlw	3	; case 254
  9727  0E04  1903               	skipnz
  9728  0E05  2E0A               	goto	l6885
  9729  0E06  3A01               	xorlw	1	; case 255
  9730  0E07  1903               	skipnz
  9731  0E08  2E0A               	goto	l6885
  9732  0E09  2E0A               	goto	l6885
  9733  0E0A                     l6885:	
  9734                           
  9735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  9736  0E0A  0020               	movlb	0	; select bank0
  9737  0E0B  084E               	movf	Sensor_Service@error,w
  9738  0E0C                     l217:	
  9739  0E0C  0008               	return
  9740  0E0D                     __end_of_Sensor_Service:	
  9741                           
  9742                           	psect	text43
  9743  1142                     __ptext43:	
  9744 ;; *************** function _Sensor_setSampled *****************
  9745 ;; Defined at:
  9746 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9747 ;; Parameters:    Size  Location     Type
  9748 ;;  sensor          1    wreg     PTR struct .
  9749 ;;		 -> NULL(0), mtouch_sensor(27), 
  9750 ;; Auto vars:     Size  Location     Type
  9751 ;;  sensor          1    0[BANK0 ] PTR struct .
  9752 ;;		 -> NULL(0), mtouch_sensor(27), 
  9753 ;; Return value:  Size  Location     Type
  9754 ;;                  1    wreg      void 
  9755 ;; Registers used:
  9756 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9757 ;; Tracked objects:
  9758 ;;		On entry : 0/0
  9759 ;;		On exit  : 0/0
  9760 ;;		Unchanged: 0/0
  9761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9762 ;;      Params:         0       0       0       0       0       0       0       0
  9763 ;;      Locals:         0       1       0       0       0       0       0       0
  9764 ;;      Temps:          0       0       0       0       0       0       0       0
  9765 ;;      Totals:         0       1       0       0       0       0       0       0
  9766 ;;Total ram usage:        1 bytes
  9767 ;; Hardware stack levels used:    1
  9768 ;; Hardware stack levels required when called:    5
  9769 ;; This function calls:
  9770 ;;		Nothing
  9771 ;; This function is called by:
  9772 ;;		_Sensor_Service
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           
  9777                           ;psect for function _Sensor_setSampled
  9778  1142                     _Sensor_setSampled:	
  9779                           
  9780                           ;incstack = 0
  9781                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  9782                           ;Sensor_setSampled@sensor stored from wreg
  9783  1142  0020               	movlb	0	; select bank0
  9784  1143  00A0               	movwf	Sensor_setSampled@sensor
  9785  1144                     l6793:	
  9786                           
  9787                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  9788  1144  0820               	movf	Sensor_setSampled@sensor,w
  9789  1145  3E08               	addlw	8
  9790  1146  0086               	movwf	6
  9791  1147  3001               	movlw	1	; select bank2/3
  9792  1148  0087               	movwf	7
  9793  1149  1401               	bsf	1,0
  9794  114A                     l419:	
  9795  114A  0008               	return
  9796  114B                     __end_of_Sensor_setSampled:	
  9797                           
  9798                           	psect	text44
  9799  1665                     __ptext44:	
  9800 ;; *************** function _Sensor_RawSample_Update *****************
  9801 ;; Defined at:
  9802 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;  sensor          1    wreg     PTR struct .
  9805 ;;		 -> NULL(0), mtouch_sensor(27), 
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;  sensor          1    6[BANK0 ] PTR struct .
  9808 ;;		 -> NULL(0), mtouch_sensor(27), 
  9809 ;;  adcIndex        1    5[BANK0 ] unsigned char 
  9810 ;; Return value:  Size  Location     Type
  9811 ;;                  1    wreg      void 
  9812 ;; Registers used:
  9813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9814 ;; Tracked objects:
  9815 ;;		On entry : 0/0
  9816 ;;		On exit  : 0/0
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9819 ;;      Params:         0       0       0       0       0       0       0       0
  9820 ;;      Locals:         0       2       0       0       0       0       0       0
  9821 ;;      Temps:          0       1       0       0       0       0       0       0
  9822 ;;      Totals:         0       3       0       0       0       0       0       0
  9823 ;;Total ram usage:        3 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; Hardware stack levels required when called:    6
  9826 ;; This function calls:
  9827 ;;		_Sensor_getScanGroupIndex
  9828 ;; This function is called by:
  9829 ;;		_Sensor_Service
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           
  9834                           ;psect for function _Sensor_RawSample_Update
  9835  1665                     _Sensor_RawSample_Update:	
  9836                           
  9837                           ;incstack = 0
  9838                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9839                           ;Sensor_RawSample_Update@sensor stored from wreg
  9840  1665  0020               	movlb	0	; select bank0
  9841  1666  00A6               	movwf	Sensor_RawSample_Update@sensor
  9842  1667                     l4849:	
  9843                           
  9844                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  9845  1667  0826               	movf	Sensor_RawSample_Update@sensor,w
  9846  1668  3197  271C  3196   	fcall	_Sensor_getScanGroupIndex
  9847  166B  0020               	movlb	0	; select bank0
  9848  166C  00A4               	movwf	??_Sensor_RawSample_Update
  9849  166D  0824               	movf	??_Sensor_RawSample_Update,w
  9850  166E  00A5               	movwf	Sensor_RawSample_Update@adcIndex
  9851  166F                     l4851:	
  9852                           
  9853                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  9854  166F  1F8B               	btfss	11,7	;volatile
  9855  1670  2E72               	goto	u3851
  9856  1671  2E73               	goto	u3850
  9857  1672                     u3851:	
  9858  1672  2E83               	goto	l4859
  9859  1673                     u3850:	
  9860  1673                     l4853:	
  9861                           
  9862                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  9863  1673  138B               	bcf	11,7	;volatile
  9864  1674                     l4855:	
  9865                           
  9866                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  9867  1674  3525               	lslf	Sensor_RawSample_Update@adcIndex,w
  9868  1675  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
  9869  1676  0086               	movwf	6
  9870  1677  0187               	clrf	7
  9871  1678  0826               	movf	Sensor_RawSample_Update@sensor,w
  9872  1679  3E06               	addlw	6
  9873  167A  0084               	movwf	4
  9874  167B  3001               	movlw	1	; select bank2/3
  9875  167C  0085               	movwf	5
  9876  167D  3F40               	moviw [0]fsr1
  9877  167E  3F80               	movwi [0]fsr0
  9878  167F  3F41               	moviw [1]fsr1
  9879  1680  3F81               	movwi [1]fsr0
  9880  1681                     l4857:	
  9881                           
  9882                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  9883  1681  178B               	bsf	11,7	;volatile
  9884                           
  9885                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  9886  1682  2E90               	goto	l346
  9887  1683                     l4859:	
  9888                           
  9889                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  9890  1683  3525               	lslf	Sensor_RawSample_Update@adcIndex,w
  9891  1684  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
  9892  1685  0086               	movwf	6
  9893  1686  0187               	clrf	7
  9894  1687  0826               	movf	Sensor_RawSample_Update@sensor,w
  9895  1688  3E06               	addlw	6
  9896  1689  0084               	movwf	4
  9897  168A  3001               	movlw	1	; select bank2/3
  9898  168B  0085               	movwf	5
  9899  168C  3F40               	moviw [0]fsr1
  9900  168D  3F80               	movwi [0]fsr0
  9901  168E  3F41               	moviw [1]fsr1
  9902  168F  3F81               	movwi [1]fsr0
  9903  1690                     l346:	
  9904  1690  0008               	return
  9905  1691                     __end_of_Sensor_RawSample_Update:	
  9906                           
  9907                           	psect	text45
  9908  10B1                     __ptext45:	
  9909 ;; *************** function _Sensor_DefaultCallback *****************
  9910 ;; Defined at:
  9911 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;  sensor          1    0[BANK0 ] enum E2878
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;		None
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      void 
  9918 ;; Registers used:
  9919 ;;		None
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9925 ;;      Params:         0       1       0       0       0       0       0       0
  9926 ;;      Locals:         0       0       0       0       0       0       0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0       0
  9928 ;;      Totals:         0       1       0       0       0       0       0       0
  9929 ;;Total ram usage:        1 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    5
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_Sensor_Service
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           
  9940                           ;psect for function _Sensor_DefaultCallback
  9941  10B1                     _Sensor_DefaultCallback:	
  9942  10B1                     l349:	
  9943                           ;incstack = 0
  9944                           ; Regs used in _Sensor_DefaultCallback: []
  9945                           
  9946  10B1  0008               	return
  9947  10B2                     __end_of_Sensor_DefaultCallback:	
  9948                           
  9949                           	psect	text46
  9950  0B61                     __ptext46:	
  9951 ;; *************** function _Sensor_Acquisition *****************
  9952 ;; Defined at:
  9953 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;  sensor_adc1     1    wreg     PTR struct .
  9956 ;;		 -> NULL(0), mtouch_sensor(27), 
  9957 ;;  sensor_adc2     1   38[BANK0 ] PTR struct .
  9958 ;;		 -> mtouch_sensor(27), 
  9959 ;; Auto vars:     Size  Location     Type
  9960 ;;  sensor_adc1     1   41[BANK0 ] PTR struct .
  9961 ;;		 -> NULL(0), mtouch_sensor(27), 
  9962 ;;  retry           1   40[BANK0 ] unsigned char 
  9963 ;; Return value:  Size  Location     Type
  9964 ;;                  1    wreg      enum E2882
  9965 ;; Registers used:
  9966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9967 ;; Tracked objects:
  9968 ;;		On entry : 0/0
  9969 ;;		On exit  : 0/0
  9970 ;;		Unchanged: 0/0
  9971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9972 ;;      Params:         0       1       0       0       0       0       0       0
  9973 ;;      Locals:         0       2       0       0       0       0       0       0
  9974 ;;      Temps:          0       1       0       0       0       0       0       0
  9975 ;;      Totals:         0       4       0       0       0       0       0       0
  9976 ;;Total ram usage:        4 bytes
  9977 ;; Hardware stack levels used:    1
  9978 ;; Hardware stack levels required when called:    9
  9979 ;; This function calls:
  9980 ;;		_Sensor_Acq_ExecutePacket
  9981 ;;		_Sensor_Scanfrequency_Evaluation
  9982 ;;		_Sensor_isActive
  9983 ;;		_Sensor_isCalibrated
  9984 ;;		_Sensor_postAcquisitionProcess
  9985 ;; This function is called by:
  9986 ;;		_Sensor_Service
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           
  9991                           ;psect for function _Sensor_Acquisition
  9992  0B61                     _Sensor_Acquisition:	
  9993                           
  9994                           ;incstack = 0
  9995                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9996                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  9997  0B61  0020               	movlb	0	; select bank0
  9998  0B62  00C9               	movwf	Sensor_Acquisition@sensor_adc1
  9999  0B63                     l6751:	
 10000                           
 10001                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
 10002  0B63  3005               	movlw	5
 10003  0B64  00C7               	movwf	??_Sensor_Acquisition
 10004  0B65  0847               	movf	??_Sensor_Acquisition,w
 10005  0B66  00C8               	movwf	Sensor_Acquisition@retry
 10006  0B67                     l6753:	
 10007                           
 10008                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
 10009  0B67  0849               	movf	Sensor_Acquisition@sensor_adc1,w
 10010  0B68  1D03               	btfss	3,2
 10011  0B69  2B6B               	goto	u6391
 10012  0B6A  2B6C               	goto	u6390
 10013  0B6B                     u6391:	
 10014  0B6B  2B7D               	goto	l6767
 10015  0B6C                     u6390:	
 10016  0B6C                     l6755:	
 10017  0B6C  0846               	movf	Sensor_Acquisition@sensor_adc2,w
 10018  0B6D  1D03               	btfss	3,2
 10019  0B6E  2B70               	goto	u6401
 10020  0B6F  2B71               	goto	u6400
 10021  0B70                     u6401:	
 10022  0B70  2B7D               	goto	l6767
 10023  0B71                     u6400:	
 10024  0B71                     l6757:	
 10025                           
 10026                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
 10027  0B71  30FF               	movlw	255
 10028  0B72  2BD1               	goto	l228
 10029  0B73                     l6761:	
 10030                           
 10031                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
 10032  0B73  3001               	movlw	1
 10033  0B74  0020               	movlb	0	; select bank0
 10034  0B75  02C8               	subwf	Sensor_Acquisition@retry,f
 10035                           
 10036                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
 10037  0B76  0848               	movf	Sensor_Acquisition@retry,w
 10038  0B77  1D03               	btfss	3,2
 10039  0B78  2B7A               	goto	u6411
 10040  0B79  2B7B               	goto	u6410
 10041  0B7A                     u6411:	
 10042  0B7A  2B7D               	goto	l6767
 10043  0B7B                     u6410:	
 10044  0B7B                     l6763:	
 10045                           
 10046                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
 10047  0B7B  30FC               	movlw	252
 10048  0B7C  2BD1               	goto	l228
 10049  0B7D                     l6767:	
 10050                           
 10051                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
 10052  0B7D  0846               	movf	Sensor_Acquisition@sensor_adc2,w
 10053  0B7E  00C7               	movwf	??_Sensor_Acquisition
 10054  0B7F  0847               	movf	??_Sensor_Acquisition,w
 10055  0B80  00AA               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
 10056  0B81  0849               	movf	Sensor_Acquisition@sensor_adc1,w
 10057  0B82  3184  2446  318B   	fcall	_Sensor_Acq_ExecutePacket
 10058  0B85  3A00               	xorlw	0
 10059  0B86  1D03               	skipz
 10060  0B87  2B89               	goto	u6421
 10061  0B88  2B8A               	goto	u6420
 10062  0B89                     u6421:	
 10063  0B89  2B73               	goto	l6761
 10064  0B8A                     u6420:	
 10065  0B8A                     l6769:	
 10066                           
 10067                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
 10068  0B8A  0020               	movlb	0	; select bank0
 10069  0B8B  0849               	movf	Sensor_Acquisition@sensor_adc1,w
 10070  0B8C  1903               	btfsc	3,2
 10071  0B8D  2B8F               	goto	u6431
 10072  0B8E  2B90               	goto	u6430
 10073  0B8F                     u6431:	
 10074  0B8F  2B94               	goto	l6773
 10075  0B90                     u6430:	
 10076  0B90                     l6771:	
 10077                           
 10078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
 10079  0B90  0849               	movf	Sensor_Acquisition@sensor_adc1,w
 10080  0B91  3188  2018  318B   	fcall	_Sensor_postAcquisitionProcess
 10081  0B94                     l6773:	
 10082                           
 10083                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
 10084  0B94  0020               	movlb	0	; select bank0
 10085  0B95  0846               	movf	Sensor_Acquisition@sensor_adc2,w
 10086  0B96  1903               	btfsc	3,2
 10087  0B97  2B99               	goto	u6441
 10088  0B98  2B9A               	goto	u6440
 10089  0B99                     u6441:	
 10090  0B99  2B9E               	goto	l6777
 10091  0B9A                     u6440:	
 10092  0B9A                     l6775:	
 10093                           
 10094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
 10095  0B9A  0846               	movf	Sensor_Acquisition@sensor_adc2,w
 10096  0B9B  3188  2018  318B   	fcall	_Sensor_postAcquisitionProcess
 10097  0B9E                     l6777:	
 10098                           
 10099                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
 10100  0B9E  0020               	movlb	0	; select bank0
 10101  0B9F  0849               	movf	Sensor_Acquisition@sensor_adc1,w
 10102  0BA0  3192  2213  318B   	fcall	_Sensor_isActive
 10103  0BA3  3A00               	xorlw	0
 10104  0BA4  1903               	skipnz
 10105  0BA5  2BA7               	goto	u6451
 10106  0BA6  2BA8               	goto	u6450
 10107  0BA7                     u6451:	
 10108  0BA7  2BB2               	goto	l6781
 10109  0BA8                     u6450:	
 10110  0BA8                     l6779:	
 10111  0BA8  0020               	movlb	0	; select bank0
 10112  0BA9  0849               	movf	Sensor_Acquisition@sensor_adc1,w
 10113  0BAA  3191  2194  318B   	fcall	_Sensor_isCalibrated
 10114  0BAD  3A00               	xorlw	0
 10115  0BAE  1D03               	skipz
 10116  0BAF  2BB1               	goto	u6461
 10117  0BB0  2BB2               	goto	u6460
 10118  0BB1                     u6461:	
 10119  0BB1  2BC6               	goto	l6785
 10120  0BB2                     u6460:	
 10121  0BB2                     l6781:	
 10122  0BB2  0020               	movlb	0	; select bank0
 10123  0BB3  0846               	movf	Sensor_Acquisition@sensor_adc2,w
 10124  0BB4  3192  2213  318B   	fcall	_Sensor_isActive
 10125  0BB7  3A00               	xorlw	0
 10126  0BB8  1903               	skipnz
 10127  0BB9  2BBB               	goto	u6471
 10128  0BBA  2BBC               	goto	u6470
 10129  0BBB                     u6471:	
 10130  0BBB  2BD0               	goto	l6789
 10131  0BBC                     u6470:	
 10132  0BBC                     l6783:	
 10133  0BBC  0020               	movlb	0	; select bank0
 10134  0BBD  0846               	movf	Sensor_Acquisition@sensor_adc2,w
 10135  0BBE  3191  2194  318B   	fcall	_Sensor_isCalibrated
 10136  0BC1  3A00               	xorlw	0
 10137  0BC2  1903               	skipnz
 10138  0BC3  2BC5               	goto	u6481
 10139  0BC4  2BC6               	goto	u6480
 10140  0BC5                     u6481:	
 10141  0BC5  2BD0               	goto	l6789
 10142  0BC6                     u6480:	
 10143  0BC6                     l6785:	
 10144                           
 10145                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
 10146  0BC6  0020               	movlb	0	; select bank0
 10147  0BC7  0846               	movf	Sensor_Acquisition@sensor_adc2,w
 10148  0BC8  00C7               	movwf	??_Sensor_Acquisition
 10149  0BC9  0847               	movf	??_Sensor_Acquisition,w
 10150  0BCA  00B9               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
 10151  0BCB  0849               	movf	Sensor_Acquisition@sensor_adc1,w
 10152  0BCC  318B  23D2  318B   	fcall	_Sensor_Scanfrequency_Evaluation
 10153  0BCF  2BD1               	goto	l228
 10154  0BD0                     l6789:	
 10155                           
 10156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
 10157  0BD0  3000               	movlw	0
 10158  0BD1                     l228:	
 10159  0BD1  0008               	return
 10160  0BD2                     __end_of_Sensor_Acquisition:	
 10161                           
 10162                           	psect	text47
 10163  0818                     __ptext47:	
 10164 ;; *************** function _Sensor_postAcquisitionProcess *****************
 10165 ;; Defined at:
 10166 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;  sensor          1    wreg     PTR struct .
 10169 ;;		 -> NULL(0), mtouch_sensor(27), 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  sensor          1    8[BANK0 ] PTR struct .
 10172 ;;		 -> NULL(0), mtouch_sensor(27), 
 10173 ;;  deviation       2    6[BANK0 ] unsigned short 
 10174 ;;  adcIndex        1    5[BANK0 ] unsigned char 
 10175 ;; Return value:  Size  Location     Type
 10176 ;;                  1    wreg      void 
 10177 ;; Registers used:
 10178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10184 ;;      Params:         0       0       0       0       0       0       0       0
 10185 ;;      Locals:         0       4       0       0       0       0       0       0
 10186 ;;      Temps:          0       1       0       0       0       0       0       0
 10187 ;;      Totals:         0       5       0       0       0       0       0       0
 10188 ;;Total ram usage:        5 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; Hardware stack levels required when called:    6
 10191 ;; This function calls:
 10192 ;;		_Sensor_getScanGroupIndex
 10193 ;;		_Sensor_isEnabled
 10194 ;;		_Sensor_setActive
 10195 ;;		_Sensor_setInactive
 10196 ;;		_abs
 10197 ;; This function is called by:
 10198 ;;		_Sensor_Acquisition
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           
 10203                           ;psect for function _Sensor_postAcquisitionProcess
 10204  0818                     _Sensor_postAcquisitionProcess:	
 10205                           
 10206                           ;incstack = 0
 10207                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10208                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
 10209  0818  0020               	movlb	0	; select bank0
 10210  0819  00A8               	movwf	Sensor_postAcquisitionProcess@sensor
 10211  081A                     l6677:	
 10212                           
 10213                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
 10214  081A  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
 10215  081B  3197  271C  3188   	fcall	_Sensor_getScanGroupIndex
 10216  081E  0020               	movlb	0	; select bank0
 10217  081F  00A4               	movwf	??_Sensor_postAcquisitionProcess
 10218  0820  0824               	movf	??_Sensor_postAcquisitionProcess,w
 10219  0821  00A5               	movwf	Sensor_postAcquisitionProcess@adcIndex
 10220  0822                     l6679:	
 10221                           
 10222                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
 10223  0822  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
 10224  0823  3192  226C  3188   	fcall	_Sensor_isEnabled
 10225  0826  3A00               	xorlw	0
 10226  0827  1903               	skipnz
 10227  0828  282A               	goto	u6301
 10228  0829  282B               	goto	u6300
 10229  082A                     u6301:	
 10230  082A  2845               	goto	l6683
 10231  082B                     u6300:	
 10232  082B                     l6681:	
 10233                           
 10234                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
 10235  082B  0020               	movlb	0	; select bank0
 10236  082C  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
 10237  082D  3E06               	addlw	6
 10238  082E  0086               	movwf	6
 10239  082F  3001               	movlw	1	; select bank2/3
 10240  0830  0087               	movwf	7
 10241  0831  3525               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
 10242  0832  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 10243  0833  0084               	movwf	4
 10244  0834  0185               	clrf	5
 10245  0835  3F40               	moviw [0]fsr1
 10246  0836  0200               	subwf	0,w
 10247  0837  00A0               	movwf	abs@a
 10248  0838  3101               	addfsr 0,1
 10249  0839  3F41               	moviw [1]fsr1
 10250  083A  3B00               	subwfb	0,w
 10251  083B  00A1               	movwf	abs@a+1
 10252  083C  3193  23F0  3188   	fcall	_abs
 10253  083F  0020               	movlb	0	; select bank0
 10254  0840  0821               	movf	?_abs+1,w
 10255  0841  00A7               	movwf	Sensor_postAcquisitionProcess@deviation+1
 10256  0842  0820               	movf	?_abs,w
 10257  0843  00A6               	movwf	Sensor_postAcquisitionProcess@deviation
 10258  0844  2848               	goto	l6685
 10259  0845                     l6683:	
 10260                           
 10261                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
 10262  0845  0020               	movlb	0	; select bank0
 10263  0846  01A6               	clrf	Sensor_postAcquisitionProcess@deviation
 10264  0847  01A7               	clrf	Sensor_postAcquisitionProcess@deviation+1
 10265  0848                     l6685:	
 10266                           
 10267                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
 10268  0848  3000               	movlw	0
 10269  0849  0227               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
 10270  084A  3065               	movlw	101
 10271  084B  1903               	skipnz
 10272  084C  0226               	subwf	Sensor_postAcquisitionProcess@deviation,w
 10273  084D  1C03               	skipc
 10274  084E  2850               	goto	u6311
 10275  084F  2851               	goto	u6310
 10276  0850                     u6311:	
 10277  0850  2856               	goto	l6689
 10278  0851                     u6310:	
 10279  0851                     l6687:	
 10280                           
 10281                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
 10282  0851  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
 10283  0852  3191  2130  3188   	fcall	_Sensor_setActive
 10284  0855  285A               	goto	l246
 10285  0856                     l6689:	
 10286                           
 10287                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
 10288  0856  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
 10289  0857  3191  2139  3188   	fcall	_Sensor_setInactive
 10290  085A                     l246:	
 10291  085A  0008               	return
 10292  085B                     __end_of_Sensor_postAcquisitionProcess:	
 10293                           
 10294                           	psect	text48
 10295  1139                     __ptext48:	
 10296 ;; *************** function _Sensor_setInactive *****************
 10297 ;; Defined at:
 10298 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;  sensor          1    wreg     PTR struct .
 10301 ;;		 -> NULL(0), mtouch_sensor(27), 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  sensor          1    0[BANK0 ] PTR struct .
 10304 ;;		 -> NULL(0), mtouch_sensor(27), 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  1    wreg      void 
 10307 ;; Registers used:
 10308 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/0
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10314 ;;      Params:         0       0       0       0       0       0       0       0
 10315 ;;      Locals:         0       1       0       0       0       0       0       0
 10316 ;;      Temps:          0       0       0       0       0       0       0       0
 10317 ;;      Totals:         0       1       0       0       0       0       0       0
 10318 ;;Total ram usage:        1 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    5
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_Sensor_postAcquisitionProcess
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           
 10329                           ;psect for function _Sensor_setInactive
 10330  1139                     _Sensor_setInactive:	
 10331                           
 10332                           ;incstack = 0
 10333                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10334                           ;Sensor_setInactive@sensor stored from wreg
 10335  1139  0020               	movlb	0	; select bank0
 10336  113A  00A0               	movwf	Sensor_setInactive@sensor
 10337  113B                     l6641:	
 10338                           
 10339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
 10340  113B  0820               	movf	Sensor_setInactive@sensor,w
 10341  113C  3E08               	addlw	8
 10342  113D  0086               	movwf	6
 10343  113E  3001               	movlw	1	; select bank2/3
 10344  113F  0087               	movwf	7
 10345  1140  1081               	bcf	1,1
 10346  1141                     l376:	
 10347  1141  0008               	return
 10348  1142                     __end_of_Sensor_setInactive:	
 10349                           
 10350                           	psect	text49
 10351  1130                     __ptext49:	
 10352 ;; *************** function _Sensor_setActive *****************
 10353 ;; Defined at:
 10354 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;  sensor          1    wreg     PTR struct .
 10357 ;;		 -> NULL(0), mtouch_sensor(27), 
 10358 ;; Auto vars:     Size  Location     Type
 10359 ;;  sensor          1    0[BANK0 ] PTR struct .
 10360 ;;		 -> NULL(0), mtouch_sensor(27), 
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  1    wreg      void 
 10363 ;; Registers used:
 10364 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10370 ;;      Params:         0       0       0       0       0       0       0       0
 10371 ;;      Locals:         0       1       0       0       0       0       0       0
 10372 ;;      Temps:          0       0       0       0       0       0       0       0
 10373 ;;      Totals:         0       1       0       0       0       0       0       0
 10374 ;;Total ram usage:        1 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; Hardware stack levels required when called:    5
 10377 ;; This function calls:
 10378 ;;		Nothing
 10379 ;; This function is called by:
 10380 ;;		_Sensor_postAcquisitionProcess
 10381 ;; This function uses a non-reentrant model
 10382 ;;
 10383                           
 10384                           
 10385                           ;psect for function _Sensor_setActive
 10386  1130                     _Sensor_setActive:	
 10387                           
 10388                           ;incstack = 0
 10389                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10390                           ;Sensor_setActive@sensor stored from wreg
 10391  1130  0020               	movlb	0	; select bank0
 10392  1131  00A0               	movwf	Sensor_setActive@sensor
 10393  1132                     l6639:	
 10394                           
 10395                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
 10396  1132  0820               	movf	Sensor_setActive@sensor,w
 10397  1133  3E08               	addlw	8
 10398  1134  0086               	movwf	6
 10399  1135  3001               	movlw	1	; select bank2/3
 10400  1136  0087               	movwf	7
 10401  1137  1481               	bsf	1,1
 10402  1138                     l373:	
 10403  1138  0008               	return
 10404  1139                     __end_of_Sensor_setActive:	
 10405                           
 10406                           	psect	text50
 10407  0BD2                     __ptext50:	
 10408 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
 10409 ;; Defined at:
 10410 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;  sensor_adc1     1    wreg     PTR struct .
 10413 ;;		 -> NULL(0), mtouch_sensor(27), 
 10414 ;;  sensor_adc2     1   25[BANK0 ] PTR struct .
 10415 ;;		 -> mtouch_sensor(27), 
 10416 ;; Auto vars:     Size  Location     Type
 10417 ;;  sensor_adc1     1   28[BANK0 ] PTR struct .
 10418 ;;		 -> NULL(0), mtouch_sensor(27), 
 10419 ;;  best_packet_    4   33[BANK0 ] unsigned short [2]
 10420 ;;  packet_noise    2   29[BANK0 ] unsigned short 
 10421 ;;  i               1   37[BANK0 ] unsigned char 
 10422 ;;  retry           1   32[BANK0 ] unsigned char 
 10423 ;;  best_sample_    1   31[BANK0 ] unsigned char 
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  1    wreg      enum E2882
 10426 ;; Registers used:
 10427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10433 ;;      Params:         0       1       0       0       0       0       0       0
 10434 ;;      Locals:         0      10       0       0       0       0       0       0
 10435 ;;      Temps:          0       2       0       0       0       0       0       0
 10436 ;;      Totals:         0      13       0       0       0       0       0       0
 10437 ;;Total ram usage:       13 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    8
 10440 ;; This function calls:
 10441 ;;		_Sensor_Acq_ExecutePacket
 10442 ;; This function is called by:
 10443 ;;		_Sensor_Acquisition
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function _Sensor_Scanfrequency_Evaluation
 10449  0BD2                     _Sensor_Scanfrequency_Evaluation:	
 10450                           
 10451                           ;incstack = 0
 10452                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10453                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
 10454  0BD2  0020               	movlb	0	; select bank0
 10455  0BD3  00BC               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
 10456  0BD4                     l6691:	
 10457                           
 10458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
 10459  0BD4  085E               	movf	_packet_noise+1,w
 10460  0BD5  00BB               	movwf	??_Sensor_Scanfrequency_Evaluation+1
 10461  0BD6  085D               	movf	_packet_noise,w
 10462  0BD7  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
 10463  0BD8  36BB               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
 10464  0BD9  0CBA               	rrf	??_Sensor_Scanfrequency_Evaluation,f
 10465  0BDA  36BB               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
 10466  0BDB  0CBA               	rrf	??_Sensor_Scanfrequency_Evaluation,f
 10467  0BDC  085D               	movf	_packet_noise,w
 10468  0BDD  073A               	addwf	??_Sensor_Scanfrequency_Evaluation,w
 10469  0BDE  00BD               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
 10470  0BDF  085E               	movf	_packet_noise+1,w
 10471  0BE0  3D3B               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
 10472  0BE1  00BE               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
 10473  0BE2                     l6693:	
 10474                           
 10475                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
 10476  0BE2  086F               	movf	_sample_period,w
 10477  0BE3  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
 10478  0BE4  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
 10479  0BE5  00BF               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
 10480  0BE6                     l6695:	
 10481                           
 10482                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
 10483  0BE6  0856               	movf	_packet_sample+1,w
 10484  0BE7  00C2               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
 10485  0BE8  0855               	movf	_packet_sample,w
 10486  0BE9  00C1               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
 10487  0BEA                     l6697:	
 10488                           
 10489                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
 10490  0BEA  0858               	movf	_packet_sample+3,w
 10491  0BEB  00C4               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
 10492  0BEC  0857               	movf	_packet_sample+2,w
 10493  0BED  00C3               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
 10494  0BEE                     l6699:	
 10495                           
 10496                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
 10497  0BEE  01C5               	clrf	Sensor_Scanfrequency_Evaluation@i
 10498  0BEF                     l6705:	
 10499                           
 10500                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
 10501  0BEF  0845               	movf	Sensor_Scanfrequency_Evaluation@i,w
 10502  0BF0  3E6D               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
 10503  0BF1  0084               	movwf	4
 10504  0BF2  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
 10505  0BF3  1803               	skipnc
 10506  0BF4  3E01               	addlw	1
 10507  0BF5  0085               	movwf	5
 10508  0BF6  0800               	movf	0,w	;code access
 10509  0BF7  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
 10510  0BF8  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
 10511  0BF9  07EF               	addwf	_sample_period,f
 10512  0BFA                     l6709:	
 10513                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
 10514                           
 10515  0BFA  30AE               	movlw	174
 10516  0BFB  026F               	subwf	_sample_period,w
 10517  0BFC  1803               	skipnc
 10518  0BFD  2BFF               	goto	u6321
 10519  0BFE  2C00               	goto	u6320
 10520  0BFF                     u6321:	
 10521  0BFF  2C04               	goto	l6713
 10522  0C00                     u6320:	
 10523  0C00                     l6711:	
 10524                           
 10525                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
 10526  0C00  30AE               	movlw	174
 10527  0C01  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
 10528  0C02  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
 10529  0C03  07EF               	addwf	_sample_period,f
 10530  0C04                     l6713:	
 10531                           
 10532                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
 10533  0C04  3005               	movlw	5
 10534  0C05  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
 10535  0C06  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
 10536  0C07  00C0               	movwf	Sensor_Scanfrequency_Evaluation@retry
 10537                           
 10538                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
 10539  0C08  2C13               	goto	l6721
 10540  0C09                     l6715:	
 10541                           
 10542                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
 10543  0C09  3001               	movlw	1
 10544  0C0A  0020               	movlb	0	; select bank0
 10545  0C0B  02C0               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
 10546                           
 10547                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
 10548  0C0C  0840               	movf	Sensor_Scanfrequency_Evaluation@retry,w
 10549  0C0D  1D03               	btfss	3,2
 10550  0C0E  2C10               	goto	u6331
 10551  0C0F  2C11               	goto	u6330
 10552  0C10                     u6331:	
 10553  0C10  2C13               	goto	l6721
 10554  0C11                     u6330:	
 10555  0C11                     l6717:	
 10556                           
 10557                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
 10558  0C11  30FC               	movlw	252
 10559  0C12  2C52               	goto	l334
 10560  0C13                     l6721:	
 10561                           
 10562                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
 10563  0C13  0839               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
 10564  0C14  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
 10565  0C15  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
 10566  0C16  00AA               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
 10567  0C17  083C               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
 10568  0C18  3184  2446  318B   	fcall	_Sensor_Acq_ExecutePacket
 10569  0C1B  3A00               	xorlw	0
 10570  0C1C  1D03               	skipz
 10571  0C1D  2C1F               	goto	u6341
 10572  0C1E  2C20               	goto	u6340
 10573  0C1F                     u6341:	
 10574  0C1F  2C09               	goto	l6715
 10575  0C20                     u6340:	
 10576  0C20                     l6723:	
 10577                           
 10578                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
 10579  0C20  0020               	movlb	0	; select bank0
 10580  0C21  085E               	movf	_packet_noise+1,w
 10581  0C22  023E               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
 10582  0C23  1D03               	skipz
 10583  0C24  2C27               	goto	u6355
 10584  0C25  085D               	movf	_packet_noise,w
 10585  0C26  023D               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
 10586  0C27                     u6355:	
 10587  0C27  1803               	skipnc
 10588  0C28  2C2A               	goto	u6351
 10589  0C29  2C2B               	goto	u6350
 10590  0C2A                     u6351:	
 10591  0C2A  2C3B               	goto	l6727
 10592  0C2B                     u6350:	
 10593  0C2B                     l6725:	
 10594                           
 10595                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
 10596  0C2B  085E               	movf	_packet_noise+1,w
 10597  0C2C  00BE               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
 10598  0C2D  085D               	movf	_packet_noise,w
 10599  0C2E  00BD               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
 10600                           
 10601                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
 10602  0C2F  086F               	movf	_sample_period,w
 10603  0C30  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
 10604  0C31  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
 10605  0C32  00BF               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
 10606                           
 10607                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
 10608  0C33  0856               	movf	_packet_sample+1,w
 10609  0C34  00C2               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
 10610  0C35  0855               	movf	_packet_sample,w
 10611  0C36  00C1               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
 10612                           
 10613                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
 10614  0C37  0858               	movf	_packet_sample+3,w
 10615  0C38  00C4               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
 10616  0C39  0857               	movf	_packet_sample+2,w
 10617  0C3A  00C3               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
 10618  0C3B                     l6727:	
 10619                           
 10620                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
 10621  0C3B  3001               	movlw	1
 10622  0C3C  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
 10623  0C3D  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
 10624  0C3E  07C5               	addwf	Sensor_Scanfrequency_Evaluation@i,f
 10625  0C3F                     l6729:	
 10626  0C3F  3005               	movlw	5
 10627  0C40  0245               	subwf	Sensor_Scanfrequency_Evaluation@i,w
 10628  0C41  1C03               	skipc
 10629  0C42  2C44               	goto	u6361
 10630  0C43  2C45               	goto	u6360
 10631  0C44                     u6361:	
 10632  0C44  2BEF               	goto	l6705
 10633  0C45                     u6360:	
 10634  0C45                     l6731:	
 10635                           
 10636                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
 10637  0C45  083F               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
 10638  0C46  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
 10639  0C47  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
 10640  0C48  00EF               	movwf	_sample_period
 10641                           
 10642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
 10643  0C49  0842               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
 10644  0C4A  00D6               	movwf	_packet_sample+1
 10645  0C4B  0841               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
 10646  0C4C  00D5               	movwf	_packet_sample
 10647                           
 10648                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
 10649  0C4D  0844               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
 10650  0C4E  00D8               	movwf	_packet_sample+3
 10651  0C4F  0843               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
 10652  0C50  00D7               	movwf	_packet_sample+2
 10653                           
 10654                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
 10655  0C51  3000               	movlw	0
 10656  0C52                     l334:	
 10657  0C52  0008               	return
 10658  0C53                     __end_of_Sensor_Scanfrequency_Evaluation:	
 10659                           
 10660                           	psect	text51
 10661  0446                     __ptext51:	
 10662 ;; *************** function _Sensor_Acq_ExecutePacket *****************
 10663 ;; Defined at:
 10664 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;  sensor_adc1     1    wreg     PTR struct .
 10667 ;;		 -> NULL(0), mtouch_sensor(27), 
 10668 ;;  sensor_adc2     1   10[BANK0 ] PTR struct .
 10669 ;;		 -> mtouch_sensor(27), 
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;  sensor_adc1     1   24[BANK0 ] PTR struct .
 10672 ;;		 -> NULL(0), mtouch_sensor(27), 
 10673 ;;  last_b          2   21[BANK0 ] unsigned short 
 10674 ;;  last_a          2   19[BANK0 ] unsigned short 
 10675 ;;  packet_count    1   23[BANK0 ] unsigned char 
 10676 ;;  activeSensor    1   18[BANK0 ] unsigned char 
 10677 ;;  ADxIF_flag      1   17[BANK0 ] unsigned char 
 10678 ;;  sensor2Force    1   16[BANK0 ] unsigned char 
 10679 ;;  sensor1Force    1   15[BANK0 ] unsigned char 
 10680 ;;  AD2CON2_temp    1   14[BANK0 ] unsigned char 
 10681 ;;  AD1CON2_temp    1   13[BANK0 ] unsigned char 
 10682 ;;  ADCOMCON_tem    1   12[BANK0 ] unsigned char 
 10683 ;; Return value:  Size  Location     Type
 10684 ;;                  1    wreg      enum E2882
 10685 ;; Registers used:
 10686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : 0/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10692 ;;      Params:         0       1       0       0       0       0       0       0
 10693 ;;      Locals:         0      13       0       0       0       0       0       0
 10694 ;;      Temps:          0       1       0       0       0       0       0       0
 10695 ;;      Totals:         0      15       0       0       0       0       0       0
 10696 ;;Total ram usage:       15 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:    7
 10699 ;; This function calls:
 10700 ;;		_MTOUCH_Sensor_Scan_Initialize
 10701 ;;		_Sensor_autoCalibration
 10702 ;;		_Sensor_isActive
 10703 ;;		_Sensor_isCalibrated
 10704 ;;		_Sensor_isEnabled
 10705 ;;		_Sensor_loadADCSettings
 10706 ;;		_TMR2_LoadPeriodRegister
 10707 ;;		_TMR2_StartTimer
 10708 ;;		_TMR2_StopTimer
 10709 ;;		_abs
 10710 ;; This function is called by:
 10711 ;;		_Sensor_Acquisition
 10712 ;;		_Sensor_Scanfrequency_Evaluation
 10713 ;; This function uses a non-reentrant model
 10714 ;;
 10715                           
 10716                           
 10717                           ;psect for function _Sensor_Acq_ExecutePacket
 10718  0446                     _Sensor_Acq_ExecutePacket:	
 10719                           
 10720                           ;incstack = 0
 10721                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10722                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
 10723  0446  0020               	movlb	0	; select bank0
 10724  0447  00B8               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
 10725  0448                     l6437:	
 10726                           
 10727                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
 10728  0448  01B3               	clrf	Sensor_Acq_ExecutePacket@last_a
 10729  0449  01B4               	clrf	Sensor_Acq_ExecutePacket@last_a+1
 10730                           
 10731                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
 10732  044A  01B5               	clrf	Sensor_Acq_ExecutePacket@last_b
 10733  044B  01B6               	clrf	Sensor_Acq_ExecutePacket@last_b+1
 10734                           
 10735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
 10736  044C  01B2               	clrf	Sensor_Acq_ExecutePacket@activeSensor
 10737                           
 10738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
 10739  044D  01AF               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
 10740  044E  01B0               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
 10741  044F                     l6439:	
 10742                           
 10743                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
 10744  044F  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10745  0450  1903               	btfsc	3,2
 10746  0451  2C53               	goto	u5901
 10747  0452  2C54               	goto	u5900
 10748  0453                     u5901:	
 10749  0453  2CA4               	goto	l6469
 10750  0454                     u5900:	
 10751  0454                     l6441:	
 10752  0454  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10753  0455  1903               	btfsc	3,2
 10754  0456  2C58               	goto	u5911
 10755  0457  2C59               	goto	u5910
 10756  0458                     u5911:	
 10757  0458  2CA4               	goto	l6469
 10758  0459                     u5910:	
 10759  0459                     l6443:	
 10760                           
 10761                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
 10762  0459  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10763  045A  3E08               	addlw	8
 10764  045B  0086               	movwf	6
 10765  045C  3001               	movlw	1	; select bank2/3
 10766  045D  0087               	movwf	7
 10767  045E  1981               	btfsc	1,3
 10768  045F  2C61               	goto	u5921
 10769  0460  2C62               	goto	u5920
 10770  0461                     u5921:	
 10771  0461  2C74               	goto	l6451
 10772  0462                     u5920:	
 10773  0462                     l6445:	
 10774  0462  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10775  0463  3E08               	addlw	8
 10776  0464  0086               	movwf	6
 10777  0465  3001               	movlw	1	; select bank2/3
 10778  0466  0087               	movwf	7
 10779  0467  1D81               	btfss	1,3
 10780  0468  2C6A               	goto	u5931
 10781  0469  2C6B               	goto	u5930
 10782  046A                     u5931:	
 10783  046A  2C74               	goto	l6451
 10784  046B                     u5930:	
 10785  046B                     l6447:	
 10786                           
 10787                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
 10788  046B  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10789  046C  3E08               	addlw	8
 10790  046D  0086               	movwf	6
 10791  046E  3001               	movlw	1	; select bank2/3
 10792  046F  0087               	movwf	7
 10793  0470  1581               	bsf	1,3
 10794  0471                     l6449:	
 10795                           
 10796                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
 10797  0471  01AF               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
 10798  0472  0AAF               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
 10799                           
 10800                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
 10801  0473  2CCC               	goto	l6493
 10802  0474                     l6451:	
 10803  0474  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10804  0475  3E08               	addlw	8
 10805  0476  0086               	movwf	6
 10806  0477  3001               	movlw	1	; select bank2/3
 10807  0478  0087               	movwf	7
 10808  0479  1981               	btfsc	1,3
 10809  047A  2C7C               	goto	u5941
 10810  047B  2C7D               	goto	u5940
 10811  047C                     u5941:	
 10812  047C  2C8F               	goto	l6459
 10813  047D                     u5940:	
 10814  047D                     l6453:	
 10815  047D  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10816  047E  3E08               	addlw	8
 10817  047F  0086               	movwf	6
 10818  0480  3001               	movlw	1	; select bank2/3
 10819  0481  0087               	movwf	7
 10820  0482  1D81               	btfss	1,3
 10821  0483  2C85               	goto	u5951
 10822  0484  2C86               	goto	u5950
 10823  0485                     u5951:	
 10824  0485  2C8F               	goto	l6459
 10825  0486                     u5950:	
 10826  0486                     l6455:	
 10827                           
 10828                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
 10829  0486  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10830  0487  3E08               	addlw	8
 10831  0488  0086               	movwf	6
 10832  0489  3001               	movlw	1	; select bank2/3
 10833  048A  0087               	movwf	7
 10834  048B  1581               	bsf	1,3
 10835  048C                     l6457:	
 10836                           
 10837                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
 10838  048C  01B0               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
 10839  048D  0AB0               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
 10840                           
 10841                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
 10842  048E  2CCC               	goto	l6493
 10843  048F                     l6459:	
 10844  048F  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10845  0490  3E08               	addlw	8
 10846  0491  0086               	movwf	6
 10847  0492  3001               	movlw	1	; select bank2/3
 10848  0493  0087               	movwf	7
 10849  0494  1981               	btfsc	1,3
 10850  0495  2C97               	goto	u5961
 10851  0496  2C98               	goto	u5960
 10852  0497                     u5961:	
 10853  0497  2CA3               	goto	l266
 10854  0498                     u5960:	
 10855  0498                     l6461:	
 10856  0498  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10857  0499  3E08               	addlw	8
 10858  049A  0086               	movwf	6
 10859  049B  3001               	movlw	1	; select bank2/3
 10860  049C  0087               	movwf	7
 10861  049D  1981               	btfsc	1,3
 10862  049E  2CA0               	goto	u5971
 10863  049F  2CA1               	goto	u5970
 10864  04A0                     u5971:	
 10865  04A0  2CA3               	goto	l266
 10866  04A1                     u5970:	
 10867  04A1                     l6463:	
 10868                           
 10869                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
 10870  04A1  3000               	movlw	0
 10871  04A2  2E7B               	goto	l270
 10872  04A3                     l266:	
 10873                           
 10874                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
 10875  04A3  2CCC               	goto	l6493
 10876  04A4                     l6469:	
 10877  04A4  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10878  04A5  1D03               	btfss	3,2
 10879  04A6  2CA8               	goto	u5981
 10880  04A7  2CA9               	goto	u5980
 10881  04A8                     u5981:	
 10882  04A8  2CB8               	goto	l6481
 10883  04A9                     u5980:	
 10884  04A9                     l6471:	
 10885  04A9  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10886  04AA  1903               	btfsc	3,2
 10887  04AB  2CAD               	goto	u5991
 10888  04AC  2CAE               	goto	u5990
 10889  04AD                     u5991:	
 10890  04AD  2CB8               	goto	l6481
 10891  04AE                     u5990:	
 10892  04AE                     l6473:	
 10893                           
 10894                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
 10895  04AE  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10896  04AF  3E08               	addlw	8
 10897  04B0  0086               	movwf	6
 10898  04B1  3001               	movlw	1	; select bank2/3
 10899  04B2  0087               	movwf	7
 10900  04B3  1981               	btfsc	1,3
 10901  04B4  2CB6               	goto	u6001
 10902  04B5  2CB7               	goto	u6000
 10903  04B6                     u6001:	
 10904  04B6  2CCC               	goto	l6493
 10905  04B7                     u6000:	
 10906  04B7  2CA1               	goto	l6463
 10907  04B8                     l6481:	
 10908  04B8  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10909  04B9  1903               	btfsc	3,2
 10910  04BA  2CBC               	goto	u6011
 10911  04BB  2CBD               	goto	u6010
 10912  04BC                     u6011:	
 10913  04BC  2CCC               	goto	l6493
 10914  04BD                     u6010:	
 10915  04BD                     l6483:	
 10916  04BD  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10917  04BE  1D03               	btfss	3,2
 10918  04BF  2CC1               	goto	u6021
 10919  04C0  2CC2               	goto	u6020
 10920  04C1                     u6021:	
 10921  04C1  2CCC               	goto	l6493
 10922  04C2                     u6020:	
 10923  04C2                     l6485:	
 10924                           
 10925                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
 10926  04C2  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10927  04C3  3E08               	addlw	8
 10928  04C4  0086               	movwf	6
 10929  04C5  3001               	movlw	1	; select bank2/3
 10930  04C6  0087               	movwf	7
 10931  04C7  1981               	btfsc	1,3
 10932  04C8  2CCA               	goto	u6031
 10933  04C9  2CCB               	goto	u6030
 10934  04CA                     u6031:	
 10935  04CA  2CCC               	goto	l6493
 10936  04CB                     u6030:	
 10937  04CB  2CA1               	goto	l6463
 10938  04CC                     l6493:	
 10939                           
 10940                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
 10941  04CC  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10942  04CD  3192  2213  3184   	fcall	_Sensor_isActive
 10943  04D0  3A00               	xorlw	0
 10944  04D1  1903               	skipnz
 10945  04D2  2CD4               	goto	u6041
 10946  04D3  2CD5               	goto	u6040
 10947  04D4                     u6041:	
 10948  04D4  2CD8               	goto	l6497
 10949  04D5                     u6040:	
 10950  04D5                     l6495:	
 10951                           
 10952                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
 10953  04D5  0020               	movlb	0	; select bank0
 10954  04D6  01B2               	clrf	Sensor_Acq_ExecutePacket@activeSensor
 10955  04D7  0AB2               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
 10956  04D8                     l6497:	
 10957                           
 10958                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
 10959  04D8  002E               	movlb	14	; select bank14
 10960  04D9  0812               	movf	18,w	;volatile
 10961  04DA  0020               	movlb	0	; select bank0
 10962  04DB  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10963  04DC  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10964  04DD  00AC               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
 10965                           
 10966                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
 10967  04DE  002E               	movlb	14	; select bank14
 10968  04DF  0813               	movf	19,w	;volatile
 10969  04E0  0020               	movlb	0	; select bank0
 10970  04E1  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10971  04E2  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10972  04E3  00AD               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
 10973                           
 10974                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
 10975  04E4  002F               	movlb	15	; select bank15
 10976  04E5  0813               	movf	19,w	;volatile
 10977  04E6  0020               	movlb	0	; select bank0
 10978  04E7  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10979  04E8  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10980  04E9  00AE               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
 10981  04EA                     l6499:	
 10982                           
 10983                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
 10984  04EA  3191  21E2  3184   	fcall	_MTOUCH_Sensor_Scan_Initialize
 10985  04ED                     l6501:	
 10986                           
 10987                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
 10988  04ED  0020               	movlb	0	; select bank0
 10989  04EE  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10990  04EF  1903               	btfsc	3,2
 10991  04F0  2CF2               	goto	u6051
 10992  04F1  2CF3               	goto	u6050
 10993  04F2                     u6051:	
 10994  04F2  2D06               	goto	l6513
 10995  04F3                     u6050:	
 10996  04F3                     l6503:	
 10997                           
 10998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
 10999  04F3  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 11000  04F4  3E04               	addlw	4
 11001  04F5  0086               	movwf	6
 11002  04F6  3001               	movlw	1	; select bank2/3
 11003  04F7  0087               	movwf	7
 11004  04F8  0801               	movf	1,w
 11005  04F9  3EFF               	addlw	255
 11006  04FA  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 11007  04FB  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 11008  04FC  00B7               	movwf	Sensor_Acq_ExecutePacket@packet_counter
 11009  04FD                     l6505:	
 11010                           
 11011                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
 11012  04FD  01B1               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
 11013  04FE                     l6507:	
 11014                           
 11015                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
 11016  04FE  3040               	movlw	64
 11017  04FF  002E               	movlb	14	; select bank14
 11018  0500  0098               	movwf	24	;volatile
 11019  0501                     l6509:	
 11020                           
 11021                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
 11022  0501  002F               	movlb	15	; select bank15
 11023  0502  0198               	clrf	24	;volatile
 11024  0503                     l6511:	
 11025                           
 11026                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x1;
 11027  0503  0022               	movlb	2	; select bank2
 11028  0504  141D               	bsf	29,0	;volatile
 11029                           
 11030                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
 11031  0505  2D19               	goto	l6523
 11032  0506                     l6513:	
 11033                           
 11034                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
 11035  0506  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 11036  0507  3E04               	addlw	4
 11037  0508  0086               	movwf	6
 11038  0509  3001               	movlw	1	; select bank2/3
 11039  050A  0087               	movwf	7
 11040  050B  0801               	movf	1,w
 11041  050C  3EFF               	addlw	255
 11042  050D  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 11043  050E  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 11044  050F  00B7               	movwf	Sensor_Acq_ExecutePacket@packet_counter
 11045  0510                     l6515:	
 11046                           
 11047                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
 11048  0510  01B1               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
 11049  0511  0AB1               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
 11050  0512                     l6517:	
 11051                           
 11052                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
 11053  0512  002E               	movlb	14	; select bank14
 11054  0513  0198               	clrf	24	;volatile
 11055  0514                     l6519:	
 11056                           
 11057                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
 11058  0514  3040               	movlw	64
 11059  0515  002F               	movlb	15	; select bank15
 11060  0516  0098               	movwf	24	;volatile
 11061  0517                     l6521:	
 11062                           
 11063                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
 11064  0517  0022               	movlb	2	; select bank2
 11065  0518  101D               	bcf	29,0	;volatile
 11066  0519                     l6523:	
 11067                           
 11068                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
 11069  0519  0020               	movlb	0	; select bank0
 11070  051A  01A1               	clrf	Sensor_loadADCSettings@adc_index
 11071  051B  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 11072  051C  3186  267C  3184   	fcall	_Sensor_loadADCSettings
 11073  051F                     l6525:	
 11074                           
 11075                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
 11076  051F  0020               	movlb	0	; select bank0
 11077  0520  01A1               	clrf	Sensor_loadADCSettings@adc_index
 11078  0521  0AA1               	incf	Sensor_loadADCSettings@adc_index,f
 11079  0522  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 11080  0523  3186  267C  3184   	fcall	_Sensor_loadADCSettings
 11081  0526                     l6527:	
 11082                           
 11083                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
 11084  0526  0020               	movlb	0	; select bank0
 11085  0527  106D               	bcf	_sensor_globalFlags,0	;volatile
 11086  0528                     l6529:	
 11087                           
 11088                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
 11089  0528  116D               	bcf	_sensor_globalFlags,2	;volatile
 11090  0529                     l6531:	
 11091                           
 11092                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
 11093  0529  11ED               	bcf	_sensor_globalFlags,3	;volatile
 11094  052A                     l6533:	
 11095                           
 11096                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
 11097  052A  086F               	movf	_sample_period,w
 11098  052B  3187  27FB  3184   	fcall	_TMR2_LoadPeriodRegister
 11099  052E                     l6535:	
 11100                           
 11101                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
 11102  052E  3190  20C7  3184   	fcall	_TMR2_StartTimer
 11103  0531                     l6537:	
 11104                           
 11105                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
 11106  0531  0020               	movlb	0	; select bank0
 11107  0532  01DD               	clrf	_packet_noise
 11108  0533  01DE               	clrf	_packet_noise+1
 11109  0534                     l6539:	
 11110                           
 11111                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
 11112  0534  0831               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
 11113  0535  1D03               	btfss	3,2
 11114  0536  2D38               	goto	u6061
 11115  0537  2D39               	goto	u6060
 11116  0538                     u6061:	
 11117  0538  2D44               	goto	l286
 11118  0539                     u6060:	
 11119  0539                     l6541:	
 11120                           
 11121                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
 11122  0539  1B11               	btfsc	17,6	;volatile
 11123  053A  2D3C               	goto	u6071
 11124  053B  2D3D               	goto	u6070
 11125  053C                     u6071:	
 11126  053C  2D3E               	goto	l288
 11127  053D                     u6070:	
 11128  053D                     l6543:	
 11129  053D  10ED               	bcf	_sensor_globalFlags,1	;volatile
 11130  053E                     l288:	
 11131  053E  1F11               	btfss	17,6	;volatile
 11132  053F  2D41               	goto	u6081
 11133  0540  2D42               	goto	u6080
 11134  0541                     u6081:	
 11135  0541  2D3E               	goto	l288
 11136  0542                     u6080:	
 11137  0542                     l290:	
 11138                           
 11139                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
 11140  0542  1311               	bcf	17,6	;volatile
 11141                           
 11142                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
 11143  0543  2D4E               	goto	l6547
 11144  0544                     l286:	
 11145                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
 11146                           
 11147                           
 11148                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
 11149  0544  1B12               	btfsc	18,6	;volatile
 11150  0545  2D47               	goto	u6091
 11151  0546  2D48               	goto	u6090
 11152  0547                     u6091:	
 11153  0547  2D49               	goto	l293
 11154  0548                     u6090:	
 11155  0548                     l6545:	
 11156  0548  10ED               	bcf	_sensor_globalFlags,1	;volatile
 11157  0549                     l293:	
 11158  0549  1F12               	btfss	18,6	;volatile
 11159  054A  2D4C               	goto	u6101
 11160  054B  2D4D               	goto	u6100
 11161  054C                     u6101:	
 11162  054C  2D49               	goto	l293
 11163  054D                     u6100:	
 11164  054D                     l295:	
 11165                           
 11166                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
 11167  054D  1312               	bcf	18,6	;volatile
 11168  054E                     l6547:	
 11169                           
 11170                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
 11171  054E  3021               	movlw	33
 11172  054F  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 11173  0550  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 11174  0551  002E               	movlb	14	; select bank14
 11175  0552  0698               	xorwf	24,f	;volatile
 11176                           
 11177                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
 11178  0553  3021               	movlw	33
 11179  0554  0020               	movlb	0	; select bank0
 11180  0555  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 11181  0556  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 11182  0557  002F               	movlb	15	; select bank15
 11183  0558  0698               	xorwf	24,f	;volatile
 11184                           
 11185                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
 11186  0559  30C0               	movlw	192
 11187  055A  0020               	movlb	0	; select bank0
 11188  055B  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 11189  055C  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 11190  055D  002E               	movlb	14	; select bank14
 11191  055E  0694               	xorwf	20,f	;volatile
 11192                           
 11193                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
 11194  055F  30C0               	movlw	192
 11195  0560  0020               	movlb	0	; select bank0
 11196  0561  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 11197  0562  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 11198  0563  002F               	movlb	15	; select bank15
 11199  0564  0694               	xorwf	20,f	;volatile
 11200  0565                     l6549:	
 11201                           
 11202                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
 11203  0565  0020               	movlb	0	; select bank0
 11204  0566  1837               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
 11205  0567  2D69               	goto	u6111
 11206  0568  2D6A               	goto	u6110
 11207  0569                     u6111:	
 11208  0569  2DB5               	goto	l6563
 11209  056A                     u6110:	
 11210  056A                     l6551:	
 11211                           
 11212                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
 11213  056A  002E               	movlb	14	; select bank14
 11214  056B  081A               	movf	26,w	;volatile
 11215  056C  0020               	movlb	0	; select bank0
 11216  056D  07D5               	addwf	_packet_sample,f
 11217  056E  002E               	movlb	14	; select bank14
 11218  056F  081B               	movf	27,w	;volatile
 11219  0570  0020               	movlb	0	; select bank0
 11220  0571  3DD6               	addwfc	_packet_sample+1,f
 11221                           
 11222                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
 11223  0572  002F               	movlb	15	; select bank15
 11224  0573  081A               	movf	26,w	;volatile
 11225  0574  0020               	movlb	0	; select bank0
 11226  0575  07D7               	addwf	_packet_sample+2,f
 11227  0576  002F               	movlb	15	; select bank15
 11228  0577  081B               	movf	27,w	;volatile
 11229  0578  0020               	movlb	0	; select bank0
 11230  0579  3DD8               	addwfc	_packet_sample+3,f
 11231  057A                     l6553:	
 11232                           
 11233                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
 11234  057A  0832               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
 11235  057B  1D03               	btfss	3,2
 11236  057C  2D7E               	goto	u6121
 11237  057D  2D7F               	goto	u6120
 11238  057E                     u6121:	
 11239  057E  2D9A               	goto	l6559
 11240  057F                     u6120:	
 11241  057F                     l6555:	
 11242                           
 11243                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
 11244  057F  002E               	movlb	14	; select bank14
 11245  0580  081A               	movf	26,w	;volatile
 11246  0581  0020               	movlb	0	; select bank0
 11247  0582  0235               	subwf	Sensor_Acq_ExecutePacket@last_b,w
 11248  0583  00A0               	movwf	abs@a
 11249  0584  002E               	movlb	14	; select bank14
 11250  0585  081B               	movf	27,w	;volatile
 11251  0586  0020               	movlb	0	; select bank0
 11252  0587  3B36               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
 11253  0588  00A1               	movwf	abs@a+1
 11254  0589  3193  23F0  3184   	fcall	_abs
 11255  058C  0020               	movlb	0	; select bank0
 11256  058D  0820               	movf	?_abs,w
 11257  058E  07DD               	addwf	_packet_noise,f
 11258  058F  0821               	movf	?_abs+1,w
 11259  0590  3DDE               	addwfc	_packet_noise+1,f
 11260  0591                     l6557:	
 11261                           
 11262                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
 11263  0591  002E               	movlb	14	; select bank14
 11264  0592  081B               	movf	27,w	;volatile
 11265  0593  0020               	movlb	0	; select bank0
 11266  0594  00B6               	movwf	Sensor_Acq_ExecutePacket@last_b+1
 11267  0595  002E               	movlb	14	; select bank14
 11268  0596  081A               	movf	26,w	;volatile
 11269  0597  0020               	movlb	0	; select bank0
 11270  0598  00B5               	movwf	Sensor_Acq_ExecutePacket@last_b
 11271                           
 11272                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
 11273  0599  2DF8               	goto	l6575
 11274  059A                     l6559:	
 11275                           
 11276                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
 11277  059A  002F               	movlb	15	; select bank15
 11278  059B  081A               	movf	26,w	;volatile
 11279  059C  0020               	movlb	0	; select bank0
 11280  059D  0235               	subwf	Sensor_Acq_ExecutePacket@last_b,w
 11281  059E  00A0               	movwf	abs@a
 11282  059F  002F               	movlb	15	; select bank15
 11283  05A0  081B               	movf	27,w	;volatile
 11284  05A1  0020               	movlb	0	; select bank0
 11285  05A2  3B36               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
 11286  05A3  00A1               	movwf	abs@a+1
 11287  05A4  3193  23F0  3184   	fcall	_abs
 11288  05A7  0020               	movlb	0	; select bank0
 11289  05A8  0820               	movf	?_abs,w
 11290  05A9  07DD               	addwf	_packet_noise,f
 11291  05AA  0821               	movf	?_abs+1,w
 11292  05AB  3DDE               	addwfc	_packet_noise+1,f
 11293  05AC                     l6561:	
 11294                           
 11295                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
 11296  05AC  002F               	movlb	15	; select bank15
 11297  05AD  081B               	movf	27,w	;volatile
 11298  05AE  0020               	movlb	0	; select bank0
 11299  05AF  00B6               	movwf	Sensor_Acq_ExecutePacket@last_b+1
 11300  05B0  002F               	movlb	15	; select bank15
 11301  05B1  081A               	movf	26,w	;volatile
 11302  05B2  0020               	movlb	0	; select bank0
 11303  05B3  00B5               	movwf	Sensor_Acq_ExecutePacket@last_b
 11304  05B4  2DF8               	goto	l6575
 11305  05B5                     l6563:	
 11306                           
 11307                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
 11308  05B5  002E               	movlb	14	; select bank14
 11309  05B6  081A               	movf	26,w	;volatile
 11310  05B7  0020               	movlb	0	; select bank0
 11311  05B8  02D5               	subwf	_packet_sample,f
 11312  05B9  002E               	movlb	14	; select bank14
 11313  05BA  081B               	movf	27,w	;volatile
 11314  05BB  0020               	movlb	0	; select bank0
 11315  05BC  3BD6               	subwfb	_packet_sample+1,f
 11316                           
 11317                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
 11318  05BD  002F               	movlb	15	; select bank15
 11319  05BE  081A               	movf	26,w	;volatile
 11320  05BF  0020               	movlb	0	; select bank0
 11321  05C0  02D7               	subwf	_packet_sample+2,f
 11322  05C1  002F               	movlb	15	; select bank15
 11323  05C2  081B               	movf	27,w	;volatile
 11324  05C3  0020               	movlb	0	; select bank0
 11325  05C4  3BD8               	subwfb	_packet_sample+3,f
 11326  05C5                     l6565:	
 11327                           
 11328                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
 11329  05C5  0832               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
 11330  05C6  1D03               	btfss	3,2
 11331  05C7  2DC9               	goto	u6131
 11332  05C8  2DCA               	goto	u6130
 11333  05C9                     u6131:	
 11334  05C9  2DE5               	goto	l6571
 11335  05CA                     u6130:	
 11336  05CA                     l6567:	
 11337                           
 11338                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
 11339  05CA  002E               	movlb	14	; select bank14
 11340  05CB  081A               	movf	26,w	;volatile
 11341  05CC  0020               	movlb	0	; select bank0
 11342  05CD  0233               	subwf	Sensor_Acq_ExecutePacket@last_a,w
 11343  05CE  00A0               	movwf	abs@a
 11344  05CF  002E               	movlb	14	; select bank14
 11345  05D0  081B               	movf	27,w	;volatile
 11346  05D1  0020               	movlb	0	; select bank0
 11347  05D2  3B34               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
 11348  05D3  00A1               	movwf	abs@a+1
 11349  05D4  3193  23F0  3184   	fcall	_abs
 11350  05D7  0020               	movlb	0	; select bank0
 11351  05D8  0820               	movf	?_abs,w
 11352  05D9  07DD               	addwf	_packet_noise,f
 11353  05DA  0821               	movf	?_abs+1,w
 11354  05DB  3DDE               	addwfc	_packet_noise+1,f
 11355  05DC                     l6569:	
 11356                           
 11357                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
 11358  05DC  002E               	movlb	14	; select bank14
 11359  05DD  081B               	movf	27,w	;volatile
 11360  05DE  0020               	movlb	0	; select bank0
 11361  05DF  00B4               	movwf	Sensor_Acq_ExecutePacket@last_a+1
 11362  05E0  002E               	movlb	14	; select bank14
 11363  05E1  081A               	movf	26,w	;volatile
 11364  05E2  0020               	movlb	0	; select bank0
 11365  05E3  00B3               	movwf	Sensor_Acq_ExecutePacket@last_a
 11366                           
 11367                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
 11368  05E4  2DF8               	goto	l6575
 11369  05E5                     l6571:	
 11370                           
 11371                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
 11372  05E5  002F               	movlb	15	; select bank15
 11373  05E6  081A               	movf	26,w	;volatile
 11374  05E7  0020               	movlb	0	; select bank0
 11375  05E8  0233               	subwf	Sensor_Acq_ExecutePacket@last_a,w
 11376  05E9  00A0               	movwf	abs@a
 11377  05EA  002F               	movlb	15	; select bank15
 11378  05EB  081B               	movf	27,w	;volatile
 11379  05EC  0020               	movlb	0	; select bank0
 11380  05ED  3B34               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
 11381  05EE  00A1               	movwf	abs@a+1
 11382  05EF  3193  23F0  3184   	fcall	_abs
 11383  05F2  0020               	movlb	0	; select bank0
 11384  05F3  0820               	movf	?_abs,w
 11385  05F4  07DD               	addwf	_packet_noise,f
 11386  05F5  0821               	movf	?_abs+1,w
 11387  05F6  3DDE               	addwfc	_packet_noise+1,f
 11388  05F7  2DDC               	goto	l6569
 11389  05F8                     l6575:	
 11390                           
 11391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
 11392  05F8  0837               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
 11393  05F9  1D03               	btfss	3,2
 11394  05FA  2DFC               	goto	u6141
 11395  05FB  2DFD               	goto	u6140
 11396  05FC                     u6141:	
 11397  05FC  2DFE               	goto	l6579
 11398  05FD                     u6140:	
 11399  05FD                     l6577:	
 11400                           
 11401                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
 11402  05FD  146D               	bsf	_sensor_globalFlags,0	;volatile
 11403  05FE                     l6579:	
 11404                           
 11405                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
 11406  05FE  3001               	movlw	1
 11407  05FF  02B7               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
 11408  0600                     l6581:	
 11409                           
 11410                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
 11411  0600  1CED               	btfss	_sensor_globalFlags,1	;volatile
 11412  0601  2E03               	goto	u6151
 11413  0602  2E04               	goto	u6150
 11414  0603                     u6151:	
 11415  0603  2E06               	goto	l303
 11416  0604                     u6150:	
 11417  0604                     l6583:	
 11418                           
 11419                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
 11420  0604  156D               	bsf	_sensor_globalFlags,2	;volatile
 11421                           
 11422                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
 11423  0605  146D               	bsf	_sensor_globalFlags,0	;volatile
 11424  0606                     l303:	
 11425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
 11426                           
 11427                           
 11428                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
 11429  0606  14ED               	bsf	_sensor_globalFlags,1	;volatile
 11430                           
 11431                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
 11432  0607  1C6D               	btfss	_sensor_globalFlags,0	;volatile
 11433  0608  2E0A               	goto	u6161
 11434  0609  2E0B               	goto	u6160
 11435  060A                     u6161:	
 11436  060A  2D34               	goto	l6539
 11437  060B                     u6160:	
 11438  060B                     l6585:	
 11439                           
 11440                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
 11441  060B  3190  20CA  3184   	fcall	_TMR2_StopTimer
 11442  060E                     l6587:	
 11443                           
 11444                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
 11445  060E  0020               	movlb	0	; select bank0
 11446  060F  082C               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
 11447  0610  002E               	movlb	14	; select bank14
 11448  0611  0092               	movwf	18	;volatile
 11449  0612                     l6589:	
 11450                           
 11451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
 11452  0612  0020               	movlb	0	; select bank0
 11453  0613  082D               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
 11454  0614  002E               	movlb	14	; select bank14
 11455  0615  0093               	movwf	19	;volatile
 11456  0616                     l6591:	
 11457                           
 11458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
 11459  0616  0020               	movlb	0	; select bank0
 11460  0617  082E               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
 11461  0618  002F               	movlb	15	; select bank15
 11462  0619  0093               	movwf	19	;volatile
 11463  061A                     l6593:	
 11464                           
 11465                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
 11466  061A  0020               	movlb	0	; select bank0
 11467  061B  1D6D               	btfss	_sensor_globalFlags,2	;volatile
 11468  061C  2E1E               	goto	u6171
 11469  061D  2E1F               	goto	u6170
 11470  061E                     u6171:	
 11471  061E  2E21               	goto	l305
 11472  061F                     u6170:	
 11473  061F                     l6595:	
 11474                           
 11475                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
 11476  061F  30FB               	movlw	251
 11477  0620  2E7B               	goto	l270
 11478  0621                     l305:	
 11479                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
 11480                           
 11481                           
 11482                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
 11483  0621  1DED               	btfss	_sensor_globalFlags,3	;volatile
 11484  0622  2E24               	goto	u6181
 11485  0623  2E25               	goto	u6180
 11486  0624                     u6181:	
 11487  0624  2E27               	goto	l6603
 11488  0625                     u6180:	
 11489  0625                     l6599:	
 11490                           
 11491                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
 11492  0625  30FA               	movlw	250
 11493  0626  2E7B               	goto	l270
 11494  0627                     l6603:	
 11495                           
 11496                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
 11497  0627  082F               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
 11498  0628  1903               	btfsc	3,2
 11499  0629  2E2B               	goto	u6191
 11500  062A  2E2C               	goto	u6190
 11501  062B                     u6191:	
 11502  062B  2E32               	goto	l6607
 11503  062C                     u6190:	
 11504  062C                     l6605:	
 11505                           
 11506                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
 11507  062C  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 11508  062D  3E08               	addlw	8
 11509  062E  0086               	movwf	6
 11510  062F  3001               	movlw	1	; select bank2/3
 11511  0630  0087               	movwf	7
 11512  0631  1181               	bcf	1,3
 11513  0632                     l6607:	
 11514                           
 11515                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
 11516  0632  0830               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
 11517  0633  1903               	btfsc	3,2
 11518  0634  2E36               	goto	u6201
 11519  0635  2E37               	goto	u6200
 11520  0636                     u6201:	
 11521  0636  2E3D               	goto	l6611
 11522  0637                     u6200:	
 11523  0637                     l6609:	
 11524                           
 11525                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
 11526  0637  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 11527  0638  3E08               	addlw	8
 11528  0639  0086               	movwf	6
 11529  063A  3001               	movlw	1	; select bank2/3
 11530  063B  0087               	movwf	7
 11531  063C  1181               	bcf	1,3
 11532  063D                     l6611:	
 11533                           
 11534                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
 11535  063D  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 11536  063E  3192  226C  3184   	fcall	_Sensor_isEnabled
 11537  0641  3A00               	xorlw	0
 11538  0642  1903               	skipnz
 11539  0643  2E45               	goto	u6211
 11540  0644  2E46               	goto	u6210
 11541  0645                     u6211:	
 11542  0645  2E55               	goto	l6617
 11543  0646                     u6210:	
 11544  0646                     l6613:	
 11545  0646  0020               	movlb	0	; select bank0
 11546  0647  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 11547  0648  3191  2194  3184   	fcall	_Sensor_isCalibrated
 11548  064B  3A00               	xorlw	0
 11549  064C  1D03               	skipz
 11550  064D  2E4F               	goto	u6221
 11551  064E  2E50               	goto	u6220
 11552  064F                     u6221:	
 11553  064F  2E55               	goto	l6617
 11554  0650                     u6220:	
 11555  0650                     l6615:	
 11556                           
 11557                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
 11558  0650  0020               	movlb	0	; select bank0
 11559  0651  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 11560  0652  318E  260D  3184   	fcall	_Sensor_autoCalibration
 11561  0655                     l6617:	
 11562                           
 11563                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
 11564  0655  0020               	movlb	0	; select bank0
 11565  0656  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 11566  0657  3192  226C  3184   	fcall	_Sensor_isEnabled
 11567  065A  3A00               	xorlw	0
 11568  065B  1903               	skipnz
 11569  065C  2E5E               	goto	u6231
 11570  065D  2E5F               	goto	u6230
 11571  065E                     u6231:	
 11572  065E  2E6E               	goto	l6623
 11573  065F                     u6230:	
 11574  065F                     l6619:	
 11575  065F  0020               	movlb	0	; select bank0
 11576  0660  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 11577  0661  3191  2194  3184   	fcall	_Sensor_isCalibrated
 11578  0664  3A00               	xorlw	0
 11579  0665  1D03               	skipz
 11580  0666  2E68               	goto	u6241
 11581  0667  2E69               	goto	u6240
 11582  0668                     u6241:	
 11583  0668  2E6E               	goto	l6623
 11584  0669                     u6240:	
 11585  0669                     l6621:	
 11586                           
 11587                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
 11588  0669  0020               	movlb	0	; select bank0
 11589  066A  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 11590  066B  318E  260D  3184   	fcall	_Sensor_autoCalibration
 11591  066E                     l6623:	
 11592                           
 11593                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
 11594  066E  002E               	movlb	14	; select bank14
 11595  066F  0196               	clrf	22	;volatile
 11596  0670                     l6625:	
 11597                           
 11598                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
 11599  0670  002F               	movlb	15	; select bank15
 11600  0671  0196               	clrf	22	;volatile
 11601  0672                     l6627:	
 11602                           
 11603                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
 11604  0672  002E               	movlb	14	; select bank14
 11605  0673  0197               	clrf	23	;volatile
 11606  0674                     l6629:	
 11607                           
 11608                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
 11609  0674  002F               	movlb	15	; select bank15
 11610  0675  0197               	clrf	23	;volatile
 11611  0676                     l6631:	
 11612                           
 11613                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
 11614  0676  002E               	movlb	14	; select bank14
 11615  0677  1011               	bcf	17,0	;volatile
 11616  0678                     l6633:	
 11617                           
 11618                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
 11619  0678  002F               	movlb	15	; select bank15
 11620  0679  1011               	bcf	17,0	;volatile
 11621  067A  2CA1               	goto	l6463
 11622  067B                     l270:	
 11623  067B  0008               	return
 11624  067C                     __end_of_Sensor_Acq_ExecutePacket:	
 11625                           
 11626                           	psect	text52
 11627  10CA                     __ptext52:	
 11628 ;; *************** function _TMR2_StopTimer *****************
 11629 ;; Defined at:
 11630 ;;		line 85 in file "mcc_generated_files/tmr2.c"
 11631 ;; Parameters:    Size  Location     Type
 11632 ;;		None
 11633 ;; Auto vars:     Size  Location     Type
 11634 ;;		None
 11635 ;; Return value:  Size  Location     Type
 11636 ;;                  1    wreg      void 
 11637 ;; Registers used:
 11638 ;;		None
 11639 ;; Tracked objects:
 11640 ;;		On entry : 0/0
 11641 ;;		On exit  : 0/0
 11642 ;;		Unchanged: 0/0
 11643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11644 ;;      Params:         0       0       0       0       0       0       0       0
 11645 ;;      Locals:         0       0       0       0       0       0       0       0
 11646 ;;      Temps:          0       0       0       0       0       0       0       0
 11647 ;;      Totals:         0       0       0       0       0       0       0       0
 11648 ;;Total ram usage:        0 bytes
 11649 ;; Hardware stack levels used:    1
 11650 ;; Hardware stack levels required when called:    5
 11651 ;; This function calls:
 11652 ;;		Nothing
 11653 ;; This function is called by:
 11654 ;;		_Sensor_Acq_ExecutePacket
 11655 ;; This function uses a non-reentrant model
 11656 ;;
 11657                           
 11658                           
 11659                           ;psect for function _TMR2_StopTimer
 11660  10CA                     _TMR2_StopTimer:	
 11661  10CA                     l6411:	
 11662                           ;incstack = 0
 11663                           ; Regs used in _TMR2_StopTimer: []
 11664                           
 11665                           
 11666                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
 11667  10CA  0020               	movlb	0	; select bank0
 11668  10CB  111C               	bcf	28,2	;volatile
 11669  10CC                     l805:	
 11670  10CC  0008               	return
 11671  10CD                     __end_of_TMR2_StopTimer:	
 11672                           
 11673                           	psect	text53
 11674  10C7                     __ptext53:	
 11675 ;; *************** function _TMR2_StartTimer *****************
 11676 ;; Defined at:
 11677 ;;		line 79 in file "mcc_generated_files/tmr2.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;		None
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;		None
 11682 ;; Return value:  Size  Location     Type
 11683 ;;                  1    wreg      void 
 11684 ;; Registers used:
 11685 ;;		None
 11686 ;; Tracked objects:
 11687 ;;		On entry : 0/0
 11688 ;;		On exit  : 0/0
 11689 ;;		Unchanged: 0/0
 11690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11691 ;;      Params:         0       0       0       0       0       0       0       0
 11692 ;;      Locals:         0       0       0       0       0       0       0       0
 11693 ;;      Temps:          0       0       0       0       0       0       0       0
 11694 ;;      Totals:         0       0       0       0       0       0       0       0
 11695 ;;Total ram usage:        0 bytes
 11696 ;; Hardware stack levels used:    1
 11697 ;; Hardware stack levels required when called:    5
 11698 ;; This function calls:
 11699 ;;		Nothing
 11700 ;; This function is called by:
 11701 ;;		_Sensor_Acq_ExecutePacket
 11702 ;; This function uses a non-reentrant model
 11703 ;;
 11704                           
 11705                           
 11706                           ;psect for function _TMR2_StartTimer
 11707  10C7                     _TMR2_StartTimer:	
 11708  10C7                     l6409:	
 11709                           ;incstack = 0
 11710                           ; Regs used in _TMR2_StartTimer: []
 11711                           
 11712                           
 11713                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
 11714  10C7  0020               	movlb	0	; select bank0
 11715  10C8  151C               	bsf	28,2	;volatile
 11716  10C9                     l802:	
 11717  10C9  0008               	return
 11718  10CA                     __end_of_TMR2_StartTimer:	
 11719                           
 11720                           	psect	text54
 11721  07FB                     __ptext54:	
 11722 ;; *************** function _TMR2_LoadPeriodRegister *****************
 11723 ;; Defined at:
 11724 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 11725 ;; Parameters:    Size  Location     Type
 11726 ;;  periodVal       1    wreg     unsigned char 
 11727 ;; Auto vars:     Size  Location     Type
 11728 ;;  periodVal       1    0[BANK0 ] unsigned char 
 11729 ;; Return value:  Size  Location     Type
 11730 ;;                  1    wreg      void 
 11731 ;; Registers used:
 11732 ;;		wreg
 11733 ;; Tracked objects:
 11734 ;;		On entry : 0/0
 11735 ;;		On exit  : 0/0
 11736 ;;		Unchanged: 0/0
 11737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11738 ;;      Params:         0       0       0       0       0       0       0       0
 11739 ;;      Locals:         0       1       0       0       0       0       0       0
 11740 ;;      Temps:          0       0       0       0       0       0       0       0
 11741 ;;      Totals:         0       1       0       0       0       0       0       0
 11742 ;;Total ram usage:        1 bytes
 11743 ;; Hardware stack levels used:    1
 11744 ;; Hardware stack levels required when called:    5
 11745 ;; This function calls:
 11746 ;;		Nothing
 11747 ;; This function is called by:
 11748 ;;		_Sensor_Acq_ExecutePacket
 11749 ;; This function uses a non-reentrant model
 11750 ;;
 11751                           
 11752                           
 11753                           ;psect for function _TMR2_LoadPeriodRegister
 11754  07FB                     _TMR2_LoadPeriodRegister:	
 11755                           
 11756                           ;incstack = 0
 11757                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
 11758                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 11759  07FB  0020               	movlb	0	; select bank0
 11760  07FC  00A0               	movwf	TMR2_LoadPeriodRegister@periodVal
 11761  07FD                     l6407:	
 11762                           
 11763                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
 11764  07FD  0820               	movf	TMR2_LoadPeriodRegister@periodVal,w
 11765  07FE  009B               	movwf	27	;volatile
 11766  07FF                     l814:	
 11767  07FF  0008               	return
 11768  0800                     __end_of_TMR2_LoadPeriodRegister:	
 11769                           
 11770                           	psect	text55
 11771  067C                     __ptext55:	
 11772 ;; *************** function _Sensor_loadADCSettings *****************
 11773 ;; Defined at:
 11774 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;  sensor          1    wreg     PTR struct .
 11777 ;;		 -> NULL(0), mtouch_sensor(27), 
 11778 ;;  adc_index       1    1[BANK0 ] unsigned char 
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;  sensor          1    8[BANK0 ] PTR struct .
 11781 ;;		 -> NULL(0), mtouch_sensor(27), 
 11782 ;;  addressOffse    1    7[BANK0 ] unsigned char 
 11783 ;; Return value:  Size  Location     Type
 11784 ;;                  1    wreg      void 
 11785 ;; Registers used:
 11786 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11787 ;; Tracked objects:
 11788 ;;		On entry : 0/0
 11789 ;;		On exit  : 0/0
 11790 ;;		Unchanged: 0/0
 11791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11792 ;;      Params:         0       1       0       0       0       0       0       0
 11793 ;;      Locals:         0       4       0       0       0       0       0       0
 11794 ;;      Temps:          0       3       0       0       0       0       0       0
 11795 ;;      Totals:         0       8       0       0       0       0       0       0
 11796 ;;Total ram usage:        8 bytes
 11797 ;; Hardware stack levels used:    1
 11798 ;; Hardware stack levels required when called:    6
 11799 ;; This function calls:
 11800 ;;		_Sensor_isCalibrated
 11801 ;;		_Sensor_isCalibratingAcqTime
 11802 ;; This function is called by:
 11803 ;;		_Sensor_Acq_ExecutePacket
 11804 ;; This function uses a non-reentrant model
 11805 ;;
 11806                           
 11807                           
 11808                           ;psect for function _Sensor_loadADCSettings
 11809  067C                     _Sensor_loadADCSettings:	
 11810                           
 11811                           ;incstack = 0
 11812                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 11813                           ;Sensor_loadADCSettings@sensor stored from wreg
 11814  067C  0020               	movlb	0	; select bank0
 11815  067D  00A8               	movwf	Sensor_loadADCSettings@sensor
 11816  067E                     l6377:	
 11817                           
 11818                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
 11819  067E  0828               	movf	Sensor_loadADCSettings@sensor,w
 11820  067F  1D03               	btfss	3,2
 11821  0680  2E82               	goto	u5791
 11822  0681  2E83               	goto	u5790
 11823  0682                     u5791:	
 11824  0682  2E84               	goto	l6381
 11825  0683                     u5790:	
 11826  0683  2F4D               	goto	l253
 11827  0684                     l6381:	
 11828                           
 11829                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
 11830  0684  0821               	movf	Sensor_loadADCSettings@adc_index,w
 11831  0685  1D03               	btfss	3,2
 11832  0686  2E88               	goto	u5801
 11833  0687  2E89               	goto	u5800
 11834  0688                     u5801:	
 11835  0688  2E8C               	goto	l6385
 11836  0689                     u5800:	
 11837  0689                     l6383:	
 11838  0689  01A5               	clrf	_Sensor_loadADCSettings$562
 11839  068A  01A6               	clrf	_Sensor_loadADCSettings$562+1
 11840  068B  2E90               	goto	l257
 11841  068C                     l6385:	
 11842  068C  3080               	movlw	128
 11843  068D  00A5               	movwf	_Sensor_loadADCSettings$562
 11844  068E  3000               	movlw	0
 11845  068F  00A6               	movwf	_Sensor_loadADCSettings$562+1
 11846  0690                     l257:	
 11847  0690  0825               	movf	_Sensor_loadADCSettings$562,w
 11848  0691  00A2               	movwf	??_Sensor_loadADCSettings
 11849  0692  0822               	movf	??_Sensor_loadADCSettings,w
 11850  0693  00A7               	movwf	Sensor_loadADCSettings@addressOffset
 11851  0694                     l6387:	
 11852                           
 11853                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
 11854  0694  0A28               	incf	Sensor_loadADCSettings@sensor,w
 11855  0695  0086               	movwf	6
 11856  0696  3001               	movlw	1	; select bank2/3
 11857  0697  0087               	movwf	7
 11858  0698  0801               	movf	1,w
 11859  0699  00A2               	movwf	??_Sensor_loadADCSettings
 11860  069A  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 11861  069B  3E11               	addlw	17
 11862  069C  00A3               	movwf	??_Sensor_loadADCSettings+1
 11863  069D  01A4               	clrf	??_Sensor_loadADCSettings+2
 11864  069E  3007               	movlw	7
 11865  069F  3DA4               	addwfc	??_Sensor_loadADCSettings+2,f
 11866  06A0  0823               	movf	??_Sensor_loadADCSettings+1,w
 11867  06A1  0086               	movwf	6
 11868  06A2  0824               	movf	??_Sensor_loadADCSettings+2,w
 11869  06A3  0087               	movwf	7
 11870  06A4  0822               	movf	??_Sensor_loadADCSettings,w
 11871  06A5  0081               	movwf	1
 11872  06A6                     l6389:	
 11873                           
 11874                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
 11875  06A6  0828               	movf	Sensor_loadADCSettings@sensor,w
 11876  06A7  3E05               	addlw	5
 11877  06A8  0086               	movwf	6
 11878  06A9  3001               	movlw	1	; select bank2/3
 11879  06AA  0087               	movwf	7
 11880  06AB  0801               	movf	1,w
 11881  06AC  00A2               	movwf	??_Sensor_loadADCSettings
 11882  06AD  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 11883  06AE  3E19               	addlw	25
 11884  06AF  00A3               	movwf	??_Sensor_loadADCSettings+1
 11885  06B0  01A4               	clrf	??_Sensor_loadADCSettings+2
 11886  06B1  3007               	movlw	7
 11887  06B2  3DA4               	addwfc	??_Sensor_loadADCSettings+2,f
 11888  06B3  0823               	movf	??_Sensor_loadADCSettings+1,w
 11889  06B4  0086               	movwf	6
 11890  06B5  0824               	movf	??_Sensor_loadADCSettings+2,w
 11891  06B6  0087               	movwf	7
 11892  06B7  0822               	movf	??_Sensor_loadADCSettings,w
 11893  06B8  0081               	movwf	1
 11894  06B9                     l6391:	
 11895                           
 11896                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
 11897  06B9  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 11898  06BA  3E13               	addlw	19
 11899  06BB  00A2               	movwf	??_Sensor_loadADCSettings
 11900  06BC  01A3               	clrf	??_Sensor_loadADCSettings+1
 11901  06BD  3007               	movlw	7
 11902  06BE  3DA3               	addwfc	??_Sensor_loadADCSettings+1,f
 11903  06BF  0822               	movf	??_Sensor_loadADCSettings,w
 11904  06C0  0086               	movwf	6
 11905  06C1  0823               	movf	??_Sensor_loadADCSettings+1,w
 11906  06C2  0087               	movwf	7
 11907  06C3  3050               	movlw	80
 11908  06C4  0081               	movwf	1
 11909  06C5                     l6393:	
 11910                           
 11911                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
 11912  06C5  30FE               	movlw	254
 11913  06C6  00A2               	movwf	??_Sensor_loadADCSettings
 11914  06C7  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 11915  06C8  3E18               	addlw	24
 11916  06C9  0086               	movwf	6
 11917  06CA  0187               	clrf	7
 11918  06CB  3007               	movlw	7
 11919  06CC  3D87               	addwfc	7,f
 11920  06CD  0822               	movf	??_Sensor_loadADCSettings,w
 11921  06CE  0581               	andwf	1,f
 11922  06CF                     l6395:	
 11923                           
 11924                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
 11925  06CF  0828               	movf	Sensor_loadADCSettings@sensor,w
 11926  06D0  3191  2194  3186   	fcall	_Sensor_isCalibrated
 11927  06D3  3A00               	xorlw	0
 11928  06D4  1903               	skipnz
 11929  06D5  2ED7               	goto	u5811
 11930  06D6  2ED8               	goto	u5810
 11931  06D7                     u5811:	
 11932  06D7  2F00               	goto	l6399
 11933  06D8                     u5810:	
 11934  06D8                     l6397:	
 11935                           
 11936                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
 11937  06D8  0020               	movlb	0	; select bank0
 11938  06D9  0828               	movf	Sensor_loadADCSettings@sensor,w
 11939  06DA  3E02               	addlw	2
 11940  06DB  0086               	movwf	6
 11941  06DC  3001               	movlw	1	; select bank2/3
 11942  06DD  0087               	movwf	7
 11943  06DE  0801               	movf	1,w
 11944  06DF  00A2               	movwf	??_Sensor_loadADCSettings
 11945  06E0  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 11946  06E1  3E16               	addlw	22
 11947  06E2  00A3               	movwf	??_Sensor_loadADCSettings+1
 11948  06E3  01A4               	clrf	??_Sensor_loadADCSettings+2
 11949  06E4  3007               	movlw	7
 11950  06E5  3DA4               	addwfc	??_Sensor_loadADCSettings+2,f
 11951  06E6  0823               	movf	??_Sensor_loadADCSettings+1,w
 11952  06E7  0086               	movwf	6
 11953  06E8  0824               	movf	??_Sensor_loadADCSettings+2,w
 11954  06E9  0087               	movwf	7
 11955  06EA  0822               	movf	??_Sensor_loadADCSettings,w
 11956  06EB  0081               	movwf	1
 11957                           
 11958                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
 11959  06EC  0828               	movf	Sensor_loadADCSettings@sensor,w
 11960  06ED  3E03               	addlw	3
 11961  06EE  0086               	movwf	6
 11962  06EF  3001               	movlw	1	; select bank2/3
 11963  06F0  0087               	movwf	7
 11964  06F1  0801               	movf	1,w
 11965  06F2  00A2               	movwf	??_Sensor_loadADCSettings
 11966  06F3  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 11967  06F4  3E17               	addlw	23
 11968  06F5  00A3               	movwf	??_Sensor_loadADCSettings+1
 11969  06F6  01A4               	clrf	??_Sensor_loadADCSettings+2
 11970  06F7  3007               	movlw	7
 11971  06F8  3DA4               	addwfc	??_Sensor_loadADCSettings+2,f
 11972  06F9  0823               	movf	??_Sensor_loadADCSettings+1,w
 11973  06FA  0086               	movwf	6
 11974  06FB  0824               	movf	??_Sensor_loadADCSettings+2,w
 11975  06FC  0087               	movwf	7
 11976  06FD  0822               	movf	??_Sensor_loadADCSettings,w
 11977  06FE  0081               	movwf	1
 11978                           
 11979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
 11980  06FF  2F38               	goto	l259
 11981  0700                     l6399:	
 11982                           
 11983                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
 11984  0700  0020               	movlb	0	; select bank0
 11985  0701  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 11986  0702  3E16               	addlw	22
 11987  0703  00A2               	movwf	??_Sensor_loadADCSettings
 11988  0704  01A3               	clrf	??_Sensor_loadADCSettings+1
 11989  0705  3007               	movlw	7
 11990  0706  3DA3               	addwfc	??_Sensor_loadADCSettings+1,f
 11991  0707  0822               	movf	??_Sensor_loadADCSettings,w
 11992  0708  0086               	movwf	6
 11993  0709  0823               	movf	??_Sensor_loadADCSettings+1,w
 11994  070A  0087               	movwf	7
 11995  070B  3020               	movlw	32
 11996  070C  0081               	movwf	1
 11997  070D                     l6401:	
 11998                           
 11999                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
 12000  070D  0828               	movf	Sensor_loadADCSettings@sensor,w
 12001  070E  3191  218A  3186   	fcall	_Sensor_isCalibratingAcqTime
 12002  0711  3A00               	xorlw	0
 12003  0712  1903               	skipnz
 12004  0713  2F15               	goto	u5821
 12005  0714  2F16               	goto	u5820
 12006  0715                     u5821:	
 12007  0715  2F2B               	goto	l6405
 12008  0716                     u5820:	
 12009  0716                     l6403:	
 12010                           
 12011                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
 12012  0716  0020               	movlb	0	; select bank0
 12013  0717  0828               	movf	Sensor_loadADCSettings@sensor,w
 12014  0718  3E03               	addlw	3
 12015  0719  0086               	movwf	6
 12016  071A  3001               	movlw	1	; select bank2/3
 12017  071B  0087               	movwf	7
 12018  071C  0801               	movf	1,w
 12019  071D  00A2               	movwf	??_Sensor_loadADCSettings
 12020  071E  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 12021  071F  3E17               	addlw	23
 12022  0720  00A3               	movwf	??_Sensor_loadADCSettings+1
 12023  0721  01A4               	clrf	??_Sensor_loadADCSettings+2
 12024  0722  3007               	movlw	7
 12025  0723  3DA4               	addwfc	??_Sensor_loadADCSettings+2,f
 12026  0724  0823               	movf	??_Sensor_loadADCSettings+1,w
 12027  0725  0086               	movwf	6
 12028  0726  0824               	movf	??_Sensor_loadADCSettings+2,w
 12029  0727  0087               	movwf	7
 12030  0728  0822               	movf	??_Sensor_loadADCSettings,w
 12031  0729  0081               	movwf	1
 12032  072A  2F38               	goto	l259
 12033  072B                     l6405:	
 12034                           
 12035                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
 12036  072B  0020               	movlb	0	; select bank0
 12037  072C  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 12038  072D  3E17               	addlw	23
 12039  072E  00A2               	movwf	??_Sensor_loadADCSettings
 12040  072F  01A3               	clrf	??_Sensor_loadADCSettings+1
 12041  0730  3007               	movlw	7
 12042  0731  3DA3               	addwfc	??_Sensor_loadADCSettings+1,f
 12043  0732  0822               	movf	??_Sensor_loadADCSettings,w
 12044  0733  0086               	movwf	6
 12045  0734  0823               	movf	??_Sensor_loadADCSettings+1,w
 12046  0735  0087               	movwf	7
 12047  0736  3020               	movlw	32
 12048  0737  0081               	movwf	1
 12049  0738                     l259:	
 12050                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
 12051                           
 12052                           
 12053                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
 12054  0738  0828               	movf	Sensor_loadADCSettings@sensor,w
 12055  0739  3E04               	addlw	4
 12056  073A  0086               	movwf	6
 12057  073B  3001               	movlw	1	; select bank2/3
 12058  073C  0087               	movwf	7
 12059  073D  0801               	movf	1,w
 12060  073E  00A2               	movwf	??_Sensor_loadADCSettings
 12061  073F  01A3               	clrf	??_Sensor_loadADCSettings+1
 12062  0740  3009               	movlw	9
 12063  0741                     u5835:	
 12064  0741  35A2               	lslf	??_Sensor_loadADCSettings,f
 12065  0742  0DA3               	rlf	??_Sensor_loadADCSettings+1,f
 12066  0743  0B89               	decfsz	9,f
 12067  0744  2F41               	goto	u5835
 12068  0745  3521               	lslf	Sensor_loadADCSettings@adc_index,w
 12069  0746  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 12070  0747  0086               	movwf	6
 12071  0748  0187               	clrf	7
 12072  0749  0822               	movf	??_Sensor_loadADCSettings,w
 12073  074A  3FC0               	movwi [0]fsr1
 12074  074B  0823               	movf	??_Sensor_loadADCSettings+1,w
 12075  074C  3FC1               	movwi [1]fsr1
 12076  074D                     l253:	
 12077  074D  0008               	return
 12078  074E                     __end_of_Sensor_loadADCSettings:	
 12079                           
 12080                           	psect	text56
 12081  1194                     __ptext56:	
 12082 ;; *************** function _Sensor_isCalibrated *****************
 12083 ;; Defined at:
 12084 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;  sensor          1    wreg     PTR struct .
 12087 ;;		 -> NULL(0), mtouch_sensor(27), 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  sensor          1    0[BANK0 ] PTR struct .
 12090 ;;		 -> NULL(0), mtouch_sensor(27), 
 12091 ;; Return value:  Size  Location     Type
 12092 ;;                  1    wreg      _Bool 
 12093 ;; Registers used:
 12094 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12095 ;; Tracked objects:
 12096 ;;		On entry : 0/0
 12097 ;;		On exit  : 0/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12100 ;;      Params:         0       0       0       0       0       0       0       0
 12101 ;;      Locals:         0       1       0       0       0       0       0       0
 12102 ;;      Temps:          0       0       0       0       0       0       0       0
 12103 ;;      Totals:         0       1       0       0       0       0       0       0
 12104 ;;Total ram usage:        1 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; Hardware stack levels required when called:    5
 12107 ;; This function calls:
 12108 ;;		Nothing
 12109 ;; This function is called by:
 12110 ;;		_Sensor_Acquisition
 12111 ;;		_Sensor_loadADCSettings
 12112 ;;		_Sensor_Acq_ExecutePacket
 12113 ;; This function uses a non-reentrant model
 12114 ;;
 12115                           
 12116                           
 12117                           ;psect for function _Sensor_isCalibrated
 12118  1194                     _Sensor_isCalibrated:	
 12119                           
 12120                           ;incstack = 0
 12121                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 12122                           ;Sensor_isCalibrated@sensor stored from wreg
 12123  1194  0020               	movlb	0	; select bank0
 12124  1195  00A0               	movwf	Sensor_isCalibrated@sensor
 12125  1196                     l6343:	
 12126                           
 12127                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
 12128  1196  0820               	movf	Sensor_isCalibrated@sensor,w
 12129  1197  3E08               	addlw	8
 12130  1198  0086               	movwf	6
 12131  1199  3001               	movlw	1	; select bank2/3
 12132  119A  0087               	movwf	7
 12133  119B  0C01               	rrf	1,w
 12134  119C  0C89               	rrf	9,f
 12135  119D  3901               	andlw	1
 12136  119E                     l396:	
 12137  119E  0008               	return
 12138  119F                     __end_of_Sensor_isCalibrated:	
 12139                           
 12140                           	psect	text57
 12141  126C                     __ptext57:	
 12142 ;; *************** function _Sensor_isEnabled *****************
 12143 ;; Defined at:
 12144 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12145 ;; Parameters:    Size  Location     Type
 12146 ;;  sensor          1    wreg     PTR struct .
 12147 ;;		 -> NULL(0), mtouch_sensor(27), 
 12148 ;; Auto vars:     Size  Location     Type
 12149 ;;  sensor          1    1[BANK0 ] PTR struct .
 12150 ;;		 -> NULL(0), mtouch_sensor(27), 
 12151 ;; Return value:  Size  Location     Type
 12152 ;;                  1    wreg      _Bool 
 12153 ;; Registers used:
 12154 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12155 ;; Tracked objects:
 12156 ;;		On entry : 0/0
 12157 ;;		On exit  : 0/0
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12160 ;;      Params:         0       0       0       0       0       0       0       0
 12161 ;;      Locals:         0       1       0       0       0       0       0       0
 12162 ;;      Temps:          0       1       0       0       0       0       0       0
 12163 ;;      Totals:         0       2       0       0       0       0       0       0
 12164 ;;Total ram usage:        2 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; Hardware stack levels required when called:    5
 12167 ;; This function calls:
 12168 ;;		Nothing
 12169 ;; This function is called by:
 12170 ;;		_Sensor_Service
 12171 ;;		_Sensor_postAcquisitionProcess
 12172 ;;		_Sensor_Acq_ExecutePacket
 12173 ;; This function uses a non-reentrant model
 12174 ;;
 12175                           
 12176                           
 12177                           ;psect for function _Sensor_isEnabled
 12178  126C                     _Sensor_isEnabled:	
 12179                           
 12180                           ;incstack = 0
 12181                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 12182                           ;Sensor_isEnabled@sensor stored from wreg
 12183  126C  0020               	movlb	0	; select bank0
 12184  126D  00A1               	movwf	Sensor_isEnabled@sensor
 12185  126E                     l4321:	
 12186                           
 12187                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
 12188  126E  0821               	movf	Sensor_isEnabled@sensor,w
 12189  126F  1903               	btfsc	3,2
 12190  1270  2A72               	goto	u2981
 12191  1271  2A73               	goto	u2980
 12192  1272                     u2981:	
 12193  1272  2A7E               	goto	l4329
 12194  1273                     u2980:	
 12195  1273                     l4323:	
 12196                           
 12197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
 12198  1273  0821               	movf	Sensor_isEnabled@sensor,w
 12199  1274  3E08               	addlw	8
 12200  1275  0086               	movwf	6
 12201  1276  3001               	movlw	1	; select bank2/3
 12202  1277  0087               	movwf	7
 12203  1278  0C01               	rrf	1,w
 12204  1279  00A0               	movwf	??_Sensor_isEnabled
 12205  127A  0CA0               	rrf	??_Sensor_isEnabled,f
 12206  127B  0C20               	rrf	??_Sensor_isEnabled,w
 12207  127C  3901               	andlw	1
 12208  127D  2A7F               	goto	l369
 12209  127E                     l4329:	
 12210                           
 12211                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
 12212  127E  3000               	movlw	0
 12213  127F                     l369:	
 12214  127F  0008               	return
 12215  1280                     __end_of_Sensor_isEnabled:	
 12216                           
 12217                           	psect	text58
 12218  1213                     __ptext58:	
 12219 ;; *************** function _Sensor_isActive *****************
 12220 ;; Defined at:
 12221 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12222 ;; Parameters:    Size  Location     Type
 12223 ;;  sensor          1    wreg     PTR struct .
 12224 ;;		 -> NULL(0), mtouch_sensor(27), 
 12225 ;; Auto vars:     Size  Location     Type
 12226 ;;  sensor          1    0[BANK0 ] PTR struct .
 12227 ;;		 -> NULL(0), mtouch_sensor(27), 
 12228 ;; Return value:  Size  Location     Type
 12229 ;;                  1    wreg      _Bool 
 12230 ;; Registers used:
 12231 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12232 ;; Tracked objects:
 12233 ;;		On entry : 0/0
 12234 ;;		On exit  : 0/0
 12235 ;;		Unchanged: 0/0
 12236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12237 ;;      Params:         0       0       0       0       0       0       0       0
 12238 ;;      Locals:         0       1       0       0       0       0       0       0
 12239 ;;      Temps:          0       0       0       0       0       0       0       0
 12240 ;;      Totals:         0       1       0       0       0       0       0       0
 12241 ;;Total ram usage:        1 bytes
 12242 ;; Hardware stack levels used:    1
 12243 ;; Hardware stack levels required when called:    5
 12244 ;; This function calls:
 12245 ;;		Nothing
 12246 ;; This function is called by:
 12247 ;;		_Sensor_Acquisition
 12248 ;;		_Sensor_Acq_ExecutePacket
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           
 12253                           ;psect for function _Sensor_isActive
 12254  1213                     _Sensor_isActive:	
 12255                           
 12256                           ;incstack = 0
 12257                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 12258                           ;Sensor_isActive@sensor stored from wreg
 12259  1213  0020               	movlb	0	; select bank0
 12260  1214  00A0               	movwf	Sensor_isActive@sensor
 12261  1215                     l6367:	
 12262                           
 12263                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
 12264  1215  0820               	movf	Sensor_isActive@sensor,w
 12265  1216  1D03               	btfss	3,2
 12266  1217  2A19               	goto	u5781
 12267  1218  2A1A               	goto	u5780
 12268  1219                     u5781:	
 12269  1219  2A1C               	goto	l6373
 12270  121A                     u5780:	
 12271  121A                     l6369:	
 12272                           
 12273                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
 12274  121A  3000               	movlw	0
 12275  121B  2A23               	goto	l380
 12276  121C                     l6373:	
 12277                           
 12278                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
 12279  121C  0820               	movf	Sensor_isActive@sensor,w
 12280  121D  3E08               	addlw	8
 12281  121E  0086               	movwf	6
 12282  121F  3001               	movlw	1	; select bank2/3
 12283  1220  0087               	movwf	7
 12284  1221  0C01               	rrf	1,w
 12285  1222  3901               	andlw	1
 12286  1223                     l380:	
 12287  1223  0008               	return
 12288  1224                     __end_of_Sensor_isActive:	
 12289                           
 12290                           	psect	text59
 12291  0E0D                     __ptext59:	
 12292 ;; *************** function _Sensor_autoCalibration *****************
 12293 ;; Defined at:
 12294 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;  sensor          1    wreg     PTR struct .
 12297 ;;		 -> NULL(0), mtouch_sensor(27), 
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  sensor          1    9[BANK0 ] PTR struct .
 12300 ;;		 -> NULL(0), mtouch_sensor(27), 
 12301 ;;  adcIndex        1    8[BANK0 ] unsigned char 
 12302 ;; Return value:  Size  Location     Type
 12303 ;;                  1    wreg      void 
 12304 ;; Registers used:
 12305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12306 ;; Tracked objects:
 12307 ;;		On entry : 0/0
 12308 ;;		On exit  : 0/0
 12309 ;;		Unchanged: 0/0
 12310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12311 ;;      Params:         0       0       0       0       0       0       0       0
 12312 ;;      Locals:         0       2       0       0       0       0       0       0
 12313 ;;      Temps:          0       4       0       0       0       0       0       0
 12314 ;;      Totals:         0       6       0       0       0       0       0       0
 12315 ;;Total ram usage:        6 bytes
 12316 ;; Hardware stack levels used:    1
 12317 ;; Hardware stack levels required when called:    6
 12318 ;; This function calls:
 12319 ;;		_Sensor_getScanGroupIndex
 12320 ;;		_Sensor_isCalibratingAcqTime
 12321 ;;		_Sensor_setCalibratAcqTime
 12322 ;;		_Sensor_setCalibrated
 12323 ;;		_abs
 12324 ;; This function is called by:
 12325 ;;		_Sensor_Acq_ExecutePacket
 12326 ;; This function uses a non-reentrant model
 12327 ;;
 12328                           
 12329                           
 12330                           ;psect for function _Sensor_autoCalibration
 12331  0E0D                     _Sensor_autoCalibration:	
 12332                           
 12333                           ;incstack = 0
 12334                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12335                           ;Sensor_autoCalibration@sensor stored from wreg
 12336  0E0D  0020               	movlb	0	; select bank0
 12337  0E0E  00A9               	movwf	Sensor_autoCalibration@sensor
 12338  0E0F                     l6413:	
 12339                           
 12340                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
 12341  0E0F  0829               	movf	Sensor_autoCalibration@sensor,w
 12342  0E10  3197  271C  318E   	fcall	_Sensor_getScanGroupIndex
 12343  0E13  0020               	movlb	0	; select bank0
 12344  0E14  00A4               	movwf	??_Sensor_autoCalibration
 12345  0E15  0824               	movf	??_Sensor_autoCalibration,w
 12346  0E16  00A8               	movwf	Sensor_autoCalibration@adcIndex
 12347  0E17                     l6415:	
 12348                           
 12349                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
 12350  0E17  0829               	movf	Sensor_autoCalibration@sensor,w
 12351  0E18  3191  218A  318E   	fcall	_Sensor_isCalibratingAcqTime
 12352  0E1B  3A00               	xorlw	0
 12353  0E1C  1D03               	skipz
 12354  0E1D  2E1F               	goto	u5841
 12355  0E1E  2E20               	goto	u5840
 12356  0E1F                     u5841:	
 12357  0E1F  2E59               	goto	l6425
 12358  0E20                     u5840:	
 12359  0E20                     l6417:	
 12360                           
 12361                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
 12362  0E20  0020               	movlb	0	; select bank0
 12363  0E21  3528               	lslf	Sensor_autoCalibration@adcIndex,w
 12364  0E22  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 12365  0E23  0086               	movwf	6
 12366  0E24  0187               	clrf	7
 12367  0E25  3F40               	moviw [0]fsr1
 12368  0E26  00A4               	movwf	??_Sensor_autoCalibration
 12369  0E27  3F41               	moviw [1]fsr1
 12370  0E28  00A5               	movwf	??_Sensor_autoCalibration+1
 12371  0E29  0829               	movf	Sensor_autoCalibration@sensor,w
 12372  0E2A  3E04               	addlw	4
 12373  0E2B  0086               	movwf	6
 12374  0E2C  3001               	movlw	1	; select bank2/3
 12375  0E2D  0087               	movwf	7
 12376  0E2E  0801               	movf	1,w
 12377  0E2F  00A6               	movwf	??_Sensor_autoCalibration+2
 12378  0E30  01A7               	clrf	??_Sensor_autoCalibration+3
 12379  0E31  3009               	movlw	9
 12380  0E32                     u5855:	
 12381  0E32  35A6               	lslf	??_Sensor_autoCalibration+2,f
 12382  0E33  0DA7               	rlf	??_Sensor_autoCalibration+3,f
 12383  0E34  0B89               	decfsz	9,f
 12384  0E35  2E32               	goto	u5855
 12385  0E36  0825               	movf	??_Sensor_autoCalibration+1,w
 12386  0E37  0227               	subwf	??_Sensor_autoCalibration+3,w
 12387  0E38  1D03               	skipz
 12388  0E39  2E3C               	goto	u5865
 12389  0E3A  0824               	movf	??_Sensor_autoCalibration,w
 12390  0E3B  0226               	subwf	??_Sensor_autoCalibration+2,w
 12391  0E3C                     u5865:	
 12392  0E3C  1803               	skipnc
 12393  0E3D  2E3F               	goto	u5861
 12394  0E3E  2E40               	goto	u5860
 12395  0E3F                     u5861:	
 12396  0E3F  2E54               	goto	l6423
 12397  0E40                     u5860:	
 12398  0E40                     l6419:	
 12399                           
 12400                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
 12401  0E40  3001               	movlw	1
 12402  0E41  00A4               	movwf	??_Sensor_autoCalibration
 12403  0E42  0829               	movf	Sensor_autoCalibration@sensor,w
 12404  0E43  3E05               	addlw	5
 12405  0E44  0086               	movwf	6
 12406  0E45  3001               	movlw	1	; select bank2/3
 12407  0E46  0087               	movwf	7
 12408  0E47  0824               	movf	??_Sensor_autoCalibration,w
 12409  0E48  0781               	addwf	1,f
 12410  0E49  300F               	movlw	15
 12411  0E4A  0201               	subwf	1,w
 12412  0E4B  1C03               	skipc
 12413  0E4C  2E4E               	goto	u5871
 12414  0E4D  2E4F               	goto	u5870
 12415  0E4E                     u5871:	
 12416  0E4E  2EB1               	goto	l321
 12417  0E4F                     u5870:	
 12418  0E4F                     l6421:	
 12419                           
 12420                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
 12421  0E4F  0829               	movf	Sensor_autoCalibration@sensor,w
 12422  0E50  3191  21F2  318E   	fcall	_Sensor_setCalibratAcqTime
 12423  0E53  2EB1               	goto	l321
 12424  0E54                     l6423:	
 12425                           
 12426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
 12427  0E54  0829               	movf	Sensor_autoCalibration@sensor,w
 12428  0E55  3191  21F2  318E   	fcall	_Sensor_setCalibratAcqTime
 12429  0E58  2EB1               	goto	l321
 12430  0E59                     l6425:	
 12431                           
 12432                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 12433  0E59  0020               	movlb	0	; select bank0
 12434  0E5A  0829               	movf	Sensor_autoCalibration@sensor,w
 12435  0E5B  3E04               	addlw	4
 12436  0E5C  0086               	movwf	6
 12437  0E5D  3001               	movlw	1	; select bank2/3
 12438  0E5E  0087               	movwf	7
 12439  0E5F  0801               	movf	1,w
 12440  0E60  00A4               	movwf	??_Sensor_autoCalibration
 12441  0E61  01A5               	clrf	??_Sensor_autoCalibration+1
 12442  0E62  35A4               	lslf	??_Sensor_autoCalibration,f
 12443  0E63  0DA5               	rlf	??_Sensor_autoCalibration+1,f
 12444  0E64  0829               	movf	Sensor_autoCalibration@sensor,w
 12445  0E65  3E06               	addlw	6
 12446  0E66  0086               	movwf	6
 12447  0E67  3001               	movlw	1	; select bank2/3
 12448  0E68  0087               	movwf	7
 12449  0E69  3528               	lslf	Sensor_autoCalibration@adcIndex,w
 12450  0E6A  3E55               	addlw	(low (_packet_sample| 0))& (0+255)
 12451  0E6B  0084               	movwf	4
 12452  0E6C  0185               	clrf	5
 12453  0E6D  3F40               	moviw [0]fsr1
 12454  0E6E  0200               	subwf	0,w
 12455  0E6F  00A0               	movwf	abs@a
 12456  0E70  3101               	addfsr 0,1
 12457  0E71  3F41               	moviw [1]fsr1
 12458  0E72  3B00               	subwfb	0,w
 12459  0E73  00A1               	movwf	abs@a+1
 12460  0E74  3193  23F0  318E   	fcall	_abs
 12461  0E77  0020               	movlb	0	; select bank0
 12462  0E78  0825               	movf	??_Sensor_autoCalibration+1,w
 12463  0E79  0221               	subwf	?_abs+1,w
 12464  0E7A  1D03               	skipz
 12465  0E7B  2E7E               	goto	u5885
 12466  0E7C  0824               	movf	??_Sensor_autoCalibration,w
 12467  0E7D  0220               	subwf	?_abs,w
 12468  0E7E                     u5885:	
 12469  0E7E  1803               	skipnc
 12470  0E7F  2E81               	goto	u5881
 12471  0E80  2E82               	goto	u5880
 12472  0E81                     u5881:	
 12473  0E81  2E90               	goto	l6431
 12474  0E82                     u5880:	
 12475  0E82                     l6427:	
 12476                           
 12477                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
 12478  0E82  3020               	movlw	32
 12479  0E83  00A4               	movwf	??_Sensor_autoCalibration
 12480  0E84  0829               	movf	Sensor_autoCalibration@sensor,w
 12481  0E85  3E02               	addlw	2
 12482  0E86  0086               	movwf	6
 12483  0E87  3001               	movlw	1	; select bank2/3
 12484  0E88  0087               	movwf	7
 12485  0E89  0824               	movf	??_Sensor_autoCalibration,w
 12486  0E8A  0081               	movwf	1
 12487  0E8B                     l6429:	
 12488                           
 12489                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
 12490  0E8B  0829               	movf	Sensor_autoCalibration@sensor,w
 12491  0E8C  3191  21D3  318E   	fcall	_Sensor_setCalibrated
 12492                           
 12493                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
 12494  0E8F  2EB1               	goto	l321
 12495  0E90                     l6431:	
 12496                           
 12497                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
 12498  0E90  3002               	movlw	2
 12499  0E91  00A4               	movwf	??_Sensor_autoCalibration
 12500  0E92  0829               	movf	Sensor_autoCalibration@sensor,w
 12501  0E93  3E03               	addlw	3
 12502  0E94  0086               	movwf	6
 12503  0E95  3001               	movlw	1	; select bank2/3
 12504  0E96  0087               	movwf	7
 12505  0E97  0824               	movf	??_Sensor_autoCalibration,w
 12506  0E98  0781               	addwf	1,f
 12507                           
 12508                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 12509  0E99  0829               	movf	Sensor_autoCalibration@sensor,w
 12510  0E9A  3E03               	addlw	3
 12511  0E9B  0086               	movwf	6
 12512  0E9C  3001               	movlw	1	; select bank2/3
 12513  0E9D  0087               	movwf	7
 12514  0E9E  3020               	movlw	32
 12515  0E9F  0201               	subwf	1,w
 12516  0EA0  1C03               	skipc
 12517  0EA1  2EA3               	goto	u5891
 12518  0EA2  2EA4               	goto	u5890
 12519  0EA3                     u5891:	
 12520  0EA3  2EB1               	goto	l321
 12521  0EA4                     u5890:	
 12522  0EA4                     l6433:	
 12523                           
 12524                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 12525  0EA4  3020               	movlw	32
 12526  0EA5  00A4               	movwf	??_Sensor_autoCalibration
 12527  0EA6  0829               	movf	Sensor_autoCalibration@sensor,w
 12528  0EA7  3E02               	addlw	2
 12529  0EA8  0086               	movwf	6
 12530  0EA9  3001               	movlw	1	; select bank2/3
 12531  0EAA  0087               	movwf	7
 12532  0EAB  0824               	movf	??_Sensor_autoCalibration,w
 12533  0EAC  0081               	movwf	1
 12534  0EAD                     l6435:	
 12535                           
 12536                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
 12537  0EAD  0829               	movf	Sensor_autoCalibration@sensor,w
 12538  0EAE  3191  21D3  318E   	fcall	_Sensor_setCalibrated
 12539  0EB1                     l321:	
 12540  0EB1  0008               	return
 12541  0EB2                     __end_of_Sensor_autoCalibration:	
 12542                           
 12543                           	psect	text60
 12544  13F0                     __ptext60:	
 12545 ;; *************** function _abs *****************
 12546 ;; Defined at:
 12547 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
 12548 ;; Parameters:    Size  Location     Type
 12549 ;;  a               2    0[BANK0 ] int 
 12550 ;; Auto vars:     Size  Location     Type
 12551 ;;		None
 12552 ;; Return value:  Size  Location     Type
 12553 ;;                  2    0[BANK0 ] int 
 12554 ;; Registers used:
 12555 ;;		wreg, status,2, status,0
 12556 ;; Tracked objects:
 12557 ;;		On entry : 0/0
 12558 ;;		On exit  : 0/0
 12559 ;;		Unchanged: 0/0
 12560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12561 ;;      Params:         0       2       0       0       0       0       0       0
 12562 ;;      Locals:         0       0       0       0       0       0       0       0
 12563 ;;      Temps:          0       2       0       0       0       0       0       0
 12564 ;;      Totals:         0       4       0       0       0       0       0       0
 12565 ;;Total ram usage:        4 bytes
 12566 ;; Hardware stack levels used:    1
 12567 ;; Hardware stack levels required when called:    5
 12568 ;; This function calls:
 12569 ;;		Nothing
 12570 ;; This function is called by:
 12571 ;;		_Sensor_postAcquisitionProcess
 12572 ;;		_Sensor_Acq_ExecutePacket
 12573 ;;		_Sensor_autoCalibration
 12574 ;; This function uses a non-reentrant model
 12575 ;;
 12576                           
 12577                           
 12578                           ;psect for function _abs
 12579  13F0                     _abs:	
 12580  13F0                     l4297:	
 12581                           ;incstack = 0
 12582                           ; Regs used in _abs: [wreg+status,2+status,0]
 12583                           
 12584  13F0  0020               	movlb	0	; select bank0
 12585  13F1  0821               	movf	abs@a+1,w
 12586  13F2  3A80               	xorlw	128
 12587  13F3  00A2               	movwf	??_abs
 12588  13F4  3080               	movlw	128
 12589  13F5  0222               	subwf	??_abs,w
 12590  13F6  1D03               	skipz
 12591  13F7  2BFA               	goto	u2975
 12592  13F8  3001               	movlw	1
 12593  13F9  0220               	subwf	abs@a,w
 12594  13FA                     u2975:	
 12595  13FA  1803               	skipnc
 12596  13FB  2BFD               	goto	u2971
 12597  13FC  2BFE               	goto	u2970
 12598  13FD                     u2971:	
 12599  13FD  2C0B               	goto	l1978
 12600  13FE                     u2970:	
 12601  13FE                     l4299:	
 12602  13FE  0020               	movlb	0	; select bank0
 12603  13FF  0920               	comf	abs@a,w
 12604  1400  00A2               	movwf	??_abs
 12605  1401  0921               	comf	abs@a+1,w
 12606  1402  00A3               	movwf	??_abs+1
 12607  1403  0AA2               	incf	??_abs,f
 12608  1404  1903               	skipnz
 12609  1405  0AA3               	incf	??_abs+1,f
 12610  1406  0822               	movf	??_abs,w
 12611  1407  00A0               	movwf	?_abs
 12612  1408  0823               	movf	??_abs+1,w
 12613  1409  00A1               	movwf	?_abs+1
 12614  140A  2C0B               	goto	l1981
 12615  140B                     l1978:	
 12616  140B                     l1981:	
 12617  140B  0008               	return
 12618  140C                     __end_of_abs:	
 12619                           
 12620                           	psect	text61
 12621  11D3                     __ptext61:	
 12622 ;; *************** function _Sensor_setCalibrated *****************
 12623 ;; Defined at:
 12624 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12625 ;; Parameters:    Size  Location     Type
 12626 ;;  sensor          1    wreg     PTR struct .
 12627 ;;		 -> NULL(0), mtouch_sensor(27), 
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;  sensor          1    0[BANK0 ] PTR struct .
 12630 ;;		 -> NULL(0), mtouch_sensor(27), 
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  1    wreg      void 
 12633 ;; Registers used:
 12634 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12640 ;;      Params:         0       0       0       0       0       0       0       0
 12641 ;;      Locals:         0       1       0       0       0       0       0       0
 12642 ;;      Temps:          0       0       0       0       0       0       0       0
 12643 ;;      Totals:         0       1       0       0       0       0       0       0
 12644 ;;Total ram usage:        1 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    5
 12647 ;; This function calls:
 12648 ;;		Nothing
 12649 ;; This function is called by:
 12650 ;;		_Sensor_autoCalibration
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _Sensor_setCalibrated
 12656  11D3                     _Sensor_setCalibrated:	
 12657                           
 12658                           ;incstack = 0
 12659                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 12660                           ;Sensor_setCalibrated@sensor stored from wreg
 12661  11D3  0020               	movlb	0	; select bank0
 12662  11D4  00A0               	movwf	Sensor_setCalibrated@sensor
 12663  11D5                     l6353:	
 12664                           
 12665                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
 12666  11D5  0820               	movf	Sensor_setCalibrated@sensor,w
 12667  11D6  3E08               	addlw	8
 12668  11D7  0086               	movwf	6
 12669  11D8  3001               	movlw	1	; select bank2/3
 12670  11D9  0087               	movwf	7
 12671  11DA  1501               	bsf	1,2
 12672                           
 12673                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
 12674  11DB  0820               	movf	Sensor_setCalibrated@sensor,w
 12675  11DC  3E08               	addlw	8
 12676  11DD  0086               	movwf	6
 12677  11DE  3001               	movlw	1	; select bank2/3
 12678  11DF  0087               	movwf	7
 12679  11E0  1201               	bcf	1,4
 12680  11E1                     l399:	
 12681  11E1  0008               	return
 12682  11E2                     __end_of_Sensor_setCalibrated:	
 12683                           
 12684                           	psect	text62
 12685  11F2                     __ptext62:	
 12686 ;; *************** function _Sensor_setCalibratAcqTime *****************
 12687 ;; Defined at:
 12688 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12689 ;; Parameters:    Size  Location     Type
 12690 ;;  sensor          1    wreg     PTR struct .
 12691 ;;		 -> NULL(0), mtouch_sensor(27), 
 12692 ;; Auto vars:     Size  Location     Type
 12693 ;;  sensor          1    0[BANK0 ] PTR struct .
 12694 ;;		 -> NULL(0), mtouch_sensor(27), 
 12695 ;; Return value:  Size  Location     Type
 12696 ;;                  1    wreg      void 
 12697 ;; Registers used:
 12698 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12699 ;; Tracked objects:
 12700 ;;		On entry : 0/0
 12701 ;;		On exit  : 0/0
 12702 ;;		Unchanged: 0/0
 12703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12704 ;;      Params:         0       0       0       0       0       0       0       0
 12705 ;;      Locals:         0       1       0       0       0       0       0       0
 12706 ;;      Temps:          0       0       0       0       0       0       0       0
 12707 ;;      Totals:         0       1       0       0       0       0       0       0
 12708 ;;Total ram usage:        1 bytes
 12709 ;; Hardware stack levels used:    1
 12710 ;; Hardware stack levels required when called:    5
 12711 ;; This function calls:
 12712 ;;		Nothing
 12713 ;; This function is called by:
 12714 ;;		_Sensor_autoCalibration
 12715 ;; This function uses a non-reentrant model
 12716 ;;
 12717                           
 12718                           
 12719                           ;psect for function _Sensor_setCalibratAcqTime
 12720  11F2                     _Sensor_setCalibratAcqTime:	
 12721                           
 12722                           ;incstack = 0
 12723                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 12724                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 12725  11F2  0020               	movlb	0	; select bank0
 12726  11F3  00A0               	movwf	Sensor_setCalibratAcqTime@sensor
 12727  11F4                     l6351:	
 12728                           
 12729                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
 12730  11F4  0820               	movf	Sensor_setCalibratAcqTime@sensor,w
 12731  11F5  3E08               	addlw	8
 12732  11F6  0086               	movwf	6
 12733  11F7  3001               	movlw	1	; select bank2/3
 12734  11F8  0087               	movwf	7
 12735  11F9  1601               	bsf	1,4
 12736                           
 12737                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 12738  11FA  0820               	movf	Sensor_setCalibratAcqTime@sensor,w
 12739  11FB  3E03               	addlw	3
 12740  11FC  0086               	movwf	6
 12741  11FD  3001               	movlw	1	; select bank2/3
 12742  11FE  0087               	movwf	7
 12743  11FF  0181               	clrf	1
 12744  1200  0A81               	incf	1,f
 12745  1201                     l402:	
 12746  1201  0008               	return
 12747  1202                     __end_of_Sensor_setCalibratAcqTime:	
 12748                           
 12749                           	psect	text63
 12750  118A                     __ptext63:	
 12751 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 12752 ;; Defined at:
 12753 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12754 ;; Parameters:    Size  Location     Type
 12755 ;;  sensor          1    wreg     PTR struct .
 12756 ;;		 -> NULL(0), mtouch_sensor(27), 
 12757 ;; Auto vars:     Size  Location     Type
 12758 ;;  sensor          1    0[BANK0 ] PTR struct .
 12759 ;;		 -> NULL(0), mtouch_sensor(27), 
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      _Bool 
 12762 ;; Registers used:
 12763 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12769 ;;      Params:         0       0       0       0       0       0       0       0
 12770 ;;      Locals:         0       1       0       0       0       0       0       0
 12771 ;;      Temps:          0       0       0       0       0       0       0       0
 12772 ;;      Totals:         0       1       0       0       0       0       0       0
 12773 ;;Total ram usage:        1 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:    5
 12776 ;; This function calls:
 12777 ;;		Nothing
 12778 ;; This function is called by:
 12779 ;;		_Sensor_loadADCSettings
 12780 ;;		_Sensor_autoCalibration
 12781 ;; This function uses a non-reentrant model
 12782 ;;
 12783                           
 12784                           
 12785                           ;psect for function _Sensor_isCalibratingAcqTime
 12786  118A                     _Sensor_isCalibratingAcqTime:	
 12787                           
 12788                           ;incstack = 0
 12789                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 12790                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 12791  118A  0020               	movlb	0	; select bank0
 12792  118B  00A0               	movwf	Sensor_isCalibratingAcqTime@sensor
 12793  118C                     l6347:	
 12794                           
 12795                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
 12796  118C  0820               	movf	Sensor_isCalibratingAcqTime@sensor,w
 12797  118D  3E08               	addlw	8
 12798  118E  0086               	movwf	6
 12799  118F  3001               	movlw	1	; select bank2/3
 12800  1190  0087               	movwf	7
 12801  1191  0E01               	swapf	1,w
 12802  1192  3901               	andlw	1
 12803  1193                     l405:	
 12804  1193  0008               	return
 12805  1194                     __end_of_Sensor_isCalibratingAcqTime:	
 12806                           
 12807                           	psect	text64
 12808  171C                     __ptext64:	
 12809 ;; *************** function _Sensor_getScanGroupIndex *****************
 12810 ;; Defined at:
 12811 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12812 ;; Parameters:    Size  Location     Type
 12813 ;;  sensor          1    wreg     PTR struct .
 12814 ;;		 -> NULL(0), mtouch_sensor(27), 
 12815 ;; Auto vars:     Size  Location     Type
 12816 ;;  sensor          1    2[BANK0 ] PTR struct .
 12817 ;;		 -> NULL(0), mtouch_sensor(27), 
 12818 ;;  sensorGroup     1    3[BANK0 ] unsigned char 
 12819 ;; Return value:  Size  Location     Type
 12820 ;;                  1    wreg      unsigned char 
 12821 ;; Registers used:
 12822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 12823 ;; Tracked objects:
 12824 ;;		On entry : 0/0
 12825 ;;		On exit  : 0/0
 12826 ;;		Unchanged: 0/0
 12827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12828 ;;      Params:         0       0       0       0       0       0       0       0
 12829 ;;      Locals:         0       2       0       0       0       0       0       0
 12830 ;;      Temps:          0       2       0       0       0       0       0       0
 12831 ;;      Totals:         0       4       0       0       0       0       0       0
 12832 ;;Total ram usage:        4 bytes
 12833 ;; Hardware stack levels used:    1
 12834 ;; Hardware stack levels required when called:    5
 12835 ;; This function calls:
 12836 ;;		Nothing
 12837 ;; This function is called by:
 12838 ;;		_Sensor_postAcquisitionProcess
 12839 ;;		_Sensor_autoCalibration
 12840 ;;		_Sensor_RawSample_Update
 12841 ;; This function uses a non-reentrant model
 12842 ;;
 12843                           
 12844                           
 12845                           ;psect for function _Sensor_getScanGroupIndex
 12846  171C                     _Sensor_getScanGroupIndex:	
 12847                           
 12848                           ;incstack = 0
 12849                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 12850                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 12851  171C  0020               	movlb	0	; select bank0
 12852  171D  00A2               	movwf	Sensor_getScanGroupIndex@sensor
 12853  171E                     l4267:	
 12854                           
 12855                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
 12856  171E  01A3               	clrf	Sensor_getScanGroupIndex@sensorGroup
 12857  171F                     l4273:	
 12858                           
 12859                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 12860  171F  0823               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 12861  1720  00A0               	movwf	??_Sensor_getScanGroupIndex
 12862  1721  01A1               	clrf	??_Sensor_getScanGroupIndex+1
 12863  1722  35A0               	lslf	??_Sensor_getScanGroupIndex,f
 12864  1723  0DA1               	rlf	??_Sensor_getScanGroupIndex+1,f
 12865  1724  3072               	movlw	low (_sensor_scan_group| (0+32768))
 12866  1725  0720               	addwf	??_Sensor_getScanGroupIndex,w
 12867  1726  0084               	movwf	4
 12868  1727  3098               	movlw	high (_sensor_scan_group| (0+32768))
 12869  1728  3D21               	addwfc	??_Sensor_getScanGroupIndex+1,w
 12870  1729  0085               	movwf	5
 12871  172A  0800               	movf	0,w	;code access
 12872  172B  0622               	xorwf	Sensor_getScanGroupIndex@sensor,w
 12873  172C  1D03               	skipz
 12874  172D  2F2F               	goto	u2941
 12875  172E  2F30               	goto	u2940
 12876  172F                     u2941:	
 12877  172F  2F32               	goto	l4279
 12878  1730                     u2940:	
 12879  1730                     l4275:	
 12880                           
 12881                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
 12882  1730  3000               	movlw	0
 12883  1731  2F50               	goto	l223
 12884  1732                     l4279:	
 12885                           
 12886                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 12887  1732  0823               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 12888  1733  00A0               	movwf	??_Sensor_getScanGroupIndex
 12889  1734  01A1               	clrf	??_Sensor_getScanGroupIndex+1
 12890  1735  35A0               	lslf	??_Sensor_getScanGroupIndex,f
 12891  1736  0DA1               	rlf	??_Sensor_getScanGroupIndex+1,f
 12892  1737  3073               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 12893  1738  0720               	addwf	??_Sensor_getScanGroupIndex,w
 12894  1739  0084               	movwf	4
 12895  173A  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 12896  173B  3D21               	addwfc	??_Sensor_getScanGroupIndex+1,w
 12897  173C  0085               	movwf	5
 12898  173D  0800               	movf	0,w	;code access
 12899  173E  0622               	xorwf	Sensor_getScanGroupIndex@sensor,w
 12900  173F  1D03               	skipz
 12901  1740  2F42               	goto	u2951
 12902  1741  2F43               	goto	u2950
 12903  1742                     u2951:	
 12904  1742  2F45               	goto	l4285
 12905  1743                     u2950:	
 12906  1743                     l4281:	
 12907                           
 12908                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
 12909  1743  3001               	movlw	1
 12910  1744  2F50               	goto	l223
 12911  1745                     l4285:	
 12912                           
 12913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
 12914  1745  3001               	movlw	1
 12915  1746  00A0               	movwf	??_Sensor_getScanGroupIndex
 12916  1747  0820               	movf	??_Sensor_getScanGroupIndex,w
 12917  1748  07A3               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 12918  1749                     l4287:	
 12919  1749  3002               	movlw	2
 12920  174A  0223               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
 12921  174B  1C03               	skipc
 12922  174C  2F4E               	goto	u2961
 12923  174D  2F4F               	goto	u2960
 12924  174E                     u2961:	
 12925  174E  2F1F               	goto	l4273
 12926  174F                     u2960:	
 12927  174F  2F30               	goto	l4275
 12928  1750                     l223:	
 12929  1750  0008               	return
 12930  1751                     __end_of_Sensor_getScanGroupIndex:	
 12931                           
 12932                           	psect	text65
 12933  11E2                     __ptext65:	
 12934 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 12935 ;; Defined at:
 12936 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;		None
 12939 ;; Auto vars:     Size  Location     Type
 12940 ;;		None
 12941 ;; Return value:  Size  Location     Type
 12942 ;;                  1    wreg      void 
 12943 ;; Registers used:
 12944 ;;		wreg, status,2, status,0
 12945 ;; Tracked objects:
 12946 ;;		On entry : 0/0
 12947 ;;		On exit  : 0/0
 12948 ;;		Unchanged: 0/0
 12949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12950 ;;      Params:         0       0       0       0       0       0       0       0
 12951 ;;      Locals:         0       0       0       0       0       0       0       0
 12952 ;;      Temps:          0       0       0       0       0       0       0       0
 12953 ;;      Totals:         0       0       0       0       0       0       0       0
 12954 ;;Total ram usage:        0 bytes
 12955 ;; Hardware stack levels used:    1
 12956 ;; Hardware stack levels required when called:    5
 12957 ;; This function calls:
 12958 ;;		Nothing
 12959 ;; This function is called by:
 12960 ;;		_MTOUCH_Initialize
 12961 ;;		_Sensor_Acq_ExecutePacket
 12962 ;; This function uses a non-reentrant model
 12963 ;;
 12964                           
 12965                           
 12966                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 12967  11E2                     _MTOUCH_Sensor_Scan_Initialize:	
 12968  11E2                     l6355:	
 12969                           ;incstack = 0
 12970                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 12971                           
 12972                           
 12973                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
 12974  11E2  30FC               	movlw	-4
 12975  11E3  0020               	movlb	0	; select bank0
 12976  11E4  059C               	andwf	28,f	;volatile
 12977  11E5                     l6357:	
 12978                           
 12979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
 12980  11E5  002E               	movlb	14	; select bank14
 12981  11E6  0191               	clrf	17	;volatile
 12982  11E7                     l6359:	
 12983                           
 12984                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
 12985  11E7  002F               	movlb	15	; select bank15
 12986  11E8  0191               	clrf	17	;volatile
 12987  11E9                     l6361:	
 12988                           
 12989                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 12990  11E9  3090               	movlw	144
 12991  11EA  002E               	movlb	14	; select bank14
 12992  11EB  0092               	movwf	18	;volatile
 12993  11EC                     l6363:	
 12994                           
 12995                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
 12996  11EC  3040               	movlw	64
 12997  11ED  0094               	movwf	20	;volatile
 12998  11EE                     l6365:	
 12999                           
 13000                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
 13001  11EE  3040               	movlw	64
 13002  11EF  002F               	movlb	15	; select bank15
 13003  11F0  0094               	movwf	20	;volatile
 13004  11F1                     l183:	
 13005  11F1  0008               	return
 13006  11F2                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 13007                           
 13008                           	psect	text66
 13009  1248                     __ptext66:	
 13010 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 13011 ;; Defined at:
 13012 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13013 ;; Parameters:    Size  Location     Type
 13014 ;;		None
 13015 ;; Auto vars:     Size  Location     Type
 13016 ;;  button          1   23[BANK0 ] enum E3069
 13017 ;; Return value:  Size  Location     Type
 13018 ;;                  1    wreg      void 
 13019 ;; Registers used:
 13020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13021 ;; Tracked objects:
 13022 ;;		On entry : 0/0
 13023 ;;		On exit  : 0/0
 13024 ;;		Unchanged: 0/0
 13025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13026 ;;      Params:         0       0       0       0       0       0       0       0
 13027 ;;      Locals:         0       1       0       0       0       0       0       0
 13028 ;;      Temps:          0       1       0       0       0       0       0       0
 13029 ;;      Totals:         0       2       0       0       0       0       0       0
 13030 ;;Total ram usage:        2 bytes
 13031 ;; Hardware stack levels used:    1
 13032 ;; Hardware stack levels required when called:   11
 13033 ;; This function calls:
 13034 ;;		_Button_Service
 13035 ;; This function is called by:
 13036 ;;		_MTOUCH_Service_Mainloop
 13037 ;; This function uses a non-reentrant model
 13038 ;;
 13039                           
 13040                           
 13041                           ;psect for function _MTOUCH_Button_ServiceAll
 13042  1248                     _MTOUCH_Button_ServiceAll:	
 13043  1248                     l6953:	
 13044                           ;incstack = 0
 13045                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13046                           
 13047                           
 13048                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
 13049  1248  0020               	movlb	0	; select bank0
 13050  1249  01B7               	clrf	MTOUCH_Button_ServiceAll@button
 13051  124A                     l6959:	
 13052                           
 13053                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
 13054  124A  0837               	movf	MTOUCH_Button_ServiceAll@button,w
 13055  124B  3189  21D8  3192   	fcall	_Button_Service
 13056  124E                     l6961:	
 13057                           
 13058                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
 13059  124E  3001               	movlw	1
 13060  124F  0020               	movlb	0	; select bank0
 13061  1250  00B6               	movwf	??_MTOUCH_Button_ServiceAll
 13062  1251  0836               	movf	??_MTOUCH_Button_ServiceAll,w
 13063  1252  07B7               	addwf	MTOUCH_Button_ServiceAll@button,f
 13064  1253                     l6963:	
 13065  1253  3003               	movlw	3
 13066  1254  0237               	subwf	MTOUCH_Button_ServiceAll@button,w
 13067  1255  1C03               	skipc
 13068  1256  2A58               	goto	u6691
 13069  1257  2A59               	goto	u6690
 13070  1258                     u6691:	
 13071  1258  2A4A               	goto	l6959
 13072  1259                     u6690:	
 13073  1259                     l506:	
 13074  1259  0008               	return
 13075  125A                     __end_of_MTOUCH_Button_ServiceAll:	
 13076                           
 13077                           	psect	text67
 13078  09D8                     __ptext67:	
 13079 ;; *************** function _Button_Service *****************
 13080 ;; Defined at:
 13081 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13082 ;; Parameters:    Size  Location     Type
 13083 ;;  name            1    wreg     enum E3069
 13084 ;; Auto vars:     Size  Location     Type
 13085 ;;  name            1   20[BANK0 ] enum E3069
 13086 ;;  button          1   21[BANK0 ] PTR struct .
 13087 ;;		 -> mtouch_button(48), 
 13088 ;; Return value:  Size  Location     Type
 13089 ;;                  1    wreg      void 
 13090 ;; Registers used:
 13091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13092 ;; Tracked objects:
 13093 ;;		On entry : 0/0
 13094 ;;		On exit  : 0/0
 13095 ;;		Unchanged: 0/0
 13096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13097 ;;      Params:         0       0       0       0       0       0       0       0
 13098 ;;      Locals:         0       2       0       0       0       0       0       0
 13099 ;;      Temps:          0       2       0       0       0       0       0       0
 13100 ;;      Totals:         0       4       0       0       0       0       0       0
 13101 ;;Total ram usage:        4 bytes
 13102 ;; Hardware stack levels used:    1
 13103 ;; Hardware stack levels required when called:   10
 13104 ;; This function calls:
 13105 ;;		_Button_Deviation_Update
 13106 ;;		_Button_Reading_Update
 13107 ;;		_Button_State_Initializing
 13108 ;;		_Button_State_NotPressed
 13109 ;;		_Button_State_Pressed
 13110 ;;		_MTOUCH_Button_Initialize
 13111 ;;		_MTOUCH_Sensor_isCalibrated
 13112 ;;		_MTOUCH_Sensor_wasSampled
 13113 ;; This function is called by:
 13114 ;;		_MTOUCH_Button_ServiceAll
 13115 ;; This function uses a non-reentrant model
 13116 ;;
 13117                           
 13118                           
 13119                           ;psect for function _Button_Service
 13120  09D8                     _Button_Service:	
 13121                           
 13122                           ;incstack = 0
 13123                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13124                           ;Button_Service@name stored from wreg
 13125  09D8  0020               	movlb	0	; select bank0
 13126  09D9  00B4               	movwf	Button_Service@name
 13127  09DA                     l6897:	
 13128                           
 13129                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
 13130  09DA  0834               	movf	Button_Service@name,w
 13131  09DB  00B2               	movwf	??_Button_Service
 13132  09DC  3003               	movlw	3
 13133  09DD                     u6635:	
 13134  09DD  35B2               	lslf	??_Button_Service,f
 13135  09DE  3EFF               	addlw	-1
 13136  09DF  1D03               	skipz
 13137  09E0  29DD               	goto	u6635
 13138  09E1  3532               	lslf	??_Button_Service,w
 13139  09E2  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 13140  09E3  00B3               	movwf	??_Button_Service+1
 13141  09E4  0833               	movf	??_Button_Service+1,w
 13142  09E5  00B5               	movwf	Button_Service@button
 13143  09E6                     l6899:	
 13144                           
 13145                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 13146  09E6  0A35               	incf	Button_Service@button,w
 13147  09E7  0086               	movwf	6
 13148  09E8  3001               	movlw	1	; select bank2/3
 13149  09E9  0087               	movwf	7
 13150  09EA  0801               	movf	1,w
 13151  09EB  3192  2202  3189   	fcall	_MTOUCH_Sensor_wasSampled
 13152  09EE  3A00               	xorlw	0
 13153  09EF  1903               	skipnz
 13154  09F0  29F2               	goto	u6641
 13155  09F1  29F3               	goto	u6640
 13156  09F2                     u6641:	
 13157  09F2  2A32               	goto	l511
 13158  09F3                     u6640:	
 13159  09F3                     l6901:	
 13160  09F3  0020               	movlb	0	; select bank0
 13161  09F4  0A35               	incf	Button_Service@button,w
 13162  09F5  0086               	movwf	6
 13163  09F6  3001               	movlw	1	; select bank2/3
 13164  09F7  0087               	movwf	7
 13165  09F8  0801               	movf	1,w
 13166  09F9  3193  2353  3189   	fcall	_MTOUCH_Sensor_isCalibrated
 13167  09FC  3A00               	xorlw	0
 13168  09FD  1903               	skipnz
 13169  09FE  2A00               	goto	u6651
 13170  09FF  2A01               	goto	u6650
 13171  0A00                     u6651:	
 13172  0A00  2A32               	goto	l511
 13173  0A01                     u6650:	
 13174  0A01                     l6903:	
 13175                           
 13176                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
 13177  0A01  0020               	movlb	0	; select bank0
 13178  0A02  0835               	movf	Button_Service@button,w
 13179  0A03  3192  2236  3189   	fcall	_Button_Reading_Update
 13180                           
 13181                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
 13182  0A06  0020               	movlb	0	; select bank0
 13183  0A07  0835               	movf	Button_Service@button,w
 13184  0A08  318C  2453  3189   	fcall	_Button_Deviation_Update
 13185  0A0B                     l6905:	
 13186                           
 13187                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 13188  0A0B  0020               	movlb	0	; select bank0
 13189  0A0C  0835               	movf	Button_Service@button,w
 13190  0A0D  3E02               	addlw	2
 13191  0A0E  0086               	movwf	6
 13192  0A0F  3001               	movlw	1	; select bank2/3
 13193  0A10  0087               	movwf	7
 13194  0A11  3003               	movlw	3
 13195  0A12  0201               	subwf	1,w
 13196  0A13  1C03               	skipc
 13197  0A14  2A16               	goto	u6661
 13198  0A15  2A17               	goto	u6660
 13199  0A16                     u6661:	
 13200  0A16  2A1F               	goto	l6909
 13201  0A17                     u6660:	
 13202  0A17                     l6907:	
 13203                           
 13204                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
 13205  0A17  0835               	movf	Button_Service@button,w
 13206  0A18  0086               	movwf	6
 13207  0A19  3001               	movlw	1	; select bank2/3
 13208  0A1A  0087               	movwf	7
 13209  0A1B  0801               	movf	1,w
 13210  0A1C  3197  2751  3189   	fcall	_MTOUCH_Button_Initialize
 13211  0A1F                     l6909:	
 13212                           
 13213                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 13214  0A1F  0020               	movlb	0	; select bank0
 13215  0A20  0835               	movf	Button_Service@button,w
 13216  0A21  00B2               	movwf	??_Button_Service
 13217  0A22  0832               	movf	??_Button_Service,w
 13218  0A23  00AD               	movwf	Button_State_Pressed@button
 13219  0A24  0835               	movf	Button_Service@button,w
 13220  0A25  3E02               	addlw	2
 13221  0A26  0086               	movwf	6
 13222  0A27  3001               	movlw	1	; select bank2/3
 13223  0A28  0087               	movwf	7
 13224  0A29  3501               	lslf	1,w
 13225  0A2A  3EE4               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 13226  0A2B  0086               	movwf	6
 13227  0A2C  0187               	clrf	7
 13228  0A2D  3F41               	moviw [1]fsr1
 13229  0A2E  008A               	movwf	10
 13230  0A2F  3F40               	moviw [0]fsr1
 13231  0A30  000A               	callw
 13232  0A31  3189               	pagesel	$
 13233  0A32                     l511:	
 13234  0A32  0008               	return
 13235  0A33                     __end_of_Button_Service:	
 13236                           
 13237                           	psect	text68
 13238  1202                     __ptext68:	
 13239 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 13240 ;; Defined at:
 13241 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13242 ;; Parameters:    Size  Location     Type
 13243 ;;  sensor          1    wreg     enum E2878
 13244 ;; Auto vars:     Size  Location     Type
 13245 ;;  sensor          1    5[BANK0 ] enum E2878
 13246 ;; Return value:  Size  Location     Type
 13247 ;;                  1    wreg      _Bool 
 13248 ;; Registers used:
 13249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13255 ;;      Params:         0       0       0       0       0       0       0       0
 13256 ;;      Locals:         0       1       0       0       0       0       0       0
 13257 ;;      Temps:          0       1       0       0       0       0       0       0
 13258 ;;      Totals:         0       2       0       0       0       0       0       0
 13259 ;;Total ram usage:        2 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    6
 13262 ;; This function calls:
 13263 ;;		___bmul
 13264 ;; This function is called by:
 13265 ;;		_Button_Service
 13266 ;; This function uses a non-reentrant model
 13267 ;;
 13268                           
 13269                           
 13270                           ;psect for function _MTOUCH_Sensor_wasSampled
 13271  1202                     _MTOUCH_Sensor_wasSampled:	
 13272                           
 13273                           ;incstack = 0
 13274                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 13275                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 13276  1202  0020               	movlb	0	; select bank0
 13277  1203  00A5               	movwf	MTOUCH_Sensor_wasSampled@sensor
 13278  1204                     l4875:	
 13279                           
 13280                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
 13281  1204  3009               	movlw	9
 13282  1205  00A4               	movwf	??_MTOUCH_Sensor_wasSampled
 13283  1206  0824               	movf	??_MTOUCH_Sensor_wasSampled,w
 13284  1207  00A0               	movwf	___bmul@multiplicand
 13285  1208  0825               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 13286  1209  3192  2294  3192   	fcall	___bmul
 13287  120C  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 13288  120D  0086               	movwf	6
 13289  120E  3001               	movlw	1	; select bank2/3
 13290  120F  0087               	movwf	7
 13291  1210  0801               	movf	1,w
 13292  1211  3901               	andlw	1
 13293  1212                     l413:	
 13294  1212  0008               	return
 13295  1213                     __end_of_MTOUCH_Sensor_wasSampled:	
 13296                           
 13297                           	psect	text69
 13298  1353                     __ptext69:	
 13299 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 13300 ;; Defined at:
 13301 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13302 ;; Parameters:    Size  Location     Type
 13303 ;;  sensor          1    wreg     enum E2878
 13304 ;; Auto vars:     Size  Location     Type
 13305 ;;  sensor          1    5[BANK0 ] enum E2878
 13306 ;; Return value:  Size  Location     Type
 13307 ;;                  1    wreg      _Bool 
 13308 ;; Registers used:
 13309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13310 ;; Tracked objects:
 13311 ;;		On entry : 0/0
 13312 ;;		On exit  : 0/0
 13313 ;;		Unchanged: 0/0
 13314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13315 ;;      Params:         0       0       0       0       0       0       0       0
 13316 ;;      Locals:         0       1       0       0       0       0       0       0
 13317 ;;      Temps:          0       1       0       0       0       0       0       0
 13318 ;;      Totals:         0       2       0       0       0       0       0       0
 13319 ;;Total ram usage:        2 bytes
 13320 ;; Hardware stack levels used:    1
 13321 ;; Hardware stack levels required when called:    6
 13322 ;; This function calls:
 13323 ;;		___bmul
 13324 ;; This function is called by:
 13325 ;;		_Button_Service
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           
 13330                           ;psect for function _MTOUCH_Sensor_isCalibrated
 13331  1353                     _MTOUCH_Sensor_isCalibrated:	
 13332                           
 13333                           ;incstack = 0
 13334                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13335                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 13336  1353  0020               	movlb	0	; select bank0
 13337  1354  00A5               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 13338  1355                     l4863:	
 13339                           
 13340                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
 13341  1355  3003               	movlw	3
 13342  1356  0225               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
 13343  1357  1803               	skipnc
 13344  1358  2B5A               	goto	u3861
 13345  1359  2B5B               	goto	u3860
 13346  135A                     u3861:	
 13347  135A  2B6B               	goto	l4871
 13348  135B                     u3860:	
 13349  135B                     l4865:	
 13350                           
 13351                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
 13352  135B  3009               	movlw	9
 13353  135C  00A4               	movwf	??_MTOUCH_Sensor_isCalibrated
 13354  135D  0824               	movf	??_MTOUCH_Sensor_isCalibrated,w
 13355  135E  00A0               	movwf	___bmul@multiplicand
 13356  135F  0825               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 13357  1360  3192  2294  3193   	fcall	___bmul
 13358  1363  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 13359  1364  0086               	movwf	6
 13360  1365  3001               	movlw	1	; select bank2/3
 13361  1366  0087               	movwf	7
 13362  1367  0C01               	rrf	1,w
 13363  1368  0C89               	rrf	9,f
 13364  1369  3901               	andlw	1
 13365  136A  2B6C               	goto	l392
 13366  136B                     l4871:	
 13367                           
 13368                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
 13369  136B  3000               	movlw	0
 13370  136C                     l392:	
 13371  136C  0008               	return
 13372  136D                     __end_of_MTOUCH_Sensor_isCalibrated:	
 13373                           
 13374                           	psect	text70
 13375  074E                     __ptext70:	
 13376 ;; *************** function _Button_State_NotPressed *****************
 13377 ;; Defined at:
 13378 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13379 ;; Parameters:    Size  Location     Type
 13380 ;;  button          1   13[BANK0 ] PTR struct .
 13381 ;;		 -> mtouch_button(48), 
 13382 ;; Auto vars:     Size  Location     Type
 13383 ;;		None
 13384 ;; Return value:  Size  Location     Type
 13385 ;;                  1    wreg      void 
 13386 ;; Registers used:
 13387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13388 ;; Tracked objects:
 13389 ;;		On entry : 0/0
 13390 ;;		On exit  : 0/0
 13391 ;;		Unchanged: 0/0
 13392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13393 ;;      Params:         0       1       0       0       0       0       0       0
 13394 ;;      Locals:         0       0       0       0       0       0       0       0
 13395 ;;      Temps:          0       2       0       0       0       0       0       0
 13396 ;;      Totals:         0       3       0       0       0       0       0       0
 13397 ;;Total ram usage:        3 bytes
 13398 ;; Hardware stack levels used:    1
 13399 ;; Hardware stack levels required when called:    9
 13400 ;; This function calls:
 13401 ;;		_Button_Baseline_Update
 13402 ;;		_Button_DefaultCallback
 13403 ;;		_MTOUCH_Button_Initialize
 13404 ;;		_myButtonPressedCallback
 13405 ;; This function is called by:
 13406 ;;		_Button_Service
 13407 ;; This function uses a non-reentrant model
 13408 ;;
 13409                           
 13410                           
 13411                           ;psect for function _Button_State_NotPressed
 13412  074E                     _Button_State_NotPressed:	
 13413  074E                     l6805:	
 13414                           ;incstack = 0
 13415                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13416                           
 13417                           
 13418                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 13419  074E  0020               	movlb	0	; select bank0
 13420  074F  082D               	movf	Button_State_NotPressed@button,w
 13421  0750  3E09               	addlw	9
 13422  0751  0086               	movwf	6
 13423  0752  3001               	movlw	1	; select bank2/3
 13424  0753  0087               	movwf	7
 13425  0754  0801               	movf	1,w
 13426  0755  3A80               	xorlw	128
 13427  0756  00AE               	movwf	??_Button_State_NotPressed
 13428  0757  082D               	movf	Button_State_NotPressed@button,w
 13429  0758  3E0E               	addlw	14
 13430  0759  0086               	movwf	6
 13431  075A  3001               	movlw	1	; select bank2/3
 13432  075B  0087               	movwf	7
 13433  075C  0301               	decf	1,w
 13434  075D  3AFF               	xorlw	255
 13435  075E  3A80               	xorlw	128
 13436  075F  02AE               	subwf	??_Button_State_NotPressed,f
 13437  0760  1803               	skipnc
 13438  0761  2F63               	goto	u6501
 13439  0762  2F64               	goto	u6500
 13440  0763                     u6501:	
 13441  0763  2F91               	goto	l6813
 13442  0764                     u6500:	
 13443  0764                     l6807:	
 13444                           
 13445                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
 13446  0764  082D               	movf	Button_State_NotPressed@button,w
 13447  0765  3E0A               	addlw	10
 13448  0766  0086               	movwf	6
 13449  0767  3001               	movlw	1	; select bank2/3
 13450  0768  0087               	movwf	7
 13451  0769  3001               	movlw	1
 13452  076A  0781               	addwf	1,f
 13453  076B  3141               	addfsr 1,1
 13454  076C  1803               	skipnc
 13455  076D  0A81               	incf	1,f
 13456                           
 13457                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 13458  076E  082D               	movf	Button_State_NotPressed@button,w
 13459  076F  3E0A               	addlw	10
 13460  0770  0086               	movwf	6
 13461  0771  3001               	movlw	1	; select bank2/3
 13462  0772  0087               	movwf	7
 13463  0773  3F40               	moviw [0]fsr1
 13464  0774  00AE               	movwf	??_Button_State_NotPressed
 13465  0775  3F41               	moviw [1]fsr1
 13466  0776  00AF               	movwf	??_Button_State_NotPressed+1
 13467  0777  3000               	movlw	0
 13468  0778  022F               	subwf	??_Button_State_NotPressed+1,w
 13469  0779  3041               	movlw	65
 13470  077A  1903               	skipnz
 13471  077B  022E               	subwf	??_Button_State_NotPressed,w
 13472  077C  1C03               	skipc
 13473  077D  2F7F               	goto	u6511
 13474  077E  2F80               	goto	u6510
 13475  077F                     u6511:	
 13476  077F  2FD5               	goto	l522
 13477  0780                     u6510:	
 13478  0780                     l6809:	
 13479                           
 13480                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
 13481  0780  082D               	movf	Button_State_NotPressed@button,w
 13482  0781  3E0A               	addlw	10
 13483  0782  0086               	movwf	6
 13484  0783  3001               	movlw	1	; select bank2/3
 13485  0784  0087               	movwf	7
 13486  0785  3000               	movlw	0
 13487  0786  3FC0               	movwi [0]fsr1
 13488  0787  3FC1               	movwi [1]fsr1
 13489  0788                     l6811:	
 13490                           
 13491                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 13492  0788  082D               	movf	Button_State_NotPressed@button,w
 13493  0789  0086               	movwf	6
 13494  078A  3001               	movlw	1	; select bank2/3
 13495  078B  0087               	movwf	7
 13496  078C  0801               	movf	1,w
 13497  078D  3197  2751  3187   	fcall	_MTOUCH_Button_Initialize
 13498  0790  2FD5               	goto	l522
 13499  0791                     l6813:	
 13500  0791  082D               	movf	Button_State_NotPressed@button,w
 13501  0792  3E09               	addlw	9
 13502  0793  0086               	movwf	6
 13503  0794  3001               	movlw	1	; select bank2/3
 13504  0795  0087               	movwf	7
 13505  0796  0801               	movf	1,w
 13506  0797  00AE               	movwf	??_Button_State_NotPressed
 13507  0798  01AF               	clrf	??_Button_State_NotPressed+1
 13508  0799  1BAE               	btfsc	??_Button_State_NotPressed,7
 13509  079A  03AF               	decf	??_Button_State_NotPressed+1,f
 13510  079B  082D               	movf	Button_State_NotPressed@button,w
 13511  079C  3E0E               	addlw	14
 13512  079D  0086               	movwf	6
 13513  079E  3001               	movlw	1	; select bank2/3
 13514  079F  0087               	movwf	7
 13515  07A0  082F               	movf	??_Button_State_NotPressed+1,w
 13516  07A1  3A80               	xorlw	128
 13517  07A2  3C80               	sublw	128
 13518  07A3  1D03               	skipz
 13519  07A4  2FA7               	goto	u6525
 13520  07A5  082E               	movf	??_Button_State_NotPressed,w
 13521  07A6  0201               	subwf	1,w
 13522  07A7                     u6525:	
 13523  07A7  1803               	skipnc
 13524  07A8  2FAA               	goto	u6521
 13525  07A9  2FAB               	goto	u6520
 13526  07AA                     u6521:	
 13527  07AA  2FCC               	goto	l6819
 13528  07AB                     u6520:	
 13529  07AB                     l6815:	
 13530                           
 13531                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
 13532  07AB  3002               	movlw	2
 13533  07AC  0020               	movlb	0	; select bank0
 13534  07AD  00AE               	movwf	??_Button_State_NotPressed
 13535  07AE  082D               	movf	Button_State_NotPressed@button,w
 13536  07AF  3E02               	addlw	2
 13537  07B0  0086               	movwf	6
 13538  07B1  3001               	movlw	1	; select bank2/3
 13539  07B2  0087               	movwf	7
 13540  07B3  082E               	movf	??_Button_State_NotPressed,w
 13541  07B4  0081               	movwf	1
 13542                           
 13543                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 13544  07B5  082D               	movf	Button_State_NotPressed@button,w
 13545  07B6  3E0A               	addlw	10
 13546  07B7  0086               	movwf	6
 13547  07B8  3001               	movlw	1	; select bank2/3
 13548  07B9  0087               	movwf	7
 13549  07BA  3000               	movlw	0
 13550  07BB  3FC0               	movwi [0]fsr1
 13551  07BC  3FC1               	movwi [1]fsr1
 13552  07BD                     l6817:	
 13553                           
 13554                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
 13555  07BD  082D               	movf	Button_State_NotPressed@button,w
 13556  07BE  0086               	movwf	6
 13557  07BF  3001               	movlw	1	; select bank2/3
 13558  07C0  0087               	movwf	7
 13559  07C1  0801               	movf	1,w
 13560  07C2  00AE               	movwf	??_Button_State_NotPressed
 13561  07C3  082E               	movf	??_Button_State_NotPressed,w
 13562  07C4  00A7               	movwf	myButtonPressedCallback@button
 13563  07C5  0021               	movlb	1	; select bank1
 13564  07C6  086D               	movf	(_callback_pressed+1)^(0+128),w
 13565  07C7  008A               	movwf	10
 13566  07C8  086C               	movf	_callback_pressed^(0+128),w
 13567  07C9  000A               	callw
 13568  07CA  3187               	pagesel	$
 13569                           
 13570                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
 13571  07CB  2FD5               	goto	l522
 13572  07CC                     l6819:	
 13573                           
 13574                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
 13575  07CC  0020               	movlb	0	; select bank0
 13576  07CD  082D               	movf	Button_State_NotPressed@button,w
 13577  07CE  3E0A               	addlw	10
 13578  07CF  0086               	movwf	6
 13579  07D0  3001               	movlw	1	; select bank2/3
 13580  07D1  0087               	movwf	7
 13581  07D2  3000               	movlw	0
 13582  07D3  3FC0               	movwi [0]fsr1
 13583  07D4  3FC1               	movwi [1]fsr1
 13584  07D5                     l522:	
 13585                           
 13586                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
 13587  07D5  0020               	movlb	0	; select bank0
 13588  07D6  082D               	movf	Button_State_NotPressed@button,w
 13589  07D7  3E0C               	addlw	12
 13590  07D8  0086               	movwf	6
 13591  07D9  3001               	movlw	1	; select bank2/3
 13592  07DA  0087               	movwf	7
 13593  07DB  3001               	movlw	1
 13594  07DC  0781               	addwf	1,f
 13595  07DD  3141               	addfsr 1,1
 13596  07DE  1803               	skipnc
 13597  07DF  0A81               	incf	1,f
 13598                           
 13599                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 13600  07E0  082D               	movf	Button_State_NotPressed@button,w
 13601  07E1  3E0C               	addlw	12
 13602  07E2  0086               	movwf	6
 13603  07E3  3001               	movlw	1	; select bank2/3
 13604  07E4  0087               	movwf	7
 13605  07E5  0016               	moviw fsr1++
 13606  07E6  3A40               	xorlw	64
 13607  07E7  00AE               	movwf	??_Button_State_NotPressed
 13608  07E8  0016               	moviw fsr1++
 13609  07E9  04AE               	iorwf	??_Button_State_NotPressed,f
 13610  07EA  1D03               	btfss	3,2
 13611  07EB  2FED               	goto	u6531
 13612  07EC  2FEE               	goto	u6530
 13613  07ED                     u6531:	
 13614  07ED  2FFA               	goto	l526
 13615  07EE                     u6530:	
 13616  07EE                     l6821:	
 13617                           
 13618                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 13619  07EE  082D               	movf	Button_State_NotPressed@button,w
 13620  07EF  3E0C               	addlw	12
 13621  07F0  0086               	movwf	6
 13622  07F1  3001               	movlw	1	; select bank2/3
 13623  07F2  0087               	movwf	7
 13624  07F3  3000               	movlw	0
 13625  07F4  3FC0               	movwi [0]fsr1
 13626  07F5  3FC1               	movwi [1]fsr1
 13627  07F6                     l6823:	
 13628                           
 13629                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
 13630  07F6  082D               	movf	Button_State_NotPressed@button,w
 13631  07F7  318C  24DE  3187   	fcall	_Button_Baseline_Update
 13632  07FA                     l526:	
 13633  07FA  0008               	return
 13634  07FB                     __end_of_Button_State_NotPressed:	
 13635                           
 13636                           	psect	text71
 13637  0A8F                     __ptext71:	
 13638 ;; *************** function _Button_State_Initializing *****************
 13639 ;; Defined at:
 13640 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13641 ;; Parameters:    Size  Location     Type
 13642 ;;  button          1   13[BANK0 ] PTR struct .
 13643 ;;		 -> mtouch_button(48), 
 13644 ;; Auto vars:     Size  Location     Type
 13645 ;;		None
 13646 ;; Return value:  Size  Location     Type
 13647 ;;                  1    wreg      void 
 13648 ;; Registers used:
 13649 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13650 ;; Tracked objects:
 13651 ;;		On entry : 0/0
 13652 ;;		On exit  : 0/0
 13653 ;;		Unchanged: 0/0
 13654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13655 ;;      Params:         0       1       0       0       0       0       0       0
 13656 ;;      Locals:         0       0       0       0       0       0       0       0
 13657 ;;      Temps:          0       4       0       0       0       0       0       0
 13658 ;;      Totals:         0       5       0       0       0       0       0       0
 13659 ;;Total ram usage:        5 bytes
 13660 ;; Hardware stack levels used:    1
 13661 ;; Hardware stack levels required when called:    8
 13662 ;; This function calls:
 13663 ;;		_Button_Baseline_Initialize
 13664 ;;		_Button_Baseline_Update
 13665 ;; This function is called by:
 13666 ;;		_Button_Service
 13667 ;; This function uses a non-reentrant model
 13668 ;;
 13669                           
 13670                           
 13671                           ;psect for function _Button_State_Initializing
 13672  0A8F                     _Button_State_Initializing:	
 13673  0A8F                     l4913:	
 13674                           ;incstack = 0
 13675                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13676                           
 13677                           
 13678                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 13679  0A8F  0020               	movlb	0	; select bank0
 13680  0A90  082D               	movf	Button_State_Initializing@button,w
 13681  0A91  3E0A               	addlw	10
 13682  0A92  0086               	movwf	6
 13683  0A93  3001               	movlw	1	; select bank2/3
 13684  0A94  0087               	movwf	7
 13685  0A95  3F40               	moviw [0]fsr1
 13686  0A96  00AE               	movwf	??_Button_State_Initializing
 13687  0A97  3F41               	moviw [1]fsr1
 13688  0A98  00AF               	movwf	??_Button_State_Initializing+1
 13689  0A99  3000               	movlw	0
 13690  0A9A  022F               	subwf	??_Button_State_Initializing+1,w
 13691  0A9B  3009               	movlw	9
 13692  0A9C  1903               	skipnz
 13693  0A9D  022E               	subwf	??_Button_State_Initializing,w
 13694  0A9E  1803               	skipnc
 13695  0A9F  2AA1               	goto	u3931
 13696  0AA0  2AA2               	goto	u3930
 13697  0AA1                     u3931:	
 13698  0AA1  2AA7               	goto	l4917
 13699  0AA2                     u3930:	
 13700  0AA2                     l4915:	
 13701                           
 13702                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
 13703  0AA2  082D               	movf	Button_State_Initializing@button,w
 13704  0AA3  3196  26BD  318A   	fcall	_Button_Baseline_Initialize
 13705                           
 13706                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
 13707  0AA6  2AAB               	goto	l4919
 13708  0AA7                     l4917:	
 13709                           
 13710                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
 13711  0AA7  082D               	movf	Button_State_Initializing@button,w
 13712  0AA8  318C  24DE  318A   	fcall	_Button_Baseline_Update
 13713  0AAB                     l4919:	
 13714                           
 13715                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
 13716  0AAB  0020               	movlb	0	; select bank0
 13717  0AAC  082D               	movf	Button_State_Initializing@button,w
 13718  0AAD  3E0A               	addlw	10
 13719  0AAE  0086               	movwf	6
 13720  0AAF  3001               	movlw	1	; select bank2/3
 13721  0AB0  0087               	movwf	7
 13722  0AB1  3001               	movlw	1
 13723  0AB2  0781               	addwf	1,f
 13724  0AB3  3141               	addfsr 1,1
 13725  0AB4  1803               	skipnc
 13726  0AB5  0A81               	incf	1,f
 13727  0AB6                     l4921:	
 13728                           
 13729                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 13730  0AB6  082D               	movf	Button_State_Initializing@button,w
 13731  0AB7  3E0A               	addlw	10
 13732  0AB8  0086               	movwf	6
 13733  0AB9  3001               	movlw	1	; select bank2/3
 13734  0ABA  0087               	movwf	7
 13735  0ABB  3F40               	moviw [0]fsr1
 13736  0ABC  00AE               	movwf	??_Button_State_Initializing
 13737  0ABD  3F41               	moviw [1]fsr1
 13738  0ABE  00AF               	movwf	??_Button_State_Initializing+1
 13739  0ABF  3000               	movlw	0
 13740  0AC0  022F               	subwf	??_Button_State_Initializing+1,w
 13741  0AC1  3010               	movlw	16
 13742  0AC2  1903               	skipnz
 13743  0AC3  022E               	subwf	??_Button_State_Initializing,w
 13744  0AC4  1C03               	skipc
 13745  0AC5  2AC7               	goto	u3941
 13746  0AC6  2AC8               	goto	u3940
 13747  0AC7                     u3941:	
 13748  0AC7  2AF4               	goto	l517
 13749  0AC8                     u3940:	
 13750  0AC8                     l4923:	
 13751                           
 13752                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 13753  0AC8  082D               	movf	Button_State_Initializing@button,w
 13754  0AC9  3E05               	addlw	5
 13755  0ACA  0086               	movwf	6
 13756  0ACB  3001               	movlw	1	; select bank2/3
 13757  0ACC  0087               	movwf	7
 13758  0ACD  3F40               	moviw [0]fsr1
 13759  0ACE  00AE               	movwf	??_Button_State_Initializing
 13760  0ACF  3F41               	moviw [1]fsr1
 13761  0AD0  00AF               	movwf	??_Button_State_Initializing+1
 13762  0AD1  3F42               	moviw [2]fsr1
 13763  0AD2  00B0               	movwf	??_Button_State_Initializing+2
 13764  0AD3  3F43               	moviw [3]fsr1
 13765  0AD4  00B1               	movwf	??_Button_State_Initializing+3
 13766  0AD5  3004               	movlw	4
 13767  0AD6                     u3955:	
 13768  0AD6  36B1               	lsrf	??_Button_State_Initializing+3,f
 13769  0AD7  0CB0               	rrf	??_Button_State_Initializing+2,f
 13770  0AD8  0CAF               	rrf	??_Button_State_Initializing+1,f
 13771  0AD9  0CAE               	rrf	??_Button_State_Initializing,f
 13772  0ADA                     u3950:	
 13773  0ADA  0B89               	decfsz	9,f
 13774  0ADB  2AD6               	goto	u3955
 13775  0ADC  082D               	movf	Button_State_Initializing@button,w
 13776  0ADD  3E03               	addlw	3
 13777  0ADE  0086               	movwf	6
 13778  0ADF  3001               	movlw	1	; select bank2/3
 13779  0AE0  0087               	movwf	7
 13780  0AE1  082E               	movf	??_Button_State_Initializing,w
 13781  0AE2  3FC0               	movwi [0]fsr1
 13782  0AE3  082F               	movf	??_Button_State_Initializing+1,w
 13783  0AE4  3FC1               	movwi [1]fsr1
 13784                           
 13785                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 13786  0AE5  082D               	movf	Button_State_Initializing@button,w
 13787  0AE6  3E02               	addlw	2
 13788  0AE7  0086               	movwf	6
 13789  0AE8  3001               	movlw	1	; select bank2/3
 13790  0AE9  0087               	movwf	7
 13791  0AEA  0181               	clrf	1
 13792  0AEB  0A81               	incf	1,f
 13793                           
 13794                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 13795  0AEC  082D               	movf	Button_State_Initializing@button,w
 13796  0AED  3E0A               	addlw	10
 13797  0AEE  0086               	movwf	6
 13798  0AEF  3001               	movlw	1	; select bank2/3
 13799  0AF0  0087               	movwf	7
 13800  0AF1  3000               	movlw	0
 13801  0AF2  3FC0               	movwi [0]fsr1
 13802  0AF3  3FC1               	movwi [1]fsr1
 13803  0AF4                     l517:	
 13804  0AF4  0008               	return
 13805  0AF5                     __end_of_Button_State_Initializing:	
 13806                           
 13807                           	psect	text72
 13808  0AF5                     __ptext72:	
 13809 ;; *************** function _Button_State_Pressed *****************
 13810 ;; Defined at:
 13811 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13812 ;; Parameters:    Size  Location     Type
 13813 ;;  button          1   13[BANK0 ] PTR struct .
 13814 ;;		 -> mtouch_button(48), 
 13815 ;; Auto vars:     Size  Location     Type
 13816 ;;		None
 13817 ;; Return value:  Size  Location     Type
 13818 ;;                  1    wreg      void 
 13819 ;; Registers used:
 13820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13821 ;; Tracked objects:
 13822 ;;		On entry : 0/0
 13823 ;;		On exit  : 0/0
 13824 ;;		Unchanged: 0/0
 13825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13826 ;;      Params:         0       1       0       0       0       0       0       0
 13827 ;;      Locals:         0       0       0       0       0       0       0       0
 13828 ;;      Temps:          0       2       0       0       0       0       0       0
 13829 ;;      Totals:         0       3       0       0       0       0       0       0
 13830 ;;Total ram usage:        3 bytes
 13831 ;; Hardware stack levels used:    1
 13832 ;; Hardware stack levels required when called:    8
 13833 ;; This function calls:
 13834 ;;		_Button_DefaultCallback
 13835 ;;		_MTOUCH_Button_Initialize
 13836 ;;		_myButtonReleasedCallback
 13837 ;; This function is called by:
 13838 ;;		_Button_Service
 13839 ;; This function uses a non-reentrant model
 13840 ;;
 13841                           
 13842                           
 13843                           ;psect for function _Button_State_Pressed
 13844  0AF5                     _Button_State_Pressed:	
 13845  0AF5                     l6825:	
 13846                           ;incstack = 0
 13847                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13848                           
 13849                           
 13850                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 13851  0AF5  0020               	movlb	0	; select bank0
 13852  0AF6  082D               	movf	Button_State_Pressed@button,w
 13853  0AF7  3E0A               	addlw	10
 13854  0AF8  0086               	movwf	6
 13855  0AF9  3001               	movlw	1	; select bank2/3
 13856  0AFA  0087               	movwf	7
 13857  0AFB  3F40               	moviw [0]fsr1
 13858  0AFC  00AE               	movwf	??_Button_State_Pressed
 13859  0AFD  3F41               	moviw [1]fsr1
 13860  0AFE  00AF               	movwf	??_Button_State_Pressed+1
 13861  0AFF  3007               	movlw	7
 13862  0B00  022F               	subwf	??_Button_State_Pressed+1,w
 13863  0B01  30D0               	movlw	208
 13864  0B02  1903               	skipnz
 13865  0B03  022E               	subwf	??_Button_State_Pressed,w
 13866  0B04  1C03               	skipc
 13867  0B05  2B07               	goto	u6541
 13868  0B06  2B08               	goto	u6540
 13869  0B07                     u6541:	
 13870  0B07  2B20               	goto	l6829
 13871  0B08                     u6540:	
 13872  0B08                     l6827:	
 13873                           
 13874                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
 13875  0B08  082D               	movf	Button_State_Pressed@button,w
 13876  0B09  0086               	movwf	6
 13877  0B0A  3001               	movlw	1	; select bank2/3
 13878  0B0B  0087               	movwf	7
 13879  0B0C  0801               	movf	1,w
 13880  0B0D  3197  2751  318A   	fcall	_MTOUCH_Button_Initialize
 13881                           
 13882                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
 13883  0B10  0020               	movlb	0	; select bank0
 13884  0B11  082D               	movf	Button_State_Pressed@button,w
 13885  0B12  0086               	movwf	6
 13886  0B13  3001               	movlw	1	; select bank2/3
 13887  0B14  0087               	movwf	7
 13888  0B15  0801               	movf	1,w
 13889  0B16  00AE               	movwf	??_Button_State_Pressed
 13890  0B17  082E               	movf	??_Button_State_Pressed,w
 13891  0B18  00A7               	movwf	myButtonReleasedCallback@button
 13892  0B19  0021               	movlb	1	; select bank1
 13893  0B1A  086B               	movf	(_callback_notPressed+1)^(0+128),w
 13894  0B1B  008A               	movwf	10
 13895  0B1C  086A               	movf	_callback_notPressed^(0+128),w
 13896  0B1D  000A               	callw
 13897  0B1E  318A               	pagesel	$
 13898                           
 13899                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
 13900  0B1F  2B60               	goto	l532
 13901  0B20                     l6829:	
 13902  0B20  082D               	movf	Button_State_Pressed@button,w
 13903  0B21  3E09               	addlw	9
 13904  0B22  0086               	movwf	6
 13905  0B23  3001               	movlw	1	; select bank2/3
 13906  0B24  0087               	movwf	7
 13907  0B25  0801               	movf	1,w
 13908  0B26  3A80               	xorlw	128
 13909  0B27  00AE               	movwf	??_Button_State_Pressed
 13910  0B28  082D               	movf	Button_State_Pressed@button,w
 13911  0B29  3E0E               	addlw	14
 13912  0B2A  0086               	movwf	6
 13913  0B2B  3001               	movlw	1	; select bank2/3
 13914  0B2C  0087               	movwf	7
 13915  0B2D  082D               	movf	Button_State_Pressed@button,w
 13916  0B2E  3E0E               	addlw	14
 13917  0B2F  0084               	movwf	4
 13918  0B30  3001               	movlw	1	; select bank2/3
 13919  0B31  0085               	movwf	5
 13920  0B32  3600               	lsrf	0,w
 13921  0B33  0201               	subwf	1,w
 13922  0B34  3A80               	xorlw	128
 13923  0B35  02AE               	subwf	??_Button_State_Pressed,f
 13924  0B36  1803               	skipnc
 13925  0B37  2B39               	goto	u6551
 13926  0B38  2B3A               	goto	u6550
 13927  0B39                     u6551:	
 13928  0B39  2B60               	goto	l532
 13929  0B3A                     u6550:	
 13930  0B3A                     l6831:	
 13931                           
 13932                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 13933  0B3A  082D               	movf	Button_State_Pressed@button,w
 13934  0B3B  3E02               	addlw	2
 13935  0B3C  0086               	movwf	6
 13936  0B3D  3001               	movlw	1	; select bank2/3
 13937  0B3E  0087               	movwf	7
 13938  0B3F  0181               	clrf	1
 13939  0B40  0A81               	incf	1,f
 13940                           
 13941                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 13942  0B41  082D               	movf	Button_State_Pressed@button,w
 13943  0B42  3E0A               	addlw	10
 13944  0B43  0086               	movwf	6
 13945  0B44  3001               	movlw	1	; select bank2/3
 13946  0B45  0087               	movwf	7
 13947  0B46  3000               	movlw	0
 13948  0B47  3FC0               	movwi [0]fsr1
 13949  0B48  3FC1               	movwi [1]fsr1
 13950                           
 13951                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 13952  0B49  082D               	movf	Button_State_Pressed@button,w
 13953  0B4A  3E0C               	addlw	12
 13954  0B4B  0086               	movwf	6
 13955  0B4C  3001               	movlw	1	; select bank2/3
 13956  0B4D  0087               	movwf	7
 13957  0B4E  30FF               	movlw	255
 13958  0B4F  3FC0               	movwi [0]fsr1
 13959  0B50  30FB               	movlw	251
 13960  0B51  3FC1               	movwi [1]fsr1
 13961  0B52                     l6833:	
 13962                           
 13963                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
 13964  0B52  082D               	movf	Button_State_Pressed@button,w
 13965  0B53  0086               	movwf	6
 13966  0B54  3001               	movlw	1	; select bank2/3
 13967  0B55  0087               	movwf	7
 13968  0B56  0801               	movf	1,w
 13969  0B57  00AE               	movwf	??_Button_State_Pressed
 13970  0B58  082E               	movf	??_Button_State_Pressed,w
 13971  0B59  00A7               	movwf	myButtonReleasedCallback@button
 13972  0B5A  0021               	movlb	1	; select bank1
 13973  0B5B  086B               	movf	(_callback_notPressed+1)^(0+128),w
 13974  0B5C  008A               	movwf	10
 13975  0B5D  086A               	movf	_callback_notPressed^(0+128),w
 13976  0B5E  000A               	callw
 13977  0B5F  318A               	pagesel	$
 13978  0B60                     l532:	
 13979  0B60  0008               	return
 13980  0B61                     __end_of_Button_State_Pressed:	
 13981                           
 13982                           	psect	text73
 13983  10FD                     __ptext73:	
 13984 ;; *************** function _myButtonPressedCallback *****************
 13985 ;; Defined at:
 13986 ;;		line 323 in file "main.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;  button          1    7[BANK0 ] enum E2937
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;		None
 13991 ;; Return value:  Size  Location     Type
 13992 ;;                  1    wreg      void 
 13993 ;; Registers used:
 13994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14000 ;;      Params:         0       1       0       0       0       0       0       0
 14001 ;;      Locals:         0       0       0       0       0       0       0       0
 14002 ;;      Temps:          0       0       0       0       0       0       0       0
 14003 ;;      Totals:         0       1       0       0       0       0       0       0
 14004 ;;Total ram usage:        1 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    8
 14007 ;; This function calls:
 14008 ;;		_check_on_off
 14009 ;;		_check_up_down
 14010 ;; This function is called by:
 14011 ;;		_main
 14012 ;;		_Button_State_NotPressed
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           
 14017                           ;psect for function _myButtonPressedCallback
 14018  10FD                     _myButtonPressedCallback:	
 14019  10FD                     l6735:	
 14020                           ;incstack = 0
 14021                           ; Regs used in _myButtonPressedCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14022                           
 14023                           
 14024                           ;main.c: 323: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 324:
      +                           {;main.c: 325:     check_on_off();
 14025  10FD  3191  21C5  3190   	fcall	_check_on_off
 14026                           
 14027                           ;main.c: 326:     check_up_down();
 14028  1100  3188  20E9  3190   	fcall	_check_up_down
 14029  1103                     l1286:	
 14030  1103  0008               	return
 14031  1104                     __end_of_myButtonPressedCallback:	
 14032                           
 14033                           	psect	text74
 14034  10B0                     __ptext74:	
 14035 ;; *************** function _Button_DefaultCallback *****************
 14036 ;; Defined at:
 14037 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14038 ;; Parameters:    Size  Location     Type
 14039 ;;  button          1    7[BANK0 ] enum E3069
 14040 ;; Auto vars:     Size  Location     Type
 14041 ;;		None
 14042 ;; Return value:  Size  Location     Type
 14043 ;;                  1    wreg      void 
 14044 ;; Registers used:
 14045 ;;		None
 14046 ;; Tracked objects:
 14047 ;;		On entry : 0/0
 14048 ;;		On exit  : 0/0
 14049 ;;		Unchanged: 0/0
 14050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14051 ;;      Params:         0       1       0       0       0       0       0       0
 14052 ;;      Locals:         0       0       0       0       0       0       0       0
 14053 ;;      Temps:          0       0       0       0       0       0       0       0
 14054 ;;      Totals:         0       1       0       0       0       0       0       0
 14055 ;;Total ram usage:        1 bytes
 14056 ;; Hardware stack levels used:    1
 14057 ;; Hardware stack levels required when called:    5
 14058 ;; This function calls:
 14059 ;;		Nothing
 14060 ;; This function is called by:
 14061 ;;		_Button_State_NotPressed
 14062 ;;		_Button_State_Pressed
 14063 ;; This function uses a non-reentrant model
 14064 ;;
 14065                           
 14066                           
 14067                           ;psect for function _Button_DefaultCallback
 14068  10B0                     _Button_DefaultCallback:	
 14069  10B0                     l636:	
 14070                           ;incstack = 0
 14071                           ; Regs used in _Button_DefaultCallback: []
 14072                           
 14073  10B0  0008               	return
 14074  10B1                     __end_of_Button_DefaultCallback:	
 14075                           
 14076                           	psect	text75
 14077  12D6                     __ptext75:	
 14078 ;; *************** function _myButtonReleasedCallback *****************
 14079 ;; Defined at:
 14080 ;;		line 328 in file "main.c"
 14081 ;; Parameters:    Size  Location     Type
 14082 ;;  button          1    7[BANK0 ] enum E2937
 14083 ;; Auto vars:     Size  Location     Type
 14084 ;;		None
 14085 ;; Return value:  Size  Location     Type
 14086 ;;                  1    wreg      void 
 14087 ;; Registers used:
 14088 ;;		wreg, status,2, status,0, pclath, cstack
 14089 ;; Tracked objects:
 14090 ;;		On entry : 0/0
 14091 ;;		On exit  : 0/0
 14092 ;;		Unchanged: 0/0
 14093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14094 ;;      Params:         0       1       0       0       0       0       0       0
 14095 ;;      Locals:         0       0       0       0       0       0       0       0
 14096 ;;      Temps:          0       0       0       0       0       0       0       0
 14097 ;;      Totals:         0       1       0       0       0       0       0       0
 14098 ;;Total ram usage:        1 bytes
 14099 ;; Hardware stack levels used:    1
 14100 ;; Hardware stack levels required when called:    6
 14101 ;; This function calls:
 14102 ;;		_LED_DOWN_OFF
 14103 ;;		_LED_UP_OFF
 14104 ;; This function is called by:
 14105 ;;		_main
 14106 ;;		_Button_State_Pressed
 14107 ;; This function uses a non-reentrant model
 14108 ;;
 14109                           
 14110                           
 14111                           ;psect for function _myButtonReleasedCallback
 14112  12D6                     _myButtonReleasedCallback:	
 14113  12D6                     l6737:	
 14114                           ;incstack = 0
 14115                           ; Regs used in _myButtonReleasedCallback: [wreg+status,2+status,0+pclath+cstack]
 14116                           
 14117                           
 14118                           ;main.c: 328: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 329
      +                          : {;main.c: 330:     if(triac_level.full!=0xEE)
 14119  12D6  30EE               	movlw	238
 14120  12D7  0020               	movlb	0	; select bank0
 14121  12D8  0659               	xorwf	_triac_level,w
 14122  12D9  045A               	iorwf	_triac_level+1,w
 14123  12DA  1903               	btfsc	3,2
 14124  12DB  2ADD               	goto	u6371
 14125  12DC  2ADE               	goto	u6370
 14126  12DD                     u6371:	
 14127  12DD  2AE1               	goto	l6741
 14128  12DE                     u6370:	
 14129  12DE                     l6739:	
 14130                           
 14131                           ;main.c: 331:     {;main.c: 332:         LED_UP_OFF();
 14132  12DE  3190  20BB  3192   	fcall	_LED_UP_OFF
 14133  12E1                     l6741:	
 14134                           
 14135                           ;main.c: 334:     if(triac_level.full!=0x00)
 14136  12E1  0020               	movlb	0	; select bank0
 14137  12E2  0859               	movf	_triac_level,w
 14138  12E3  045A               	iorwf	_triac_level+1,w
 14139  12E4  1903               	btfsc	3,2
 14140  12E5  2AE7               	goto	u6381
 14141  12E6  2AE8               	goto	u6380
 14142  12E7                     u6381:	
 14143  12E7  2AEB               	goto	l6745
 14144  12E8                     u6380:	
 14145  12E8                     l6743:	
 14146                           
 14147                           ;main.c: 335:     {;main.c: 336:         LED_DOWN_OFF();
 14148  12E8  3190  20B8  3192   	fcall	_LED_DOWN_OFF
 14149  12EB                     l6745:	
 14150                           
 14151                           ;main.c: 338:     counter_PRESS = 0;
 14152  12EB  0020               	movlb	0	; select bank0
 14153  12EC  01E8               	clrf	_counter_PRESS
 14154  12ED                     l1291:	
 14155  12ED  0008               	return
 14156  12EE                     __end_of_myButtonReleasedCallback:	
 14157                           
 14158                           	psect	text76
 14159  08E9                     __ptext76:	
 14160 ;; *************** function _check_up_down *****************
 14161 ;; Defined at:
 14162 ;;		line 348 in file "main.c"
 14163 ;; Parameters:    Size  Location     Type
 14164 ;;		None
 14165 ;; Auto vars:     Size  Location     Type
 14166 ;;		None
 14167 ;; Return value:  Size  Location     Type
 14168 ;;                  1    wreg      void 
 14169 ;; Registers used:
 14170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14171 ;; Tracked objects:
 14172 ;;		On entry : 0/0
 14173 ;;		On exit  : 0/0
 14174 ;;		Unchanged: 0/0
 14175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14176 ;;      Params:         0       0       0       0       0       0       0       0
 14177 ;;      Locals:         0       0       0       0       0       0       0       0
 14178 ;;      Temps:          0       1       0       0       0       0       0       0
 14179 ;;      Totals:         0       1       0       0       0       0       0       0
 14180 ;;Total ram usage:        1 bytes
 14181 ;; Hardware stack levels used:    1
 14182 ;; Hardware stack levels required when called:    7
 14183 ;; This function calls:
 14184 ;;		_LED_DOWN_ON
 14185 ;;		_LED_UP_ON
 14186 ;;		_MTOUCH_Button_Buttonmask_Get
 14187 ;; This function is called by:
 14188 ;;		_myButtonPressedCallback
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192                           
 14193                           ;psect for function _check_up_down
 14194  08E9                     _check_up_down:	
 14195  08E9                     l6643:	
 14196                           ;incstack = 0
 14197                           ; Regs used in _check_up_down: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14198                           
 14199                           
 14200                           ;main.c: 350:     if(last_touch_status.CS1 == 1)
 14201  08E9  1CF0               	btfss	_last_touch_status,1
 14202  08EA  28EC               	goto	u6251
 14203  08EB  28ED               	goto	u6250
 14204  08EC                     u6251:	
 14205  08EC  2935               	goto	l1302
 14206  08ED                     u6250:	
 14207  08ED                     l6645:	
 14208                           
 14209                           ;main.c: 351:     {;main.c: 352:         if(MTOUCH_Button_Buttonmask_Get() == 1 && triac
      +                          _level.full!=0xEE)
 14210  08ED  3195  25A1  3188   	fcall	_MTOUCH_Button_Buttonmask_Get
 14211  08F0  3A01               	xorlw	1
 14212  08F1  1D03               	skipz
 14213  08F2  28F4               	goto	u6261
 14214  08F3  28F5               	goto	u6260
 14215  08F4                     u6261:	
 14216  08F4  2918               	goto	l6659
 14217  08F5                     u6260:	
 14218  08F5                     l6647:	
 14219  08F5  30EE               	movlw	238
 14220  08F6  0020               	movlb	0	; select bank0
 14221  08F7  0659               	xorwf	_triac_level,w
 14222  08F8  045A               	iorwf	_triac_level+1,w
 14223  08F9  1903               	btfsc	3,2
 14224  08FA  28FC               	goto	u6271
 14225  08FB  28FD               	goto	u6270
 14226  08FC                     u6271:	
 14227  08FC  2918               	goto	l6659
 14228  08FD                     u6270:	
 14229  08FD                     l6649:	
 14230                           
 14231                           ;main.c: 353:         {;main.c: 354:             LED_UP_ON();
 14232  08FD  3190  20C4  3188   	fcall	_LED_UP_ON
 14233  0900                     l6651:	
 14234                           
 14235                           ;main.c: 355:             triac_level.level++;
 14236  0900  0020               	movlb	0	; select bank0
 14237  0901  0859               	movf	_triac_level,w
 14238  0902  390F               	andlw	15
 14239  0903  00A6               	movwf	??_check_up_down
 14240  0904  0AA6               	incf	??_check_up_down,f
 14241  0905  0859               	movf	_triac_level,w
 14242  0906  0626               	xorwf	??_check_up_down,w
 14243  0907  39F0               	andlw	-16
 14244  0908  0626               	xorwf	??_check_up_down,w
 14245  0909  00D9               	movwf	_triac_level
 14246  090A                     l6653:	
 14247                           
 14248                           ;main.c: 356:             triac_level.last_level = triac_level.level;
 14249  090A  0859               	movf	_triac_level,w
 14250  090B  390F               	andlw	15
 14251  090C  00A6               	movwf	??_check_up_down
 14252  090D  0EA6               	swapf	??_check_up_down,f
 14253  090E  0859               	movf	_triac_level,w
 14254  090F  0626               	xorwf	??_check_up_down,w
 14255  0910  390F               	andlw	-241
 14256  0911  0626               	xorwf	??_check_up_down,w
 14257  0912  00D9               	movwf	_triac_level
 14258  0913                     l6655:	
 14259                           
 14260                           ;main.c: 357:             counter_PRESS = 0;
 14261  0913  01E8               	clrf	_counter_PRESS
 14262  0914                     l6657:	
 14263                           
 14264                           ;main.c: 358:             update_state_flag = 1;
 14265  0914  0021               	movlb	1	; select bank1
 14266  0915  01C8               	clrf	_update_state_flag^(0+128)
 14267  0916  0AC8               	incf	_update_state_flag^(0+128),f
 14268                           
 14269                           ;main.c: 359:         }
 14270  0917  2935               	goto	l1302
 14271  0918                     l6659:	
 14272  0918  3195  25A1  3188   	fcall	_MTOUCH_Button_Buttonmask_Get
 14273  091B  3A04               	xorlw	4
 14274  091C  1D03               	skipz
 14275  091D  291F               	goto	u6281
 14276  091E  2920               	goto	u6280
 14277  091F                     u6281:	
 14278  091F  2935               	goto	l1298
 14279  0920                     u6280:	
 14280  0920                     l6661:	
 14281  0920  0020               	movlb	0	; select bank0
 14282  0921  0859               	movf	_triac_level,w
 14283  0922  045A               	iorwf	_triac_level+1,w
 14284  0923  1903               	btfsc	3,2
 14285  0924  2926               	goto	u6291
 14286  0925  2927               	goto	u6290
 14287  0926                     u6291:	
 14288  0926  2935               	goto	l1298
 14289  0927                     u6290:	
 14290  0927                     l6663:	
 14291                           
 14292                           ;main.c: 361:         {;main.c: 362:             LED_DOWN_ON();
 14293  0927  3190  20C1  3188   	fcall	_LED_DOWN_ON
 14294  092A                     l6665:	
 14295                           
 14296                           ;main.c: 363:             triac_level.level--;
 14297  092A  0020               	movlb	0	; select bank0
 14298  092B  0859               	movf	_triac_level,w
 14299  092C  390F               	andlw	15
 14300  092D  00A6               	movwf	??_check_up_down
 14301  092E  03A6               	decf	??_check_up_down,f
 14302  092F  0859               	movf	_triac_level,w
 14303  0930  0626               	xorwf	??_check_up_down,w
 14304  0931  39F0               	andlw	-16
 14305  0932  0626               	xorwf	??_check_up_down,w
 14306  0933  00D9               	movwf	_triac_level
 14307  0934  290A               	goto	l6653
 14308  0935                     l1298:	
 14309                           ;main.c: 368:     }
 14310                           
 14311  0935                     l1302:	
 14312  0935  0008               	return
 14313  0936                     __end_of_check_up_down:	
 14314                           
 14315                           	psect	text77
 14316  11C5                     __ptext77:	
 14317 ;; *************** function _check_on_off *****************
 14318 ;; Defined at:
 14319 ;;		line 340 in file "main.c"
 14320 ;; Parameters:    Size  Location     Type
 14321 ;;		None
 14322 ;; Auto vars:     Size  Location     Type
 14323 ;;		None
 14324 ;; Return value:  Size  Location     Type
 14325 ;;                  1    wreg      void 
 14326 ;; Registers used:
 14327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14328 ;; Tracked objects:
 14329 ;;		On entry : 0/0
 14330 ;;		On exit  : 0/0
 14331 ;;		Unchanged: 0/0
 14332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14333 ;;      Params:         0       0       0       0       0       0       0       0
 14334 ;;      Locals:         0       0       0       0       0       0       0       0
 14335 ;;      Temps:          0       1       0       0       0       0       0       0
 14336 ;;      Totals:         0       1       0       0       0       0       0       0
 14337 ;;Total ram usage:        1 bytes
 14338 ;; Hardware stack levels used:    1
 14339 ;; Hardware stack levels required when called:    7
 14340 ;; This function calls:
 14341 ;;		_MTOUCH_Button_Buttonmask_Get
 14342 ;; This function is called by:
 14343 ;;		_myButtonPressedCallback
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           
 14348                           ;psect for function _check_on_off
 14349  11C5                     _check_on_off:	
 14350  11C5                     l4655:	
 14351                           ;incstack = 0
 14352                           ; Regs used in _check_on_off: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14353                           
 14354                           
 14355                           ;main.c: 342:     if(MTOUCH_Button_Buttonmask_Get() == 2)
 14356  11C5  3195  25A1  3191   	fcall	_MTOUCH_Button_Buttonmask_Get
 14357  11C8  3A02               	xorlw	2
 14358  11C9  1D03               	skipz
 14359  11CA  29CC               	goto	u3531
 14360  11CB  29CD               	goto	u3530
 14361  11CC                     u3531:	
 14362  11CC  29D2               	goto	l1295
 14363  11CD                     u3530:	
 14364  11CD                     l4657:	
 14365                           
 14366                           ;main.c: 343:     {;main.c: 344:         counter_ON_OFF++;
 14367  11CD  3001               	movlw	1
 14368  11CE  0020               	movlb	0	; select bank0
 14369  11CF  00A6               	movwf	??_check_on_off
 14370  11D0  0826               	movf	??_check_on_off,w
 14371  11D1  07E9               	addwf	_counter_ON_OFF,f
 14372  11D2                     l1295:	
 14373  11D2  0008               	return
 14374  11D3                     __end_of_check_on_off:	
 14375                           
 14376                           	psect	text78
 14377  15A1                     __ptext78:	
 14378 ;; *************** function _MTOUCH_Button_Buttonmask_Get *****************
 14379 ;; Defined at:
 14380 ;;		line 421 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14381 ;; Parameters:    Size  Location     Type
 14382 ;;		None
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;  i               1    5[BANK0 ] unsigned char 
 14385 ;;  output          1    4[BANK0 ] unsigned char 
 14386 ;; Return value:  Size  Location     Type
 14387 ;;                  1    wreg      unsigned char 
 14388 ;; Registers used:
 14389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14390 ;; Tracked objects:
 14391 ;;		On entry : 0/0
 14392 ;;		On exit  : 0/0
 14393 ;;		Unchanged: 0/0
 14394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14395 ;;      Params:         0       0       0       0       0       0       0       0
 14396 ;;      Locals:         0       2       0       0       0       0       0       0
 14397 ;;      Temps:          0       2       0       0       0       0       0       0
 14398 ;;      Totals:         0       4       0       0       0       0       0       0
 14399 ;;Total ram usage:        4 bytes
 14400 ;; Hardware stack levels used:    1
 14401 ;; Hardware stack levels required when called:    6
 14402 ;; This function calls:
 14403 ;;		_MTOUCH_Button_isPressed
 14404 ;; This function is called by:
 14405 ;;		_main
 14406 ;;		_check_on_off
 14407 ;;		_check_up_down
 14408 ;; This function uses a non-reentrant model
 14409 ;;
 14410                           
 14411                           
 14412                           ;psect for function _MTOUCH_Button_Buttonmask_Get
 14413  15A1                     _MTOUCH_Button_Buttonmask_Get:	
 14414  15A1                     l4403:	
 14415                           ;incstack = 0
 14416                           ; Regs used in _MTOUCH_Button_Buttonmask_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 14417                           
 14418                           
 14419                           ;mcc_generated_files/mtouch/mtouch_button.c: 423:     mtouch_buttonmask_t output = 0;
 14420  15A1  0020               	movlb	0	; select bank0
 14421  15A2  01A4               	clrf	MTOUCH_Button_Buttonmask_Get@output
 14422                           
 14423                           ;mcc_generated_files/mtouch/mtouch_button.c: 425:     for (uint8_t i = 0; i < 3u; i++)
 14424  15A3  01A5               	clrf	MTOUCH_Button_Buttonmask_Get@i
 14425  15A4                     l4409:	
 14426                           
 14427                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 427:         if (MTOUCH_Button_isPressed(i) == 1)
 14428  15A4  0825               	movf	MTOUCH_Button_Buttonmask_Get@i,w
 14429  15A5  3194  24BE  3195   	fcall	_MTOUCH_Button_isPressed
 14430  15A8  3A01               	xorlw	1
 14431  15A9  1D03               	skipz
 14432  15AA  2DAC               	goto	u3111
 14433  15AB  2DAD               	goto	u3110
 14434  15AC                     u3111:	
 14435  15AC  2DB9               	goto	l596
 14436  15AD                     u3110:	
 14437  15AD                     l4411:	
 14438                           
 14439                           ;mcc_generated_files/mtouch/mtouch_button.c: 428:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 429:             output |= (mtouch_buttonmask_t)0x01 << i;
 14440  15AD  3001               	movlw	1
 14441  15AE  0020               	movlb	0	; select bank0
 14442  15AF  00A2               	movwf	??_MTOUCH_Button_Buttonmask_Get
 14443  15B0  0A25               	incf	MTOUCH_Button_Buttonmask_Get@i,w
 14444  15B1  2DB3               	goto	u3124
 14445  15B2                     u3125:	
 14446  15B2  35A2               	lslf	??_MTOUCH_Button_Buttonmask_Get,f
 14447  15B3                     u3124:	
 14448  15B3  0B89               	decfsz	9,f
 14449  15B4  2DB2               	goto	u3125
 14450  15B5  0822               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 14451  15B6  00A3               	movwf	??_MTOUCH_Button_Buttonmask_Get+1
 14452  15B7  0823               	movf	??_MTOUCH_Button_Buttonmask_Get+1,w
 14453  15B8  04A4               	iorwf	MTOUCH_Button_Buttonmask_Get@output,f
 14454  15B9                     l596:	
 14455                           ;mcc_generated_files/mtouch/mtouch_button.c: 430:         }
 14456                           
 14457                           
 14458                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     }
 14459  15B9  3001               	movlw	1
 14460  15BA  0020               	movlb	0	; select bank0
 14461  15BB  00A2               	movwf	??_MTOUCH_Button_Buttonmask_Get
 14462  15BC  0822               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 14463  15BD  07A5               	addwf	MTOUCH_Button_Buttonmask_Get@i,f
 14464  15BE                     l4413:	
 14465  15BE  3003               	movlw	3
 14466  15BF  0225               	subwf	MTOUCH_Button_Buttonmask_Get@i,w
 14467  15C0  1C03               	skipc
 14468  15C1  2DC3               	goto	u3131
 14469  15C2  2DC4               	goto	u3130
 14470  15C3                     u3131:	
 14471  15C3  2DA4               	goto	l4409
 14472  15C4                     u3130:	
 14473  15C4                     l4415:	
 14474                           
 14475                           ;mcc_generated_files/mtouch/mtouch_button.c: 432:     return output;
 14476  15C4  0824               	movf	MTOUCH_Button_Buttonmask_Get@output,w
 14477  15C5                     l597:	
 14478  15C5  0008               	return
 14479  15C6                     __end_of_MTOUCH_Button_Buttonmask_Get:	
 14480                           
 14481                           	psect	text79
 14482  14BE                     __ptext79:	
 14483 ;; *************** function _MTOUCH_Button_isPressed *****************
 14484 ;; Defined at:
 14485 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14486 ;; Parameters:    Size  Location     Type
 14487 ;;  name            1    wreg     enum E3069
 14488 ;; Auto vars:     Size  Location     Type
 14489 ;;  name            1    1[BANK0 ] enum E3069
 14490 ;; Return value:  Size  Location     Type
 14491 ;;                  1    wreg      _Bool 
 14492 ;; Registers used:
 14493 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14494 ;; Tracked objects:
 14495 ;;		On entry : 0/0
 14496 ;;		On exit  : 0/0
 14497 ;;		Unchanged: 0/0
 14498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14499 ;;      Params:         0       0       0       0       0       0       0       0
 14500 ;;      Locals:         0       1       0       0       0       0       0       0
 14501 ;;      Temps:          0       1       0       0       0       0       0       0
 14502 ;;      Totals:         0       2       0       0       0       0       0       0
 14503 ;;Total ram usage:        2 bytes
 14504 ;; Hardware stack levels used:    1
 14505 ;; Hardware stack levels required when called:    5
 14506 ;; This function calls:
 14507 ;;		Nothing
 14508 ;; This function is called by:
 14509 ;;		_MTOUCH_Button_Buttonmask_Get
 14510 ;;		_main
 14511 ;;		_touch_example
 14512 ;; This function uses a non-reentrant model
 14513 ;;
 14514                           
 14515                           
 14516                           ;psect for function _MTOUCH_Button_isPressed
 14517  14BE                     _MTOUCH_Button_isPressed:	
 14518                           
 14519                           ;incstack = 0
 14520                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 14521                           ;MTOUCH_Button_isPressed@name stored from wreg
 14522  14BE  0020               	movlb	0	; select bank0
 14523  14BF  00A1               	movwf	MTOUCH_Button_isPressed@name
 14524  14C0                     l4255:	
 14525                           
 14526                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 14527  14C0  3003               	movlw	3
 14528  14C1  0221               	subwf	MTOUCH_Button_isPressed@name,w
 14529  14C2  1803               	skipnc
 14530  14C3  2CC5               	goto	u2901
 14531  14C4  2CC6               	goto	u2900
 14532  14C5                     u2901:	
 14533  14C5  2CDB               	goto	l4263
 14534  14C6                     u2900:	
 14535  14C6                     l4257:	
 14536                           
 14537                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 14538  14C6  0821               	movf	MTOUCH_Button_isPressed@name,w
 14539  14C7  00A0               	movwf	??_MTOUCH_Button_isPressed
 14540  14C8  3003               	movlw	3
 14541  14C9                     u2915:	
 14542  14C9  35A0               	lslf	??_MTOUCH_Button_isPressed,f
 14543  14CA  3EFF               	addlw	-1
 14544  14CB  1D03               	skipz
 14545  14CC  2CC9               	goto	u2915
 14546  14CD  3520               	lslf	??_MTOUCH_Button_isPressed,w
 14547  14CE  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 14548  14CF  0086               	movwf	6
 14549  14D0  3001               	movlw	1	; select bank2/3
 14550  14D1  0087               	movwf	7
 14551  14D2  3002               	movlw	2
 14552  14D3  0601               	xorwf	1,w
 14553  14D4  1903               	btfsc	3,2
 14554  14D5  2CD7               	goto	u2921
 14555  14D6  2CD9               	goto	u2920
 14556  14D7                     u2921:	
 14557  14D7  3001               	movlw	1
 14558  14D8  2CDA               	goto	u2930
 14559  14D9                     u2920:	
 14560  14D9  3000               	movlw	0
 14561  14DA                     u2930:	
 14562  14DA  2CDC               	goto	l575
 14563  14DB                     l4263:	
 14564                           
 14565                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 14566  14DB  3000               	movlw	0
 14567  14DC                     l575:	
 14568  14DC  0008               	return
 14569  14DD                     __end_of_MTOUCH_Button_isPressed:	
 14570                           
 14571                           	psect	text80
 14572  1751                     __ptext80:	
 14573 ;; *************** function _MTOUCH_Button_Initialize *****************
 14574 ;; Defined at:
 14575 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14576 ;; Parameters:    Size  Location     Type
 14577 ;;  name            1    wreg     enum E3069
 14578 ;; Auto vars:     Size  Location     Type
 14579 ;;  name            1    8[BANK0 ] enum E3069
 14580 ;;  button          1    9[BANK0 ] PTR struct .
 14581 ;;		 -> mtouch_button(48), 
 14582 ;; Return value:  Size  Location     Type
 14583 ;;                  1    wreg      void 
 14584 ;; Registers used:
 14585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14586 ;; Tracked objects:
 14587 ;;		On entry : 0/0
 14588 ;;		On exit  : 0/0
 14589 ;;		Unchanged: 0/0
 14590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14591 ;;      Params:         0       0       0       0       0       0       0       0
 14592 ;;      Locals:         0       2       0       0       0       0       0       0
 14593 ;;      Temps:          0       2       0       0       0       0       0       0
 14594 ;;      Totals:         0       4       0       0       0       0       0       0
 14595 ;;Total ram usage:        4 bytes
 14596 ;; Hardware stack levels used:    1
 14597 ;; Hardware stack levels required when called:    7
 14598 ;; This function calls:
 14599 ;;		_MTOUCH_Sensor_Calibrate
 14600 ;; This function is called by:
 14601 ;;		_MTOUCH_Button_InitializeAll
 14602 ;;		_Button_Service
 14603 ;;		_Button_State_NotPressed
 14604 ;;		_Button_State_Pressed
 14605 ;; This function uses a non-reentrant model
 14606 ;;
 14607                           
 14608                           
 14609                           ;psect for function _MTOUCH_Button_Initialize
 14610  1751                     _MTOUCH_Button_Initialize:	
 14611                           
 14612                           ;incstack = 0
 14613                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 14614                           ;MTOUCH_Button_Initialize@name stored from wreg
 14615  1751  0020               	movlb	0	; select bank0
 14616  1752  00A8               	movwf	MTOUCH_Button_Initialize@name
 14617  1753                     l4757:	
 14618                           
 14619                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 14620  1753  0828               	movf	MTOUCH_Button_Initialize@name,w
 14621  1754  00A6               	movwf	??_MTOUCH_Button_Initialize
 14622  1755  3003               	movlw	3
 14623  1756                     u3675:	
 14624  1756  35A6               	lslf	??_MTOUCH_Button_Initialize,f
 14625  1757  3EFF               	addlw	-1
 14626  1758  1D03               	skipz
 14627  1759  2F56               	goto	u3675
 14628  175A  3526               	lslf	??_MTOUCH_Button_Initialize,w
 14629  175B  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 14630  175C  00A7               	movwf	??_MTOUCH_Button_Initialize+1
 14631  175D  0827               	movf	??_MTOUCH_Button_Initialize+1,w
 14632  175E  00A9               	movwf	MTOUCH_Button_Initialize@button
 14633  175F                     l4759:	
 14634                           
 14635                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 14636  175F  0829               	movf	MTOUCH_Button_Initialize@button,w
 14637  1760  3E02               	addlw	2
 14638  1761  0086               	movwf	6
 14639  1762  3001               	movlw	1	; select bank2/3
 14640  1763  0087               	movwf	7
 14641  1764  0181               	clrf	1
 14642  1765                     l4761:	
 14643                           
 14644                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 14645  1765  0829               	movf	MTOUCH_Button_Initialize@button,w
 14646  1766  3E05               	addlw	5
 14647  1767  0086               	movwf	6
 14648  1768  3001               	movlw	1	; select bank2/3
 14649  1769  0087               	movwf	7
 14650  176A  3000               	movlw	0
 14651  176B  3FC0               	movwi [0]fsr1
 14652  176C  3000               	movlw	0
 14653  176D  3FC1               	movwi [1]fsr1
 14654  176E  3FC2               	movwi [2]fsr1
 14655  176F  3FC3               	movwi [3]fsr1
 14656  1770                     l4763:	
 14657                           
 14658                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 14659  1770  0829               	movf	MTOUCH_Button_Initialize@button,w
 14660  1771  3E0A               	addlw	10
 14661  1772  0086               	movwf	6
 14662  1773  3001               	movlw	1	; select bank2/3
 14663  1774  0087               	movwf	7
 14664  1775  3000               	movlw	0
 14665  1776  3FC0               	movwi [0]fsr1
 14666  1777  3FC1               	movwi [1]fsr1
 14667  1778                     l4765:	
 14668                           
 14669                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 14670  1778  0829               	movf	MTOUCH_Button_Initialize@button,w
 14671  1779  3E0C               	addlw	12
 14672  177A  0086               	movwf	6
 14673  177B  3001               	movlw	1	; select bank2/3
 14674  177C  0087               	movwf	7
 14675  177D  3000               	movlw	0
 14676  177E  3FC0               	movwi [0]fsr1
 14677  177F  3FC1               	movwi [1]fsr1
 14678  1780                     l4767:	
 14679                           
 14680                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 14681  1780  0A29               	incf	MTOUCH_Button_Initialize@button,w
 14682  1781  0086               	movwf	6
 14683  1782  3001               	movlw	1	; select bank2/3
 14684  1783  0087               	movwf	7
 14685  1784  0801               	movf	1,w
 14686  1785  3192  22AA  3197   	fcall	_MTOUCH_Sensor_Calibrate
 14687  1788                     l496:	
 14688  1788  0008               	return
 14689  1789                     __end_of_MTOUCH_Button_Initialize:	
 14690                           
 14691                           	psect	text81
 14692  12AA                     __ptext81:	
 14693 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 14694 ;; Defined at:
 14695 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14696 ;; Parameters:    Size  Location     Type
 14697 ;;  sensor          1    wreg     enum E2878
 14698 ;; Auto vars:     Size  Location     Type
 14699 ;;  sensor          1    5[BANK0 ] enum E2878
 14700 ;; Return value:  Size  Location     Type
 14701 ;;                  1    wreg      void 
 14702 ;; Registers used:
 14703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14704 ;; Tracked objects:
 14705 ;;		On entry : 0/0
 14706 ;;		On exit  : 0/0
 14707 ;;		Unchanged: 0/0
 14708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14709 ;;      Params:         0       0       0       0       0       0       0       0
 14710 ;;      Locals:         0       1       0       0       0       0       0       0
 14711 ;;      Temps:          0       1       0       0       0       0       0       0
 14712 ;;      Totals:         0       2       0       0       0       0       0       0
 14713 ;;Total ram usage:        2 bytes
 14714 ;; Hardware stack levels used:    1
 14715 ;; Hardware stack levels required when called:    6
 14716 ;; This function calls:
 14717 ;;		___bmul
 14718 ;; This function is called by:
 14719 ;;		_MTOUCH_Sensor_Initialize
 14720 ;;		_MTOUCH_Button_Initialize
 14721 ;; This function uses a non-reentrant model
 14722 ;;
 14723                           
 14724                           
 14725                           ;psect for function _MTOUCH_Sensor_Calibrate
 14726  12AA                     _MTOUCH_Sensor_Calibrate:	
 14727                           
 14728                           ;incstack = 0
 14729                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14730                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 14731  12AA  0020               	movlb	0	; select bank0
 14732  12AB  00A5               	movwf	MTOUCH_Sensor_Calibrate@sensor
 14733  12AC                     l4433:	
 14734                           
 14735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 14736  12AC  3003               	movlw	3
 14737  12AD  0225               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 14738  12AE  1803               	skipnc
 14739  12AF  2AB1               	goto	u3161
 14740  12B0  2AB2               	goto	u3160
 14741  12B1                     u3161:	
 14742  12B1  2ABF               	goto	l388
 14743  12B2                     u3160:	
 14744  12B2                     l4435:	
 14745                           
 14746                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 14747  12B2  3009               	movlw	9
 14748  12B3  00A4               	movwf	??_MTOUCH_Sensor_Calibrate
 14749  12B4  0824               	movf	??_MTOUCH_Sensor_Calibrate,w
 14750  12B5  00A0               	movwf	___bmul@multiplicand
 14751  12B6  0825               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 14752  12B7  3192  2294  3192   	fcall	___bmul
 14753  12BA  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 14754  12BB  0086               	movwf	6
 14755  12BC  3001               	movlw	1	; select bank2/3
 14756  12BD  0087               	movwf	7
 14757  12BE  1101               	bcf	1,2
 14758  12BF                     l388:	
 14759  12BF  0008               	return
 14760  12C0                     __end_of_MTOUCH_Sensor_Calibrate:	
 14761                           
 14762                           	psect	text82
 14763  0CDE                     __ptext82:	
 14764 ;; *************** function _Button_Baseline_Update *****************
 14765 ;; Defined at:
 14766 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14767 ;; Parameters:    Size  Location     Type
 14768 ;;  button          1    wreg     PTR struct .
 14769 ;;		 -> mtouch_button(48), 
 14770 ;; Auto vars:     Size  Location     Type
 14771 ;;  button          1    6[BANK0 ] PTR struct .
 14772 ;;		 -> mtouch_button(48), 
 14773 ;; Return value:  Size  Location     Type
 14774 ;;                  1    wreg      void 
 14775 ;; Registers used:
 14776 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14777 ;; Tracked objects:
 14778 ;;		On entry : 0/0
 14779 ;;		On exit  : 0/0
 14780 ;;		Unchanged: 0/0
 14781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14782 ;;      Params:         0       0       0       0       0       0       0       0
 14783 ;;      Locals:         0       1       0       0       0       0       0       0
 14784 ;;      Temps:          0       6       0       0       0       0       0       0
 14785 ;;      Totals:         0       7       0       0       0       0       0       0
 14786 ;;Total ram usage:        7 bytes
 14787 ;; Hardware stack levels used:    1
 14788 ;; Hardware stack levels required when called:    5
 14789 ;; This function calls:
 14790 ;;		Nothing
 14791 ;; This function is called by:
 14792 ;;		_Button_State_Initializing
 14793 ;;		_Button_State_NotPressed
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           
 14798                           ;psect for function _Button_Baseline_Update
 14799  0CDE                     _Button_Baseline_Update:	
 14800                           
 14801                           ;incstack = 0
 14802                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 14803                           ;Button_Baseline_Update@button stored from wreg
 14804  0CDE  0020               	movlb	0	; select bank0
 14805  0CDF  00A6               	movwf	Button_Baseline_Update@button
 14806  0CE0                     l4773:	
 14807                           
 14808                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 14809  0CE0  1F8B               	btfss	11,7	;volatile
 14810  0CE1  2CE3               	goto	u3691
 14811  0CE2  2CE4               	goto	u3690
 14812  0CE3                     u3691:	
 14813  0CE3  2D2B               	goto	l4781
 14814  0CE4                     u3690:	
 14815  0CE4                     l4775:	
 14816                           
 14817                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 14818  0CE4  138B               	bcf	11,7	;volatile
 14819  0CE5                     l4777:	
 14820                           
 14821                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 14822  0CE5  0826               	movf	Button_Baseline_Update@button,w
 14823  0CE6  3E05               	addlw	5
 14824  0CE7  0086               	movwf	6
 14825  0CE8  3001               	movlw	1	; select bank2/3
 14826  0CE9  0087               	movwf	7
 14827  0CEA  3F40               	moviw [0]fsr1
 14828  0CEB  00A0               	movwf	??_Button_Baseline_Update
 14829  0CEC  3F41               	moviw [1]fsr1
 14830  0CED  00A1               	movwf	??_Button_Baseline_Update+1
 14831  0CEE  3F42               	moviw [2]fsr1
 14832  0CEF  00A2               	movwf	??_Button_Baseline_Update+2
 14833  0CF0  3F43               	moviw [3]fsr1
 14834  0CF1  00A3               	movwf	??_Button_Baseline_Update+3
 14835  0CF2  3004               	movlw	4
 14836  0CF3                     u3705:	
 14837  0CF3  36A3               	lsrf	??_Button_Baseline_Update+3,f
 14838  0CF4  0CA2               	rrf	??_Button_Baseline_Update+2,f
 14839  0CF5  0CA1               	rrf	??_Button_Baseline_Update+1,f
 14840  0CF6  0CA0               	rrf	??_Button_Baseline_Update,f
 14841  0CF7                     u3700:	
 14842  0CF7  0B89               	decfsz	9,f
 14843  0CF8  2CF3               	goto	u3705
 14844  0CF9  0826               	movf	Button_Baseline_Update@button,w
 14845  0CFA  3E05               	addlw	5
 14846  0CFB  0086               	movwf	6
 14847  0CFC  3001               	movlw	1	; select bank2/3
 14848  0CFD  0087               	movwf	7
 14849  0CFE  0820               	movf	??_Button_Baseline_Update,w
 14850  0CFF  0281               	subwf	1,f
 14851  0D00  3141               	addfsr 1,1
 14852  0D01  0821               	movf	??_Button_Baseline_Update+1,w
 14853  0D02  3B81               	subwfb	1,f
 14854  0D03  3141               	addfsr 1,1
 14855  0D04  0822               	movf	??_Button_Baseline_Update+2,w
 14856  0D05  3B81               	subwfb	1,f
 14857  0D06  3141               	addfsr 1,1
 14858  0D07  0823               	movf	??_Button_Baseline_Update+3,w
 14859  0D08  3B81               	subwfb	1,f
 14860  0D09  317D               	addfsr 1,-3
 14861                           
 14862                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 14863  0D0A  0826               	movf	Button_Baseline_Update@button,w
 14864  0D0B  3E03               	addlw	3
 14865  0D0C  0086               	movwf	6
 14866  0D0D  3001               	movlw	1	; select bank2/3
 14867  0D0E  0087               	movwf	7
 14868  0D0F  3F40               	moviw [0]fsr1
 14869  0D10  00A0               	movwf	??_Button_Baseline_Update
 14870  0D11  3F41               	moviw [1]fsr1
 14871  0D12  00A1               	movwf	??_Button_Baseline_Update+1
 14872  0D13  0820               	movf	??_Button_Baseline_Update,w
 14873  0D14  00A2               	movwf	??_Button_Baseline_Update+2
 14874  0D15  0821               	movf	??_Button_Baseline_Update+1,w
 14875  0D16  00A3               	movwf	??_Button_Baseline_Update+3
 14876  0D17  01A4               	clrf	??_Button_Baseline_Update+4
 14877  0D18  01A5               	clrf	??_Button_Baseline_Update+5
 14878  0D19  0826               	movf	Button_Baseline_Update@button,w
 14879  0D1A  3E05               	addlw	5
 14880  0D1B  0086               	movwf	6
 14881  0D1C  3001               	movlw	1	; select bank2/3
 14882  0D1D  0087               	movwf	7
 14883  0D1E  0822               	movf	??_Button_Baseline_Update+2,w
 14884  0D1F  0781               	addwf	1,f
 14885  0D20  3141               	addfsr 1,1
 14886  0D21  0823               	movf	??_Button_Baseline_Update+3,w
 14887  0D22  3D81               	addwfc	1,f
 14888  0D23  3141               	addfsr 1,1
 14889  0D24  0824               	movf	??_Button_Baseline_Update+4,w
 14890  0D25  3D81               	addwfc	1,f
 14891  0D26  3141               	addfsr 1,1
 14892  0D27  0825               	movf	??_Button_Baseline_Update+5,w
 14893  0D28  3D81               	addwfc	1,f
 14894  0D29                     l4779:	
 14895                           
 14896                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 14897  0D29  178B               	bsf	11,7	;volatile
 14898                           
 14899                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 14900  0D2A  2D6F               	goto	l620
 14901  0D2B                     l4781:	
 14902                           
 14903                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 14904  0D2B  0826               	movf	Button_Baseline_Update@button,w
 14905  0D2C  3E05               	addlw	5
 14906  0D2D  0086               	movwf	6
 14907  0D2E  3001               	movlw	1	; select bank2/3
 14908  0D2F  0087               	movwf	7
 14909  0D30  3F40               	moviw [0]fsr1
 14910  0D31  00A0               	movwf	??_Button_Baseline_Update
 14911  0D32  3F41               	moviw [1]fsr1
 14912  0D33  00A1               	movwf	??_Button_Baseline_Update+1
 14913  0D34  3F42               	moviw [2]fsr1
 14914  0D35  00A2               	movwf	??_Button_Baseline_Update+2
 14915  0D36  3F43               	moviw [3]fsr1
 14916  0D37  00A3               	movwf	??_Button_Baseline_Update+3
 14917  0D38  3004               	movlw	4
 14918  0D39                     u3715:	
 14919  0D39  36A3               	lsrf	??_Button_Baseline_Update+3,f
 14920  0D3A  0CA2               	rrf	??_Button_Baseline_Update+2,f
 14921  0D3B  0CA1               	rrf	??_Button_Baseline_Update+1,f
 14922  0D3C  0CA0               	rrf	??_Button_Baseline_Update,f
 14923  0D3D                     u3710:	
 14924  0D3D  0B89               	decfsz	9,f
 14925  0D3E  2D39               	goto	u3715
 14926  0D3F  0826               	movf	Button_Baseline_Update@button,w
 14927  0D40  3E05               	addlw	5
 14928  0D41  0086               	movwf	6
 14929  0D42  3001               	movlw	1	; select bank2/3
 14930  0D43  0087               	movwf	7
 14931  0D44  0820               	movf	??_Button_Baseline_Update,w
 14932  0D45  0281               	subwf	1,f
 14933  0D46  3141               	addfsr 1,1
 14934  0D47  0821               	movf	??_Button_Baseline_Update+1,w
 14935  0D48  3B81               	subwfb	1,f
 14936  0D49  3141               	addfsr 1,1
 14937  0D4A  0822               	movf	??_Button_Baseline_Update+2,w
 14938  0D4B  3B81               	subwfb	1,f
 14939  0D4C  3141               	addfsr 1,1
 14940  0D4D  0823               	movf	??_Button_Baseline_Update+3,w
 14941  0D4E  3B81               	subwfb	1,f
 14942  0D4F  317D               	addfsr 1,-3
 14943                           
 14944                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 14945  0D50  0826               	movf	Button_Baseline_Update@button,w
 14946  0D51  3E03               	addlw	3
 14947  0D52  0086               	movwf	6
 14948  0D53  3001               	movlw	1	; select bank2/3
 14949  0D54  0087               	movwf	7
 14950  0D55  3F40               	moviw [0]fsr1
 14951  0D56  00A0               	movwf	??_Button_Baseline_Update
 14952  0D57  3F41               	moviw [1]fsr1
 14953  0D58  00A1               	movwf	??_Button_Baseline_Update+1
 14954  0D59  0820               	movf	??_Button_Baseline_Update,w
 14955  0D5A  00A2               	movwf	??_Button_Baseline_Update+2
 14956  0D5B  0821               	movf	??_Button_Baseline_Update+1,w
 14957  0D5C  00A3               	movwf	??_Button_Baseline_Update+3
 14958  0D5D  01A4               	clrf	??_Button_Baseline_Update+4
 14959  0D5E  01A5               	clrf	??_Button_Baseline_Update+5
 14960  0D5F  0826               	movf	Button_Baseline_Update@button,w
 14961  0D60  3E05               	addlw	5
 14962  0D61  0086               	movwf	6
 14963  0D62  3001               	movlw	1	; select bank2/3
 14964  0D63  0087               	movwf	7
 14965  0D64  0822               	movf	??_Button_Baseline_Update+2,w
 14966  0D65  0781               	addwf	1,f
 14967  0D66  3141               	addfsr 1,1
 14968  0D67  0823               	movf	??_Button_Baseline_Update+3,w
 14969  0D68  3D81               	addwfc	1,f
 14970  0D69  3141               	addfsr 1,1
 14971  0D6A  0824               	movf	??_Button_Baseline_Update+4,w
 14972  0D6B  3D81               	addwfc	1,f
 14973  0D6C  3141               	addfsr 1,1
 14974  0D6D  0825               	movf	??_Button_Baseline_Update+5,w
 14975  0D6E  3D81               	addwfc	1,f
 14976  0D6F                     l620:	
 14977  0D6F  0008               	return
 14978  0D70                     __end_of_Button_Baseline_Update:	
 14979                           
 14980                           	psect	text83
 14981  16BD                     __ptext83:	
 14982 ;; *************** function _Button_Baseline_Initialize *****************
 14983 ;; Defined at:
 14984 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14985 ;; Parameters:    Size  Location     Type
 14986 ;;  button          1    wreg     PTR struct .
 14987 ;;		 -> mtouch_button(48), 
 14988 ;; Auto vars:     Size  Location     Type
 14989 ;;  button          1   12[BANK0 ] PTR struct .
 14990 ;;		 -> mtouch_button(48), 
 14991 ;; Return value:  Size  Location     Type
 14992 ;;                  1    wreg      void 
 14993 ;; Registers used:
 14994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15000 ;;      Params:         0       0       0       0       0       0       0       0
 15001 ;;      Locals:         0       1       0       0       0       0       0       0
 15002 ;;      Temps:          0       4       0       0       0       0       0       0
 15003 ;;      Totals:         0       5       0       0       0       0       0       0
 15004 ;;Total ram usage:        5 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; Hardware stack levels required when called:    7
 15007 ;; This function calls:
 15008 ;;		_MTOUCH_Sensor_RawSample_Get
 15009 ;; This function is called by:
 15010 ;;		_Button_State_Initializing
 15011 ;; This function uses a non-reentrant model
 15012 ;;
 15013                           
 15014                           
 15015                           ;psect for function _Button_Baseline_Initialize
 15016  16BD                     _Button_Baseline_Initialize:	
 15017                           
 15018                           ;incstack = 0
 15019                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15020                           ;Button_Baseline_Initialize@button stored from wreg
 15021  16BD  0020               	movlb	0	; select bank0
 15022  16BE  00AC               	movwf	Button_Baseline_Initialize@button
 15023  16BF                     l4769:	
 15024                           
 15025                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 15026  16BF  0A2C               	incf	Button_Baseline_Initialize@button,w
 15027  16C0  0086               	movwf	6
 15028  16C1  3001               	movlw	1	; select bank2/3
 15029  16C2  0087               	movwf	7
 15030  16C3  0801               	movf	1,w
 15031  16C4  3194  2428  3196   	fcall	_MTOUCH_Sensor_RawSample_Get
 15032  16C7  0020               	movlb	0	; select bank0
 15033  16C8  0824               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 15034  16C9  00A8               	movwf	??_Button_Baseline_Initialize
 15035  16CA  0825               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 15036  16CB  00A9               	movwf	??_Button_Baseline_Initialize+1
 15037  16CC  01AA               	clrf	??_Button_Baseline_Initialize+2
 15038  16CD  01AB               	clrf	??_Button_Baseline_Initialize+3
 15039  16CE  082C               	movf	Button_Baseline_Initialize@button,w
 15040  16CF  3E05               	addlw	5
 15041  16D0  0086               	movwf	6
 15042  16D1  3001               	movlw	1	; select bank2/3
 15043  16D2  0087               	movwf	7
 15044  16D3  0828               	movf	??_Button_Baseline_Initialize,w
 15045  16D4  3FC0               	movwi [0]fsr1
 15046  16D5  0829               	movf	??_Button_Baseline_Initialize+1,w
 15047  16D6  3FC1               	movwi [1]fsr1
 15048  16D7  082A               	movf	??_Button_Baseline_Initialize+2,w
 15049  16D8  3FC2               	movwi [2]fsr1
 15050  16D9  082B               	movf	??_Button_Baseline_Initialize+3,w
 15051  16DA  3FC3               	movwi [3]fsr1
 15052  16DB                     l4771:	
 15053                           
 15054                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 15055  16DB  082C               	movf	Button_Baseline_Initialize@button,w
 15056  16DC  3E05               	addlw	5
 15057  16DD  0086               	movwf	6
 15058  16DE  3001               	movlw	1	; select bank2/3
 15059  16DF  0087               	movwf	7
 15060  16E0  3004               	movlw	4
 15061  16E1                     u3685:	
 15062  16E1  3581               	lslf	1,f
 15063  16E2  3141               	addfsr 1,1
 15064  16E3  0D81               	rlf	1,f
 15065  16E4  3141               	addfsr 1,1
 15066  16E5  0D81               	rlf	1,f
 15067  16E6  3141               	addfsr 1,1
 15068  16E7  0D81               	rlf	1,f
 15069  16E8  317D               	addfsr 1,-3
 15070  16E9  0B89               	decfsz	9,f
 15071  16EA  2EE1               	goto	u3685
 15072  16EB                     l615:	
 15073  16EB  0008               	return
 15074  16EC                     __end_of_Button_Baseline_Initialize:	
 15075                           
 15076                           	psect	text84
 15077  1236                     __ptext84:	
 15078 ;; *************** function _Button_Reading_Update *****************
 15079 ;; Defined at:
 15080 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;  button          1    wreg     PTR struct .
 15083 ;;		 -> mtouch_button(48), 
 15084 ;; Auto vars:     Size  Location     Type
 15085 ;;  button          1   11[BANK0 ] PTR struct .
 15086 ;;		 -> mtouch_button(48), 
 15087 ;; Return value:  Size  Location     Type
 15088 ;;                  1    wreg      void 
 15089 ;; Registers used:
 15090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15091 ;; Tracked objects:
 15092 ;;		On entry : 0/0
 15093 ;;		On exit  : 0/0
 15094 ;;		Unchanged: 0/0
 15095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15096 ;;      Params:         0       0       0       0       0       0       0       0
 15097 ;;      Locals:         0       1       0       0       0       0       0       0
 15098 ;;      Temps:          0       0       0       0       0       0       0       0
 15099 ;;      Totals:         0       1       0       0       0       0       0       0
 15100 ;;Total ram usage:        1 bytes
 15101 ;; Hardware stack levels used:    1
 15102 ;; Hardware stack levels required when called:    8
 15103 ;; This function calls:
 15104 ;;		_Button_Reading_Update_Helper
 15105 ;; This function is called by:
 15106 ;;		_Button_Service
 15107 ;; This function uses a non-reentrant model
 15108 ;;
 15109                           
 15110                           
 15111                           ;psect for function _Button_Reading_Update
 15112  1236                     _Button_Reading_Update:	
 15113                           
 15114                           ;incstack = 0
 15115                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15116                           ;Button_Reading_Update@button stored from wreg
 15117  1236  0020               	movlb	0	; select bank0
 15118  1237  00AB               	movwf	Button_Reading_Update@button
 15119  1238                     l6795:	
 15120                           
 15121                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 15122  1238  1F8B               	btfss	11,7	;volatile
 15123  1239  2A3B               	goto	u6491
 15124  123A  2A3C               	goto	u6490
 15125  123B                     u6491:	
 15126  123B  2A43               	goto	l6803
 15127  123C                     u6490:	
 15128  123C                     l6797:	
 15129                           
 15130                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 15131  123C  138B               	bcf	11,7	;volatile
 15132  123D                     l6799:	
 15133                           
 15134                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 15135  123D  082B               	movf	Button_Reading_Update@button,w
 15136  123E  3189  2184  3192   	fcall	_Button_Reading_Update_Helper
 15137  1241                     l6801:	
 15138                           
 15139                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 15140  1241  178B               	bsf	11,7	;volatile
 15141                           
 15142                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 15143  1242  2A47               	goto	l607
 15144  1243                     l6803:	
 15145                           
 15146                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 15147  1243  082B               	movf	Button_Reading_Update@button,w
 15148  1244  3189  2184  3192   	fcall	_Button_Reading_Update_Helper
 15149  1247                     l607:	
 15150  1247  0008               	return
 15151  1248                     __end_of_Button_Reading_Update:	
 15152                           
 15153                           	psect	text85
 15154  0984                     __ptext85:	
 15155 ;; *************** function _Button_Reading_Update_Helper *****************
 15156 ;; Defined at:
 15157 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;  button          1    wreg     PTR struct .
 15160 ;;		 -> mtouch_button(48), 
 15161 ;; Auto vars:     Size  Location     Type
 15162 ;;  button          1   10[BANK0 ] PTR struct .
 15163 ;;		 -> mtouch_button(48), 
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      void 
 15166 ;; Registers used:
 15167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15173 ;;      Params:         0       0       0       0       0       0       0       0
 15174 ;;      Locals:         0       1       0       0       0       0       0       0
 15175 ;;      Temps:          0       2       0       0       0       0       0       0
 15176 ;;      Totals:         0       3       0       0       0       0       0       0
 15177 ;;Total ram usage:        3 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:    7
 15180 ;; This function calls:
 15181 ;;		_MTOUCH_Sensor_RawSample_Get
 15182 ;; This function is called by:
 15183 ;;		_Button_Reading_Update
 15184 ;; This function uses a non-reentrant model
 15185 ;;
 15186                           
 15187                           
 15188                           ;psect for function _Button_Reading_Update_Helper
 15189  0984                     _Button_Reading_Update_Helper:	
 15190                           
 15191                           ;incstack = 0
 15192                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 15193                           ;Button_Reading_Update_Helper@button stored from wreg
 15194  0984  0020               	movlb	0	; select bank0
 15195  0985  00AA               	movwf	Button_Reading_Update_Helper@button
 15196  0986                     l4783:	
 15197                           
 15198                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 15199  0986  082A               	movf	Button_Reading_Update_Helper@button,w
 15200  0987  3E02               	addlw	2
 15201  0988  0086               	movwf	6
 15202  0989  3001               	movlw	1	; select bank2/3
 15203  098A  0087               	movwf	7
 15204  098B  0801               	movf	1,w
 15205  098C  1903               	btfsc	3,2
 15206  098D  298F               	goto	u3721
 15207  098E  2990               	goto	u3720
 15208  098F                     u3721:	
 15209  098F  29C5               	goto	l4789
 15210  0990                     u3720:	
 15211  0990                     l4785:	
 15212                           
 15213                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 15214  0990  082A               	movf	Button_Reading_Update_Helper@button,w
 15215  0991  3E03               	addlw	3
 15216  0992  0086               	movwf	6
 15217  0993  3001               	movlw	1	; select bank2/3
 15218  0994  0087               	movwf	7
 15219  0995  3F40               	moviw [0]fsr1
 15220  0996  00A8               	movwf	??_Button_Reading_Update_Helper
 15221  0997  3F41               	moviw [1]fsr1
 15222  0998  00A9               	movwf	??_Button_Reading_Update_Helper+1
 15223  0999  36A9               	lsrf	??_Button_Reading_Update_Helper+1,f
 15224  099A  0CA8               	rrf	??_Button_Reading_Update_Helper,f
 15225  099B  36A9               	lsrf	??_Button_Reading_Update_Helper+1,f
 15226  099C  0CA8               	rrf	??_Button_Reading_Update_Helper,f
 15227  099D  082A               	movf	Button_Reading_Update_Helper@button,w
 15228  099E  3E03               	addlw	3
 15229  099F  0086               	movwf	6
 15230  09A0  3001               	movlw	1	; select bank2/3
 15231  09A1  0087               	movwf	7
 15232  09A2  0828               	movf	??_Button_Reading_Update_Helper,w
 15233  09A3  0281               	subwf	1,f
 15234  09A4  3141               	addfsr 1,1
 15235  09A5  0829               	movf	??_Button_Reading_Update_Helper+1,w
 15236  09A6  3B81               	subwfb	1,f
 15237  09A7  317F               	addfsr 1,-1
 15238  09A8                     l4787:	
 15239                           
 15240                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 15241  09A8  0A2A               	incf	Button_Reading_Update_Helper@button,w
 15242  09A9  0086               	movwf	6
 15243  09AA  3001               	movlw	1	; select bank2/3
 15244  09AB  0087               	movwf	7
 15245  09AC  0801               	movf	1,w
 15246  09AD  3194  2428  3189   	fcall	_MTOUCH_Sensor_RawSample_Get
 15247  09B0  0020               	movlb	0	; select bank0
 15248  09B1  0824               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 15249  09B2  00A8               	movwf	??_Button_Reading_Update_Helper
 15250  09B3  0825               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 15251  09B4  00A9               	movwf	??_Button_Reading_Update_Helper+1
 15252  09B5  36A9               	lsrf	??_Button_Reading_Update_Helper+1,f
 15253  09B6  0CA8               	rrf	??_Button_Reading_Update_Helper,f
 15254  09B7  36A9               	lsrf	??_Button_Reading_Update_Helper+1,f
 15255  09B8  0CA8               	rrf	??_Button_Reading_Update_Helper,f
 15256  09B9  082A               	movf	Button_Reading_Update_Helper@button,w
 15257  09BA  3E03               	addlw	3
 15258  09BB  0086               	movwf	6
 15259  09BC  3001               	movlw	1	; select bank2/3
 15260  09BD  0087               	movwf	7
 15261  09BE  0828               	movf	??_Button_Reading_Update_Helper,w
 15262  09BF  0781               	addwf	1,f
 15263  09C0  3141               	addfsr 1,1
 15264  09C1  0829               	movf	??_Button_Reading_Update_Helper+1,w
 15265  09C2  3D81               	addwfc	1,f
 15266  09C3  317F               	addfsr 1,-1
 15267                           
 15268                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 15269  09C4  29D7               	goto	l612
 15270  09C5                     l4789:	
 15271                           
 15272                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 15273  09C5  0A2A               	incf	Button_Reading_Update_Helper@button,w
 15274  09C6  0086               	movwf	6
 15275  09C7  3001               	movlw	1	; select bank2/3
 15276  09C8  0087               	movwf	7
 15277  09C9  0801               	movf	1,w
 15278  09CA  3194  2428  3189   	fcall	_MTOUCH_Sensor_RawSample_Get
 15279  09CD  0020               	movlb	0	; select bank0
 15280  09CE  082A               	movf	Button_Reading_Update_Helper@button,w
 15281  09CF  3E03               	addlw	3
 15282  09D0  0086               	movwf	6
 15283  09D1  3001               	movlw	1	; select bank2/3
 15284  09D2  0087               	movwf	7
 15285  09D3  0824               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 15286  09D4  3FC0               	movwi [0]fsr1
 15287  09D5  0825               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 15288  09D6  3FC1               	movwi [1]fsr1
 15289  09D7                     l612:	
 15290  09D7  0008               	return
 15291  09D8                     __end_of_Button_Reading_Update_Helper:	
 15292                           
 15293                           	psect	text86
 15294  1428                     __ptext86:	
 15295 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 15296 ;; Defined at:
 15297 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 15298 ;; Parameters:    Size  Location     Type
 15299 ;;  name            1    wreg     enum E2878
 15300 ;; Auto vars:     Size  Location     Type
 15301 ;;  name            1    7[BANK0 ] enum E2878
 15302 ;; Return value:  Size  Location     Type
 15303 ;;                  2    4[BANK0 ] unsigned short 
 15304 ;; Registers used:
 15305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15306 ;; Tracked objects:
 15307 ;;		On entry : 0/0
 15308 ;;		On exit  : 0/0
 15309 ;;		Unchanged: 0/0
 15310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15311 ;;      Params:         0       2       0       0       0       0       0       0
 15312 ;;      Locals:         0       1       0       0       0       0       0       0
 15313 ;;      Temps:          0       1       0       0       0       0       0       0
 15314 ;;      Totals:         0       4       0       0       0       0       0       0
 15315 ;;Total ram usage:        4 bytes
 15316 ;; Hardware stack levels used:    1
 15317 ;; Hardware stack levels required when called:    6
 15318 ;; This function calls:
 15319 ;;		___bmul
 15320 ;; This function is called by:
 15321 ;;		_Button_Reading_Update_Helper
 15322 ;;		_Button_Baseline_Initialize
 15323 ;; This function uses a non-reentrant model
 15324 ;;
 15325                           
 15326                           
 15327                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 15328  1428                     _MTOUCH_Sensor_RawSample_Get:	
 15329                           
 15330                           ;incstack = 0
 15331                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15332                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 15333  1428  0020               	movlb	0	; select bank0
 15334  1429  00A7               	movwf	MTOUCH_Sensor_RawSample_Get@name
 15335  142A                     l4643:	
 15336                           
 15337                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 15338  142A  3003               	movlw	3
 15339  142B  0227               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 15340  142C  1803               	skipnc
 15341  142D  2C2F               	goto	u3521
 15342  142E  2C30               	goto	u3520
 15343  142F                     u3521:	
 15344  142F  2C42               	goto	l4651
 15345  1430                     u3520:	
 15346  1430                     l4645:	
 15347                           
 15348                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 15349  1430  3009               	movlw	9
 15350  1431  00A6               	movwf	??_MTOUCH_Sensor_RawSample_Get
 15351  1432  0826               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 15352  1433  00A0               	movwf	___bmul@multiplicand
 15353  1434  0827               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 15354  1435  3192  2294  3194   	fcall	___bmul
 15355  1438  3E56               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 15356  1439  0086               	movwf	6
 15357  143A  3001               	movlw	1	; select bank2/3
 15358  143B  0087               	movwf	7
 15359  143C  3F40               	moviw [0]fsr1
 15360  143D  0020               	movlb	0	; select bank0
 15361  143E  00A4               	movwf	?_MTOUCH_Sensor_RawSample_Get
 15362  143F  3F41               	moviw [1]fsr1
 15363  1440  00A5               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 15364  1441  2C44               	goto	l340
 15365  1442                     l4651:	
 15366                           
 15367                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 15368  1442  01A4               	clrf	?_MTOUCH_Sensor_RawSample_Get
 15369  1443  01A5               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 15370  1444                     l340:	
 15371  1444  0008               	return
 15372  1445                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 15373                           
 15374                           	psect	text87
 15375  1294                     __ptext87:	
 15376 ;; *************** function ___bmul *****************
 15377 ;; Defined at:
 15378 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 15379 ;; Parameters:    Size  Location     Type
 15380 ;;  multiplier      1    wreg     unsigned char 
 15381 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15382 ;; Auto vars:     Size  Location     Type
 15383 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15384 ;;  product         1    2[BANK0 ] unsigned char 
 15385 ;; Return value:  Size  Location     Type
 15386 ;;                  1    wreg      unsigned char 
 15387 ;; Registers used:
 15388 ;;		wreg, status,2, status,0
 15389 ;; Tracked objects:
 15390 ;;		On entry : 0/0
 15391 ;;		On exit  : 0/0
 15392 ;;		Unchanged: 0/0
 15393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15394 ;;      Params:         0       1       0       0       0       0       0       0
 15395 ;;      Locals:         0       2       0       0       0       0       0       0
 15396 ;;      Temps:          0       1       0       0       0       0       0       0
 15397 ;;      Totals:         0       4       0       0       0       0       0       0
 15398 ;;Total ram usage:        4 bytes
 15399 ;; Hardware stack levels used:    1
 15400 ;; Hardware stack levels required when called:    5
 15401 ;; This function calls:
 15402 ;;		Nothing
 15403 ;; This function is called by:
 15404 ;;		_MTOUCH_Sensor_Initialize
 15405 ;;		_MTOUCH_Sensor_RawSample_Get
 15406 ;;		_MTOUCH_Sensor_Enable
 15407 ;;		_MTOUCH_Sensor_Calibrate
 15408 ;;		_MTOUCH_Sensor_isCalibrated
 15409 ;;		_MTOUCH_Sensor_wasSampled
 15410 ;;		_MTOUCH_Sensor_isAnySensorActive
 15411 ;;		_MTOUCH_Sensor_Disable
 15412 ;;		_MTOUCH_Sensor_isEnabled
 15413 ;;		_MTOUCH_Sensor_isActive
 15414 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 15415 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 15416 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 15417 ;;		_MTOUCH_Sensor_Oversampling_Get
 15418 ;;		_MTOUCH_Sensor_Oversampling_Set
 15419 ;; This function uses a non-reentrant model
 15420 ;;
 15421                           
 15422                           
 15423                           ;psect for function ___bmul
 15424  1294                     ___bmul:	
 15425                           
 15426                           ;incstack = 0
 15427                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15428                           ;___bmul@multiplier stored from wreg
 15429  1294  0020               	movlb	0	; select bank0
 15430  1295  00A3               	movwf	___bmul@multiplier
 15431  1296                     l4419:	
 15432  1296  01A2               	clrf	___bmul@product
 15433  1297                     l4421:	
 15434  1297  1C23               	btfss	___bmul@multiplier,0
 15435  1298  2A9A               	goto	u3141
 15436  1299  2A9B               	goto	u3140
 15437  129A                     u3141:	
 15438  129A  2A9F               	goto	l4425
 15439  129B                     u3140:	
 15440  129B                     l4423:	
 15441  129B  0820               	movf	___bmul@multiplicand,w
 15442  129C  00A1               	movwf	??___bmul
 15443  129D  0821               	movf	??___bmul,w
 15444  129E  07A2               	addwf	___bmul@product,f
 15445  129F                     l4425:	
 15446  129F  1003               	clrc
 15447  12A0  0DA0               	rlf	___bmul@multiplicand,f
 15448  12A1                     l4427:	
 15449  12A1  1003               	clrc
 15450  12A2  0CA3               	rrf	___bmul@multiplier,f
 15451  12A3  0823               	movf	___bmul@multiplier,w
 15452  12A4  1D03               	btfss	3,2
 15453  12A5  2AA7               	goto	u3151
 15454  12A6  2AA8               	goto	u3150
 15455  12A7                     u3151:	
 15456  12A7  2A97               	goto	l4421
 15457  12A8                     u3150:	
 15458  12A8                     l4429:	
 15459  12A8  0822               	movf	___bmul@product,w
 15460  12A9                     l1550:	
 15461  12A9  0008               	return
 15462  12AA                     __end_of___bmul:	
 15463                           
 15464                           	psect	text88
 15465  0C53                     __ptext88:	
 15466 ;; *************** function _Button_Deviation_Update *****************
 15467 ;; Defined at:
 15468 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 15469 ;; Parameters:    Size  Location     Type
 15470 ;;  button          1    wreg     PTR struct .
 15471 ;;		 -> mtouch_button(48), 
 15472 ;; Auto vars:     Size  Location     Type
 15473 ;;  button          1   10[BANK0 ] PTR struct .
 15474 ;;		 -> mtouch_button(48), 
 15475 ;;  deviation       4   11[BANK0 ] long 
 15476 ;; Return value:  Size  Location     Type
 15477 ;;                  1    wreg      void 
 15478 ;; Registers used:
 15479 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15480 ;; Tracked objects:
 15481 ;;		On entry : 0/0
 15482 ;;		On exit  : 0/0
 15483 ;;		Unchanged: 0/0
 15484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15485 ;;      Params:         0       0       0       0       0       0       0       0
 15486 ;;      Locals:         0       5       0       0       0       0       0       0
 15487 ;;      Temps:          0      10       0       0       0       0       0       0
 15488 ;;      Totals:         0      15       0       0       0       0       0       0
 15489 ;;Total ram usage:       15 bytes
 15490 ;; Hardware stack levels used:    1
 15491 ;; Hardware stack levels required when called:    5
 15492 ;; This function calls:
 15493 ;;		Nothing
 15494 ;; This function is called by:
 15495 ;;		_Button_Service
 15496 ;; This function uses a non-reentrant model
 15497 ;;
 15498                           
 15499                           
 15500                           ;psect for function _Button_Deviation_Update
 15501  0C53                     _Button_Deviation_Update:	
 15502                           
 15503                           ;incstack = 0
 15504                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 15505                           ;Button_Deviation_Update@button stored from wreg
 15506  0C53  0020               	movlb	0	; select bank0
 15507  0C54  00AA               	movwf	Button_Deviation_Update@button
 15508  0C55                     l4901:	
 15509                           
 15510                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 15511  0C55  082A               	movf	Button_Deviation_Update@button,w
 15512  0C56  3E05               	addlw	5
 15513  0C57  0086               	movwf	6
 15514  0C58  3001               	movlw	1	; select bank2/3
 15515  0C59  0087               	movwf	7
 15516  0C5A  3F40               	moviw [0]fsr1
 15517  0C5B  00A0               	movwf	??_Button_Deviation_Update
 15518  0C5C  3F41               	moviw [1]fsr1
 15519  0C5D  00A1               	movwf	??_Button_Deviation_Update+1
 15520  0C5E  3F42               	moviw [2]fsr1
 15521  0C5F  00A2               	movwf	??_Button_Deviation_Update+2
 15522  0C60  3F43               	moviw [3]fsr1
 15523  0C61  00A3               	movwf	??_Button_Deviation_Update+3
 15524  0C62  3004               	movlw	4
 15525  0C63                     u3895:	
 15526  0C63  36A3               	lsrf	??_Button_Deviation_Update+3,f
 15527  0C64  0CA2               	rrf	??_Button_Deviation_Update+2,f
 15528  0C65  0CA1               	rrf	??_Button_Deviation_Update+1,f
 15529  0C66  0CA0               	rrf	??_Button_Deviation_Update,f
 15530  0C67                     u3890:	
 15531  0C67  0B89               	decfsz	9,f
 15532  0C68  2C63               	goto	u3895
 15533  0C69  082A               	movf	Button_Deviation_Update@button,w
 15534  0C6A  3E03               	addlw	3
 15535  0C6B  0086               	movwf	6
 15536  0C6C  3001               	movlw	1	; select bank2/3
 15537  0C6D  0087               	movwf	7
 15538  0C6E  3F40               	moviw [0]fsr1
 15539  0C6F  00A4               	movwf	??_Button_Deviation_Update+4
 15540  0C70  3F41               	moviw [1]fsr1
 15541  0C71  00A5               	movwf	??_Button_Deviation_Update+5
 15542  0C72  0824               	movf	??_Button_Deviation_Update+4,w
 15543  0C73  00A6               	movwf	??_Button_Deviation_Update+6
 15544  0C74  0825               	movf	??_Button_Deviation_Update+5,w
 15545  0C75  00A7               	movwf	??_Button_Deviation_Update+7
 15546  0C76  01A8               	clrf	??_Button_Deviation_Update+8
 15547  0C77  01A9               	clrf	??_Button_Deviation_Update+9
 15548  0C78  0820               	movf	??_Button_Deviation_Update,w
 15549  0C79  02A6               	subwf	??_Button_Deviation_Update+6,f
 15550  0C7A  0821               	movf	??_Button_Deviation_Update+1,w
 15551  0C7B  3BA7               	subwfb	??_Button_Deviation_Update+7,f
 15552  0C7C  0822               	movf	??_Button_Deviation_Update+2,w
 15553  0C7D  3BA8               	subwfb	??_Button_Deviation_Update+8,f
 15554  0C7E  0823               	movf	??_Button_Deviation_Update+3,w
 15555  0C7F  3BA9               	subwfb	??_Button_Deviation_Update+9,f
 15556  0C80  0829               	movf	??_Button_Deviation_Update+9,w
 15557  0C81  00AE               	movwf	Button_Deviation_Update@deviation+3
 15558  0C82  0828               	movf	??_Button_Deviation_Update+8,w
 15559  0C83  00AD               	movwf	Button_Deviation_Update@deviation+2
 15560  0C84  0827               	movf	??_Button_Deviation_Update+7,w
 15561  0C85  00AC               	movwf	Button_Deviation_Update@deviation+1
 15562  0C86  0826               	movf	??_Button_Deviation_Update+6,w
 15563  0C87  00AB               	movwf	Button_Deviation_Update@deviation
 15564                           
 15565                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 15566  0C88  082B               	movf	Button_Deviation_Update@deviation,w
 15567  0C89  00A0               	movwf	??_Button_Deviation_Update
 15568  0C8A  082C               	movf	Button_Deviation_Update@deviation+1,w
 15569  0C8B  00A1               	movwf	??_Button_Deviation_Update+1
 15570  0C8C  082D               	movf	Button_Deviation_Update@deviation+2,w
 15571  0C8D  00A2               	movwf	??_Button_Deviation_Update+2
 15572  0C8E  082E               	movf	Button_Deviation_Update@deviation+3,w
 15573  0C8F  00A3               	movwf	??_Button_Deviation_Update+3
 15574  0C90  082A               	movf	Button_Deviation_Update@button,w
 15575  0C91  3E0F               	addlw	15
 15576  0C92  0086               	movwf	6
 15577  0C93  3001               	movlw	1	; select bank2/3
 15578  0C94  0087               	movwf	7
 15579  0C95  0A01               	incf	1,w
 15580  0C96  2C9B               	goto	u3900
 15581  0C97                     u3905:	
 15582  0C97  37A3               	asrf	??_Button_Deviation_Update+3,f
 15583  0C98  0CA2               	rrf	??_Button_Deviation_Update+2,f
 15584  0C99  0CA1               	rrf	??_Button_Deviation_Update+1,f
 15585  0C9A  0CA0               	rrf	??_Button_Deviation_Update,f
 15586  0C9B                     u3900:	
 15587  0C9B  0B89               	decfsz	9,f
 15588  0C9C  2C97               	goto	u3905
 15589  0C9D  0823               	movf	??_Button_Deviation_Update+3,w
 15590  0C9E  00AE               	movwf	Button_Deviation_Update@deviation+3
 15591  0C9F  0822               	movf	??_Button_Deviation_Update+2,w
 15592  0CA0  00AD               	movwf	Button_Deviation_Update@deviation+2
 15593  0CA1  0821               	movf	??_Button_Deviation_Update+1,w
 15594  0CA2  00AC               	movwf	Button_Deviation_Update@deviation+1
 15595  0CA3  0820               	movf	??_Button_Deviation_Update,w
 15596  0CA4  00AB               	movwf	Button_Deviation_Update@deviation
 15597  0CA5                     l4903:	
 15598                           
 15599                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 15600  0CA5  1BAE               	btfsc	Button_Deviation_Update@deviation+3,7
 15601  0CA6  2CB5               	goto	u3911
 15602  0CA7  082E               	movf	Button_Deviation_Update@deviation+3,w
 15603  0CA8  1D03               	btfss	3,2
 15604  0CA9  2CB6               	goto	u3910
 15605  0CAA  082D               	movf	Button_Deviation_Update@deviation+2,w
 15606  0CAB  1D03               	btfss	3,2
 15607  0CAC  2CB6               	goto	u3910
 15608  0CAD  082C               	movf	Button_Deviation_Update@deviation+1,w
 15609  0CAE  1D03               	btfss	3,2
 15610  0CAF  2CB6               	goto	u3910
 15611  0CB0  3080               	movlw	128
 15612  0CB1  022B               	subwf	Button_Deviation_Update@deviation,w
 15613  0CB2  1C03               	btfss	3,0
 15614  0CB3  2CB5               	goto	u3911
 15615  0CB4  2CB6               	goto	u3910
 15616  0CB5                     u3911:	
 15617  0CB5  2CBE               	goto	l4907
 15618  0CB6                     u3910:	
 15619  0CB6                     l4905:	
 15620                           
 15621                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 15622  0CB6  3000               	movlw	0
 15623  0CB7  00AE               	movwf	Button_Deviation_Update@deviation+3
 15624  0CB8  3000               	movlw	0
 15625  0CB9  00AD               	movwf	Button_Deviation_Update@deviation+2
 15626  0CBA  3000               	movlw	0
 15627  0CBB  00AC               	movwf	Button_Deviation_Update@deviation+1
 15628  0CBC  307F               	movlw	127
 15629  0CBD  00AB               	movwf	Button_Deviation_Update@deviation
 15630  0CBE                     l4907:	
 15631                           
 15632                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 15633  0CBE  1FAE               	btfss	Button_Deviation_Update@deviation+3,7
 15634  0CBF  2CCB               	goto	u3921
 15635  0CC0  3080               	movlw	128
 15636  0CC1  022B               	subwf	Button_Deviation_Update@deviation,w
 15637  0CC2  30FF               	movlw	255
 15638  0CC3  3B2C               	subwfb	Button_Deviation_Update@deviation+1,w
 15639  0CC4  30FF               	movlw	255
 15640  0CC5  3B2D               	subwfb	Button_Deviation_Update@deviation+2,w
 15641  0CC6  30FF               	movlw	255
 15642  0CC7  3B2E               	subwfb	Button_Deviation_Update@deviation+3,w
 15643  0CC8  1803               	btfsc	3,0
 15644  0CC9  2CCB               	goto	u3921
 15645  0CCA  2CCC               	goto	u3920
 15646  0CCB                     u3921:	
 15647  0CCB  2CD4               	goto	l4911
 15648  0CCC                     u3920:	
 15649  0CCC                     l4909:	
 15650                           
 15651                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 15652  0CCC  30FF               	movlw	255
 15653  0CCD  00AE               	movwf	Button_Deviation_Update@deviation+3
 15654  0CCE  30FF               	movlw	255
 15655  0CCF  00AD               	movwf	Button_Deviation_Update@deviation+2
 15656  0CD0  30FF               	movlw	255
 15657  0CD1  00AC               	movwf	Button_Deviation_Update@deviation+1
 15658  0CD2  3080               	movlw	128
 15659  0CD3  00AB               	movwf	Button_Deviation_Update@deviation
 15660  0CD4                     l4911:	
 15661                           
 15662                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 15663  0CD4  082B               	movf	Button_Deviation_Update@deviation,w
 15664  0CD5  00A0               	movwf	??_Button_Deviation_Update
 15665  0CD6  082A               	movf	Button_Deviation_Update@button,w
 15666  0CD7  3E09               	addlw	9
 15667  0CD8  0086               	movwf	6
 15668  0CD9  3001               	movlw	1	; select bank2/3
 15669  0CDA  0087               	movwf	7
 15670  0CDB  0820               	movf	??_Button_Deviation_Update,w
 15671  0CDC  0081               	movwf	1
 15672  0CDD                     l591:	
 15673  0CDD  0008               	return
 15674  0CDE                     __end_of_Button_Deviation_Update:	
 15675                           
 15676                           	psect	text89
 15677  1127                     __ptext89:	
 15678 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 15679 ;; Defined at:
 15680 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 15681 ;; Parameters:    Size  Location     Type
 15682 ;;  callback        2    0[BANK0 ] PTR FTN(enum E3069,)void
 15683 ;;		 -> myButtonPressedCallback(1), 
 15684 ;; Auto vars:     Size  Location     Type
 15685 ;;		None
 15686 ;; Return value:  Size  Location     Type
 15687 ;;                  1    wreg      void 
 15688 ;; Registers used:
 15689 ;;		wreg
 15690 ;; Tracked objects:
 15691 ;;		On entry : 0/0
 15692 ;;		On exit  : 0/0
 15693 ;;		Unchanged: 0/0
 15694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15695 ;;      Params:         0       2       0       0       0       0       0       0
 15696 ;;      Locals:         0       0       0       0       0       0       0       0
 15697 ;;      Temps:          0       0       0       0       0       0       0       0
 15698 ;;      Totals:         0       2       0       0       0       0       0       0
 15699 ;;Total ram usage:        2 bytes
 15700 ;; Hardware stack levels used:    1
 15701 ;; Hardware stack levels required when called:    5
 15702 ;; This function calls:
 15703 ;;		Nothing
 15704 ;; This function is called by:
 15705 ;;		_main
 15706 ;; This function uses a non-reentrant model
 15707 ;;
 15708                           
 15709                           
 15710                           ;psect for function _MTOUCH_Button_SetPressedCallback
 15711  1127                     _MTOUCH_Button_SetPressedCallback:	
 15712  1127                     l7113:	
 15713                           ;incstack = 0
 15714                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 15715                           
 15716                           
 15717                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 15718  1127  0020               	movlb	0	; select bank0
 15719  1128  0821               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 15720  1129  0021               	movlb	1	; select bank1
 15721  112A  00ED               	movwf	(_callback_pressed+1)^(0+128)
 15722  112B  0020               	movlb	0	; select bank0
 15723  112C  0820               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 15724  112D  0021               	movlb	1	; select bank1
 15725  112E  00EC               	movwf	_callback_pressed^(0+128)
 15726  112F                     l639:	
 15727  112F  0008               	return
 15728  1130                     __end_of_MTOUCH_Button_SetPressedCallback:	
 15729                           
 15730                           	psect	text90
 15731  111E                     __ptext90:	
 15732 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 15733 ;; Defined at:
 15734 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 15735 ;; Parameters:    Size  Location     Type
 15736 ;;  callback        2    0[BANK0 ] PTR FTN(enum E3069,)void
 15737 ;;		 -> myButtonReleasedCallback(1), 
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;		None
 15740 ;; Return value:  Size  Location     Type
 15741 ;;                  1    wreg      void 
 15742 ;; Registers used:
 15743 ;;		wreg
 15744 ;; Tracked objects:
 15745 ;;		On entry : 0/0
 15746 ;;		On exit  : 0/0
 15747 ;;		Unchanged: 0/0
 15748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15749 ;;      Params:         0       2       0       0       0       0       0       0
 15750 ;;      Locals:         0       0       0       0       0       0       0       0
 15751 ;;      Temps:          0       0       0       0       0       0       0       0
 15752 ;;      Totals:         0       2       0       0       0       0       0       0
 15753 ;;Total ram usage:        2 bytes
 15754 ;; Hardware stack levels used:    1
 15755 ;; Hardware stack levels required when called:    5
 15756 ;; This function calls:
 15757 ;;		Nothing
 15758 ;; This function is called by:
 15759 ;;		_main
 15760 ;; This function uses a non-reentrant model
 15761 ;;
 15762                           
 15763                           
 15764                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 15765  111E                     _MTOUCH_Button_SetNotPressedCallback:	
 15766  111E                     l7115:	
 15767                           ;incstack = 0
 15768                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 15769                           
 15770                           
 15771                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 15772  111E  0020               	movlb	0	; select bank0
 15773  111F  0821               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 15774  1120  0021               	movlb	1	; select bank1
 15775  1121  00EB               	movwf	(_callback_notPressed+1)^(0+128)
 15776  1122  0020               	movlb	0	; select bank0
 15777  1123  0820               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 15778  1124  0021               	movlb	1	; select bank1
 15779  1125  00EA               	movwf	_callback_notPressed^(0+128)
 15780  1126                     l642:	
 15781  1126  0008               	return
 15782  1127                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 15783                           
 15784                           	psect	text91
 15785  15ED                     __ptext91:	
 15786 ;; *************** function _LED_RUN *****************
 15787 ;; Defined at:
 15788 ;;		line 40 in file "./LED.h"
 15789 ;; Parameters:    Size  Location     Type
 15790 ;;  LED_1           1    wreg     _Bool 
 15791 ;;  LED_2           1    0[BANK0 ] _Bool 
 15792 ;;  LED_3           1    1[BANK0 ] _Bool 
 15793 ;; Auto vars:     Size  Location     Type
 15794 ;;  LED_1           1    2[BANK0 ] _Bool 
 15795 ;; Return value:  Size  Location     Type
 15796 ;;                  1    wreg      void 
 15797 ;; Registers used:
 15798 ;;		wreg, status,2, status,0, pclath, cstack
 15799 ;; Tracked objects:
 15800 ;;		On entry : 0/0
 15801 ;;		On exit  : 0/0
 15802 ;;		Unchanged: 0/0
 15803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15804 ;;      Params:         0       2       0       0       0       0       0       0
 15805 ;;      Locals:         0       1       0       0       0       0       0       0
 15806 ;;      Temps:          0       0       0       0       0       0       0       0
 15807 ;;      Totals:         0       3       0       0       0       0       0       0
 15808 ;;Total ram usage:        3 bytes
 15809 ;; Hardware stack levels used:    1
 15810 ;; Hardware stack levels required when called:    6
 15811 ;; This function calls:
 15812 ;;		_LED_DOWN_OFF
 15813 ;;		_LED_DOWN_ON
 15814 ;;		_LED_UP_OFF
 15815 ;;		_LED_UP_ON
 15816 ;; This function is called by:
 15817 ;;		_main
 15818 ;; This function uses a non-reentrant model
 15819 ;;
 15820                           
 15821                           
 15822                           ;psect for function _LED_RUN
 15823  15ED                     _LED_RUN:	
 15824                           
 15825                           ;incstack = 0
 15826                           ; Regs used in _LED_RUN: [wreg+status,2+status,0+pclath+cstack]
 15827                           ;LED_RUN@LED_1 stored from wreg
 15828  15ED  0020               	movlb	0	; select bank0
 15829  15EE  00A2               	movwf	LED_RUN@LED_1
 15830  15EF                     l7123:	
 15831                           
 15832                           ;./LED.h: 40: void LED_RUN(_Bool LED_1,_Bool LED_2,_Bool LED_3);./LED.h: 41: {;./LED.h: 
      +                          42:     if(LED_1)
 15833  15EF  0822               	movf	LED_RUN@LED_1,w
 15834  15F0  1903               	btfsc	3,2
 15835  15F1  2DF3               	goto	u6771
 15836  15F2  2DF4               	goto	u6770
 15837  15F3                     u6771:	
 15838  15F3  2DF8               	goto	l7127
 15839  15F4                     u6770:	
 15840  15F4                     l7125:	
 15841                           
 15842                           ;./LED.h: 43:     {;./LED.h: 44:         LED_UP_ON();
 15843  15F4  3190  20C4  3195   	fcall	_LED_UP_ON
 15844                           
 15845                           ;./LED.h: 45:     }
 15846  15F7  2DFB               	goto	l7129
 15847  15F8                     l7127:	
 15848                           
 15849                           ;./LED.h: 47:     {;./LED.h: 48:         LED_UP_OFF();
 15850  15F8  3190  20BB  3195   	fcall	_LED_UP_OFF
 15851  15FB                     l7129:	
 15852                           
 15853                           ;./LED.h: 51:     if(LED_2)
 15854  15FB  0020               	movlb	0	; select bank0
 15855  15FC  0820               	movf	LED_RUN@LED_2,w
 15856  15FD  1903               	btfsc	3,2
 15857  15FE  2E00               	goto	u6781
 15858  15FF  2E01               	goto	u6780
 15859  1600                     u6781:	
 15860  1600  2E04               	goto	l1200
 15861  1601                     u6780:	
 15862  1601                     l1197:	
 15863                           ;./LED.h: 52:     {;./LED.h: 53:         do { LATAbits.LATA4 = 0; } while(0);
 15864                           
 15865  1601  0022               	movlb	2	; select bank2
 15866  1602  120C               	bcf	12,4	;volatile
 15867  1603  2E06               	goto	l7131
 15868  1604                     l1200:	
 15869                           ;./LED.h: 56:     {;./LED.h: 57:         do { LATAbits.LATA4 = 1; } while(0);
 15870                           
 15871  1604  0022               	movlb	2	; select bank2
 15872  1605  160C               	bsf	12,4	;volatile
 15873  1606                     l7131:	
 15874                           
 15875                           ;./LED.h: 60:     if(LED_3)
 15876  1606  0020               	movlb	0	; select bank0
 15877  1607  0821               	movf	LED_RUN@LED_3,w
 15878  1608  1903               	btfsc	3,2
 15879  1609  2E0B               	goto	u6791
 15880  160A  2E0C               	goto	u6790
 15881  160B                     u6791:	
 15882  160B  2E10               	goto	l7135
 15883  160C                     u6790:	
 15884  160C                     l7133:	
 15885                           
 15886                           ;./LED.h: 61:     {;./LED.h: 62:         LED_DOWN_ON();
 15887  160C  3190  20C1  3195   	fcall	_LED_DOWN_ON
 15888                           
 15889                           ;./LED.h: 63:     }
 15890  160F  2E13               	goto	l1204
 15891  1610                     l7135:	
 15892                           
 15893                           ;./LED.h: 65:     {;./LED.h: 66:         LED_DOWN_OFF();
 15894  1610  3190  20B8  3195   	fcall	_LED_DOWN_OFF
 15895  1613                     l1204:	
 15896  1613  0008               	return
 15897  1614                     __end_of_LED_RUN:	
 15898                           
 15899                           	psect	text92
 15900  10C4                     __ptext92:	
 15901 ;; *************** function _LED_UP_ON *****************
 15902 ;; Defined at:
 15903 ;;		line 4 in file "./LED.h"
 15904 ;; Parameters:    Size  Location     Type
 15905 ;;		None
 15906 ;; Auto vars:     Size  Location     Type
 15907 ;;		None
 15908 ;; Return value:  Size  Location     Type
 15909 ;;                  1    wreg      void 
 15910 ;; Registers used:
 15911 ;;		None
 15912 ;; Tracked objects:
 15913 ;;		On entry : 0/0
 15914 ;;		On exit  : 0/0
 15915 ;;		Unchanged: 0/0
 15916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15917 ;;      Params:         0       0       0       0       0       0       0       0
 15918 ;;      Locals:         0       0       0       0       0       0       0       0
 15919 ;;      Temps:          0       0       0       0       0       0       0       0
 15920 ;;      Totals:         0       0       0       0       0       0       0       0
 15921 ;;Total ram usage:        0 bytes
 15922 ;; Hardware stack levels used:    1
 15923 ;; Hardware stack levels required when called:    5
 15924 ;; This function calls:
 15925 ;;		Nothing
 15926 ;; This function is called by:
 15927 ;;		_LED_RUN
 15928 ;;		_check_up_down
 15929 ;; This function uses a non-reentrant model
 15930 ;;
 15931                           
 15932                           
 15933                           ;psect for function _LED_UP_ON
 15934  10C4                     _LED_UP_ON:	
 15935  10C4                     l1152:	
 15936                           ;incstack = 0
 15937                           ; Regs used in _LED_UP_ON: []
 15938                           ;./LED.h: 6:     do { LATCbits.LATC6 = 1; } while(0);
 15939                           
 15940  10C4  0022               	movlb	2	; select bank2
 15941  10C5  170E               	bsf	14,6	;volatile
 15942  10C6                     l1154:	
 15943  10C6  0008               	return
 15944  10C7                     __end_of_LED_UP_ON:	
 15945                           
 15946                           	psect	text93
 15947  10C1                     __ptext93:	
 15948 ;; *************** function _LED_DOWN_ON *****************
 15949 ;; Defined at:
 15950 ;;		line 8 in file "./LED.h"
 15951 ;; Parameters:    Size  Location     Type
 15952 ;;		None
 15953 ;; Auto vars:     Size  Location     Type
 15954 ;;		None
 15955 ;; Return value:  Size  Location     Type
 15956 ;;                  1    wreg      void 
 15957 ;; Registers used:
 15958 ;;		None
 15959 ;; Tracked objects:
 15960 ;;		On entry : 0/0
 15961 ;;		On exit  : 0/0
 15962 ;;		Unchanged: 0/0
 15963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15964 ;;      Params:         0       0       0       0       0       0       0       0
 15965 ;;      Locals:         0       0       0       0       0       0       0       0
 15966 ;;      Temps:          0       0       0       0       0       0       0       0
 15967 ;;      Totals:         0       0       0       0       0       0       0       0
 15968 ;;Total ram usage:        0 bytes
 15969 ;; Hardware stack levels used:    1
 15970 ;; Hardware stack levels required when called:    5
 15971 ;; This function calls:
 15972 ;;		Nothing
 15973 ;; This function is called by:
 15974 ;;		_LED_RUN
 15975 ;;		_main
 15976 ;;		_check_up_down
 15977 ;; This function uses a non-reentrant model
 15978 ;;
 15979                           
 15980                           
 15981                           ;psect for function _LED_DOWN_ON
 15982  10C1                     _LED_DOWN_ON:	
 15983  10C1                     l1157:	
 15984                           ;incstack = 0
 15985                           ; Regs used in _LED_DOWN_ON: []
 15986                           ;./LED.h: 10:     do { LATAbits.LATA5 = 1; } while(0);
 15987                           
 15988  10C1  0022               	movlb	2	; select bank2
 15989  10C2  168C               	bsf	12,5	;volatile
 15990  10C3                     l1159:	
 15991  10C3  0008               	return
 15992  10C4                     __end_of_LED_DOWN_ON:	
 15993                           
 15994                           	psect	text94
 15995  10BE                     __ptext94:	
 15996 ;; *************** function _LED_ON *****************
 15997 ;; Defined at:
 15998 ;;		line 20 in file "./LED.h"
 15999 ;; Parameters:    Size  Location     Type
 16000 ;;		None
 16001 ;; Auto vars:     Size  Location     Type
 16002 ;;		None
 16003 ;; Return value:  Size  Location     Type
 16004 ;;                  1    wreg      void 
 16005 ;; Registers used:
 16006 ;;		None
 16007 ;; Tracked objects:
 16008 ;;		On entry : 0/0
 16009 ;;		On exit  : 0/0
 16010 ;;		Unchanged: 0/0
 16011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16012 ;;      Params:         0       0       0       0       0       0       0       0
 16013 ;;      Locals:         0       0       0       0       0       0       0       0
 16014 ;;      Temps:          0       0       0       0       0       0       0       0
 16015 ;;      Totals:         0       0       0       0       0       0       0       0
 16016 ;;Total ram usage:        0 bytes
 16017 ;; Hardware stack levels used:    1
 16018 ;; Hardware stack levels required when called:    5
 16019 ;; This function calls:
 16020 ;;		Nothing
 16021 ;; This function is called by:
 16022 ;;		_main
 16023 ;; This function uses a non-reentrant model
 16024 ;;
 16025                           
 16026                           
 16027                           ;psect for function _LED_ON
 16028  10BE                     _LED_ON:	
 16029  10BE                     l1172:	
 16030                           ;incstack = 0
 16031                           ; Regs used in _LED_ON: []
 16032                           ;./LED.h: 22:     do { LATAbits.LATA4 = 0; } while(0);
 16033                           
 16034  10BE  0022               	movlb	2	; select bank2
 16035  10BF  120C               	bcf	12,4	;volatile
 16036  10C0                     l1174:	
 16037  10C0  0008               	return
 16038  10C1                     __end_of_LED_ON:	
 16039                           
 16040                           	psect	text95
 16041  149F                     __ptext95:	
 16042 ;; *************** function _INIT_SMART_LIGHT *****************
 16043 ;; Defined at:
 16044 ;;		line 22 in file "uart.c"
 16045 ;; Parameters:    Size  Location     Type
 16046 ;;		None
 16047 ;; Auto vars:     Size  Location     Type
 16048 ;;		None
 16049 ;; Return value:  Size  Location     Type
 16050 ;;                  1    wreg      void 
 16051 ;; Registers used:
 16052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16053 ;; Tracked objects:
 16054 ;;		On entry : 0/0
 16055 ;;		On exit  : 0/0
 16056 ;;		Unchanged: 0/0
 16057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16058 ;;      Params:         0       0       0       0       0       0       0       0
 16059 ;;      Locals:         0       0       0       0       0       0       0       0
 16060 ;;      Temps:          0       0       0       0       0       0       0       0
 16061 ;;      Totals:         0       0       0       0       0       0       0       0
 16062 ;;Total ram usage:        0 bytes
 16063 ;; Hardware stack levels used:    1
 16064 ;; Hardware stack levels required when called:    7
 16065 ;; This function calls:
 16066 ;;		_EUSART_SetRxInterruptHandler
 16067 ;;		_SendString
 16068 ;; This function is called by:
 16069 ;;		_main
 16070 ;; This function uses a non-reentrant model
 16071 ;;
 16072                           
 16073                           
 16074                           ;psect for function _INIT_SMART_LIGHT
 16075  149F                     _INIT_SMART_LIGHT:	
 16076  149F                     l7137:	
 16077                           ;incstack = 0
 16078                           ; Regs used in _INIT_SMART_LIGHT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16079                           
 16080                           
 16081                           ;uart.c: 24:     uart[SML].SetRxISR(ReceivedMessage);
 16082  149F  3089               	movlw	low _ReceivedMessage
 16083  14A0  0020               	movlb	0	; select bank0
 16084  14A1  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 16085  14A2  3017               	movlw	high _ReceivedMessage
 16086  14A3  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 16087  14A4  303C               	movlw	low ((_uart+12)| (0+32768))
 16088  14A5  0084               	movwf	4
 16089  14A6  3098               	movlw	high ((_uart+12)| (0+32768))
 16090  14A7  0085               	movwf	5
 16091  14A8  3F01               	moviw [1]fsr0
 16092  14A9  008A               	movwf	10
 16093  14AA  3F00               	moviw [0]fsr0
 16094  14AB  000A               	callw
 16095  14AC  3194               	pagesel	$
 16096  14AD                     l7139:	
 16097                           
 16098                           ;uart.c: 25:     SendString("SYS FACTORY RESET");
 16099  14AD  3044               	movlw	low (STR_2| (0+32768))
 16100  14AE  0020               	movlb	0	; select bank0
 16101  14AF  00A2               	movwf	SendString@command
 16102  14B0  3098               	movlw	high (STR_2| (0+32768))
 16103  14B1  00A3               	movwf	SendString@command+1
 16104  14B2  3194  24FC  3194   	fcall	_SendString
 16105  14B5                     l7141:	
 16106                           
 16107                           ;uart.c: 26:     SendString("SMART LIGHT INIT");
 16108  14B5  3056               	movlw	low (STR_3| (0+32768))
 16109  14B6  0020               	movlb	0	; select bank0
 16110  14B7  00A2               	movwf	SendString@command
 16111  14B8  3098               	movlw	high (STR_3| (0+32768))
 16112  14B9  00A3               	movwf	SendString@command+1
 16113  14BA  3194  24FC  3194   	fcall	_SendString
 16114  14BD                     l1435:	
 16115  14BD  0008               	return
 16116  14BE                     __end_of_INIT_SMART_LIGHT:	
 16117                           
 16118                           	psect	text96
 16119  14FC                     __ptext96:	
 16120 ;; *************** function _SendString *****************
 16121 ;; Defined at:
 16122 ;;		line 7 in file "uart.c"
 16123 ;; Parameters:    Size  Location     Type
 16124 ;;  command         2    2[BANK0 ] PTR const unsigned char 
 16125 ;;		 -> STR_3(17), STR_2(18), 
 16126 ;; Auto vars:     Size  Location     Type
 16127 ;;		None
 16128 ;; Return value:  Size  Location     Type
 16129 ;;                  1    wreg      void 
 16130 ;; Registers used:
 16131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16132 ;; Tracked objects:
 16133 ;;		On entry : 0/0
 16134 ;;		On exit  : 0/0
 16135 ;;		Unchanged: 0/0
 16136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16137 ;;      Params:         0       2       0       0       0       0       0       0
 16138 ;;      Locals:         0       0       0       0       0       0       0       0
 16139 ;;      Temps:          0       1       0       0       0       0       0       0
 16140 ;;      Totals:         0       3       0       0       0       0       0       0
 16141 ;;Total ram usage:        3 bytes
 16142 ;; Hardware stack levels used:    1
 16143 ;; Hardware stack levels required when called:    6
 16144 ;; This function calls:
 16145 ;;		_EUSART_Write
 16146 ;; This function is called by:
 16147 ;;		_INIT_SMART_LIGHT
 16148 ;; This function uses a non-reentrant model
 16149 ;;
 16150                           
 16151                           
 16152                           ;psect for function _SendString
 16153  14FC                     _SendString:	
 16154  14FC                     l5311:	
 16155                           ;incstack = 0
 16156                           ; Regs used in _SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16157                           
 16158                           
 16159                           ;uart.c: 7: void SendString(const char* command);uart.c: 8: {;uart.c: 9:     while (Resp
      +                          onseIndex-- != 0)
 16160  14FC  2D13               	goto	l5317
 16161  14FD                     l5313:	
 16162                           
 16163                           ;uart.c: 10:         uart[SML].Write(*command++);
 16164  14FD  0822               	movf	SendString@command,w
 16165  14FE  0084               	movwf	4
 16166  14FF  0823               	movf	SendString@command+1,w
 16167  1500  0085               	movwf	5
 16168  1501  0800               	movf	0,w	;code access
 16169  1502  00A4               	movwf	??_SendString
 16170  1503  0824               	movf	??_SendString,w
 16171  1504  00A0               	movwf	EUSART_Write@txData
 16172  1505  3032               	movlw	low ((_uart+2)| (0+32768))
 16173  1506  0084               	movwf	4
 16174  1507  3098               	movlw	high ((_uart+2)| (0+32768))
 16175  1508  0085               	movwf	5
 16176  1509  3F01               	moviw [1]fsr0
 16177  150A  008A               	movwf	10
 16178  150B  3F00               	moviw [0]fsr0
 16179  150C  000A               	callw
 16180  150D  3194               	pagesel	$
 16181  150E                     l5315:	
 16182  150E  3001               	movlw	1
 16183  150F  0020               	movlb	0	; select bank0
 16184  1510  07A2               	addwf	SendString@command,f
 16185  1511  3000               	movlw	0
 16186  1512  3DA3               	addwfc	SendString@command+1,f
 16187  1513                     l5317:	
 16188                           
 16189                           ;uart.c: 9:     while (ResponseIndex-- != 0)
 16190  1513  3001               	movlw	1
 16191  1514  0020               	movlb	0	; select bank0
 16192  1515  02E0               	subwf	_ResponseIndex,f
 16193  1516  0A60               	incf	_ResponseIndex,w
 16194  1517  1D03               	btfss	3,2
 16195  1518  2D1A               	goto	u4321
 16196  1519  2D1B               	goto	u4320
 16197  151A                     u4321:	
 16198  151A  2CFD               	goto	l5313
 16199  151B                     u4320:	
 16200  151B                     l1426:	
 16201  151B  0008               	return
 16202  151C                     __end_of_SendString:	
 16203                           
 16204                           	psect	text97
 16205  163B                     __ptext97:	
 16206 ;; *************** function _EUSART_Write *****************
 16207 ;; Defined at:
 16208 ;;		line 170 in file "mcc_generated_files/eusart.c"
 16209 ;; Parameters:    Size  Location     Type
 16210 ;;  txData          1    0[BANK0 ] unsigned char 
 16211 ;; Auto vars:     Size  Location     Type
 16212 ;;		None
 16213 ;; Return value:  Size  Location     Type
 16214 ;;                  1    wreg      void 
 16215 ;; Registers used:
 16216 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16217 ;; Tracked objects:
 16218 ;;		On entry : 0/0
 16219 ;;		On exit  : 0/0
 16220 ;;		Unchanged: 0/0
 16221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16222 ;;      Params:         0       1       0       0       0       0       0       0
 16223 ;;      Locals:         0       0       0       0       0       0       0       0
 16224 ;;      Temps:          0       1       0       0       0       0       0       0
 16225 ;;      Totals:         0       2       0       0       0       0       0       0
 16226 ;;Total ram usage:        2 bytes
 16227 ;; Hardware stack levels used:    1
 16228 ;; Hardware stack levels required when called:    5
 16229 ;; This function calls:
 16230 ;;		Nothing
 16231 ;; This function is called by:
 16232 ;;		_SendString
 16233 ;;		_SML_SendString
 16234 ;; This function uses a non-reentrant model
 16235 ;;
 16236                           
 16237                           
 16238                           ;psect for function _EUSART_Write
 16239  163B                     _EUSART_Write:	
 16240  163B                     l5083:	
 16241                           ;incstack = 0
 16242                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 16243                           
 16244  163B                     l5085:	
 16245                           ;mcc_generated_files/eusart.c: 170: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 171: {;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemai
      +                          ning)
 16246                           
 16247                           
 16248                           ;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemaining)
 16249  163B  0021               	movlb	1	; select bank1
 16250  163C  0863               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 16251  163D  1903               	btfsc	3,2
 16252  163E  2E40               	goto	u4191
 16253  163F  2E41               	goto	u4190
 16254  1640                     u4191:	
 16255  1640  2E3B               	goto	l5085
 16256  1641                     u4190:	
 16257  1641                     l741:	
 16258                           
 16259                           ;mcc_generated_files/eusart.c: 176:     if(0 == PIE1bits.TXIE)
 16260  1641  1A11               	btfsc	17,4	;volatile
 16261  1642  2E44               	goto	u4201
 16262  1643  2E45               	goto	u4200
 16263  1644                     u4201:	
 16264  1644  2E4A               	goto	l742
 16265  1645                     u4200:	
 16266  1645                     l5087:	
 16267                           
 16268                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = txData;
 16269  1645  0020               	movlb	0	; select bank0
 16270  1646  0820               	movf	EUSART_Write@txData,w
 16271  1647  0023               	movlb	3	; select bank3
 16272  1648  009A               	movwf	26	;volatile
 16273                           
 16274                           ;mcc_generated_files/eusart.c: 179:     }
 16275  1649  2E62               	goto	l5099
 16276  164A                     l742:	
 16277                           ;mcc_generated_files/eusart.c: 180:     else
 16278                           
 16279                           
 16280                           ;mcc_generated_files/eusart.c: 181:     {;mcc_generated_files/eusart.c: 182:         PIE
      +                          1bits.TXIE = 0;
 16281  164A  1211               	bcf	17,4	;volatile
 16282  164B                     l5089:	
 16283                           
 16284                           ;mcc_generated_files/eusart.c: 183:         eusartTxBuffer[eusartTxHead++] = txData;
 16285  164B  0020               	movlb	0	; select bank0
 16286  164C  0820               	movf	EUSART_Write@txData,w
 16287  164D  00A1               	movwf	??_EUSART_Write
 16288  164E  086C               	movf	_eusartTxHead,w
 16289  164F  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 16290  1650  0086               	movwf	6
 16291  1651  0187               	clrf	7
 16292  1652  0821               	movf	??_EUSART_Write,w
 16293  1653  0081               	movwf	1
 16294  1654                     l5091:	
 16295  1654  3001               	movlw	1
 16296  1655  00A1               	movwf	??_EUSART_Write
 16297  1656  0821               	movf	??_EUSART_Write,w
 16298  1657  07EC               	addwf	_eusartTxHead,f	;volatile
 16299  1658                     l5093:	
 16300                           
 16301                           ;mcc_generated_files/eusart.c: 184:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
 16302  1658  3008               	movlw	8
 16303  1659  026C               	subwf	_eusartTxHead,w	;volatile
 16304  165A  1C03               	skipc
 16305  165B  2E5D               	goto	u4211
 16306  165C  2E5E               	goto	u4210
 16307  165D                     u4211:	
 16308  165D  2E5F               	goto	l5097
 16309  165E                     u4210:	
 16310  165E                     l5095:	
 16311                           
 16312                           ;mcc_generated_files/eusart.c: 185:         {;mcc_generated_files/eusart.c: 186:        
      +                               eusartTxHead = 0;
 16313  165E  01EC               	clrf	_eusartTxHead	;volatile
 16314  165F                     l5097:	
 16315                           
 16316                           ;mcc_generated_files/eusart.c: 188:         eusartTxBufferRemaining--;
 16317  165F  3001               	movlw	1
 16318  1660  0021               	movlb	1	; select bank1
 16319  1661  02E3               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 16320  1662                     l5099:	
 16321                           
 16322                           ;mcc_generated_files/eusart.c: 190:     PIE1bits.TXIE = 1;
 16323  1662  0021               	movlb	1	; select bank1
 16324  1663  1611               	bsf	17,4	;volatile
 16325  1664                     l745:	
 16326  1664  0008               	return
 16327  1665                     __end_of_EUSART_Write:	
 16328                           
 16329                           	psect	text98
 16330  1115                     __ptext98:	
 16331 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 16332 ;; Defined at:
 16333 ;;		line 277 in file "mcc_generated_files/eusart.c"
 16334 ;; Parameters:    Size  Location     Type
 16335 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 16336 ;;		 -> ReceivedMessage(1), EUSART_Receive_ISR(1), 
 16337 ;; Auto vars:     Size  Location     Type
 16338 ;;		None
 16339 ;; Return value:  Size  Location     Type
 16340 ;;                  1    wreg      void 
 16341 ;; Registers used:
 16342 ;;		wreg
 16343 ;; Tracked objects:
 16344 ;;		On entry : 0/0
 16345 ;;		On exit  : 0/0
 16346 ;;		Unchanged: 0/0
 16347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16348 ;;      Params:         0       2       0       0       0       0       0       0
 16349 ;;      Locals:         0       0       0       0       0       0       0       0
 16350 ;;      Temps:          0       0       0       0       0       0       0       0
 16351 ;;      Totals:         0       2       0       0       0       0       0       0
 16352 ;;Total ram usage:        2 bytes
 16353 ;; Hardware stack levels used:    1
 16354 ;; Hardware stack levels required when called:    5
 16355 ;; This function calls:
 16356 ;;		Nothing
 16357 ;; This function is called by:
 16358 ;;		_EUSART_Initialize
 16359 ;;		_INIT_SMART_LIGHT
 16360 ;; This function uses a non-reentrant model
 16361 ;;
 16362                           
 16363                           
 16364                           ;psect for function _EUSART_SetRxInterruptHandler
 16365  1115                     _EUSART_SetRxInterruptHandler:	
 16366  1115                     l6911:	
 16367                           ;incstack = 0
 16368                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 16369                           
 16370                           
 16371                           ;mcc_generated_files/eusart.c: 278:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
 16372  1115  0020               	movlb	0	; select bank0
 16373  1116  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 16374  1117  0021               	movlb	1	; select bank1
 16375  1118  00DF               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
 16376  1119  0020               	movlb	0	; select bank0
 16377  111A  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 16378  111B  0021               	movlb	1	; select bank1
 16379  111C  00DE               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
 16380  111D                     l786:	
 16381  111D  0008               	return
 16382  111E                     __end_of_EUSART_SetRxInterruptHandler:	
 16383                           
 16384                           	psect	text99
 16385  10B6                     __ptext99:	
 16386 ;; *************** function _GetResponse *****************
 16387 ;; Defined at:
 16388 ;;		line 47 in file "uart.c"
 16389 ;; Parameters:    Size  Location     Type
 16390 ;;		None
 16391 ;; Auto vars:     Size  Location     Type
 16392 ;;		None
 16393 ;; Return value:  Size  Location     Type
 16394 ;;                  1    wreg      PTR unsigned char 
 16395 ;; Registers used:
 16396 ;;		wreg
 16397 ;; Tracked objects:
 16398 ;;		On entry : 0/0
 16399 ;;		On exit  : 0/0
 16400 ;;		Unchanged: 0/0
 16401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16402 ;;      Params:         0       0       0       0       0       0       0       0
 16403 ;;      Locals:         0       0       0       0       0       0       0       0
 16404 ;;      Temps:          0       0       0       0       0       0       0       0
 16405 ;;      Totals:         0       0       0       0       0       0       0       0
 16406 ;;Total ram usage:        0 bytes
 16407 ;; Hardware stack levels used:    1
 16408 ;; Hardware stack levels required when called:    5
 16409 ;; This function calls:
 16410 ;;		Nothing
 16411 ;; This function is called by:
 16412 ;;		_main
 16413 ;; This function uses a non-reentrant model
 16414 ;;
 16415                           
 16416                           
 16417                           ;psect for function _GetResponse
 16418  10B6                     _GetResponse:	
 16419  10B6                     l7143:	
 16420                           ;incstack = 0
 16421                           ; Regs used in _GetResponse: [wreg]
 16422                           
 16423                           
 16424                           ;uart.c: 49:     return ResponseBuffer;
 16425  10B6  30A0               	movlw	(low (_ResponseBuffer| (0+256)))& (0+255)
 16426  10B7                     l1450:	
 16427  10B7  0008               	return
 16428  10B8                     __end_of_GetResponse:	
 16429                           
 16430                           	psect	text100
 16431  10E6                     __ptext100:	
 16432 ;; *************** function _ALL_ON *****************
 16433 ;; Defined at:
 16434 ;;		line 30 in file "./LED.h"
 16435 ;; Parameters:    Size  Location     Type
 16436 ;;		None
 16437 ;; Auto vars:     Size  Location     Type
 16438 ;;		None
 16439 ;; Return value:  Size  Location     Type
 16440 ;;                  1    wreg      void 
 16441 ;; Registers used:
 16442 ;;		None
 16443 ;; Tracked objects:
 16444 ;;		On entry : 0/0
 16445 ;;		On exit  : 0/0
 16446 ;;		Unchanged: 0/0
 16447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16448 ;;      Params:         0       0       0       0       0       0       0       0
 16449 ;;      Locals:         0       0       0       0       0       0       0       0
 16450 ;;      Temps:          0       0       0       0       0       0       0       0
 16451 ;;      Totals:         0       0       0       0       0       0       0       0
 16452 ;;Total ram usage:        0 bytes
 16453 ;; Hardware stack levels used:    1
 16454 ;; Hardware stack levels required when called:    5
 16455 ;; This function calls:
 16456 ;;		Nothing
 16457 ;; This function is called by:
 16458 ;;		_main
 16459 ;; This function uses a non-reentrant model
 16460 ;;
 16461                           
 16462                           
 16463                           ;psect for function _ALL_ON
 16464  10E6                     _ALL_ON:	
 16465  10E6                     l1182:	
 16466                           ;incstack = 0
 16467                           ; Regs used in _ALL_ON: []
 16468                           ;./LED.h: 32:     do { LATCbits.LATC6 = 1; } while(0);
 16469                           
 16470  10E6  0022               	movlb	2	; select bank2
 16471  10E7  170E               	bsf	14,6	;volatile
 16472  10E8                     l1184:	
 16473                           ;./LED.h: 33:     do { LATAbits.LATA4 = 0; } while(0);
 16474                           
 16475  10E8  120C               	bcf	12,4	;volatile
 16476  10E9                     l1186:	
 16477                           ;./LED.h: 34:     do { LATAbits.LATA5 = 1; } while(0);
 16478                           
 16479  10E9  168C               	bsf	12,5	;volatile
 16480  10EA                     l1188:	
 16481  10EA  0008               	return
 16482  10EB                     __end_of_ALL_ON:	
 16483                           
 16484                           	psect	text101
 16485  10D5                     __ptext101:	
 16486 ;; *************** function _ALL_OFF *****************
 16487 ;; Defined at:
 16488 ;;		line 36 in file "./LED.h"
 16489 ;; Parameters:    Size  Location     Type
 16490 ;;		None
 16491 ;; Auto vars:     Size  Location     Type
 16492 ;;		None
 16493 ;; Return value:  Size  Location     Type
 16494 ;;                  1    wreg      void 
 16495 ;; Registers used:
 16496 ;;		status,2, status,0, pclath, cstack
 16497 ;; Tracked objects:
 16498 ;;		On entry : 0/0
 16499 ;;		On exit  : 0/0
 16500 ;;		Unchanged: 0/0
 16501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16502 ;;      Params:         0       0       0       0       0       0       0       0
 16503 ;;      Locals:         0       0       0       0       0       0       0       0
 16504 ;;      Temps:          0       0       0       0       0       0       0       0
 16505 ;;      Totals:         0       0       0       0       0       0       0       0
 16506 ;;Total ram usage:        0 bytes
 16507 ;; Hardware stack levels used:    1
 16508 ;; Hardware stack levels required when called:    7
 16509 ;; This function calls:
 16510 ;;		_LED_OFF
 16511 ;; This function is called by:
 16512 ;;		_main
 16513 ;; This function uses a non-reentrant model
 16514 ;;
 16515                           
 16516                           
 16517                           ;psect for function _ALL_OFF
 16518  10D5                     _ALL_OFF:	
 16519  10D5                     l7121:	
 16520                           ;incstack = 0
 16521                           ; Regs used in _ALL_OFF: [status,2+status,0+pclath+cstack]
 16522                           
 16523                           
 16524                           ;./LED.h: 38:     LED_OFF();
 16525  10D5  3191  210C  3190   	fcall	_LED_OFF
 16526  10D8                     l1191:	
 16527  10D8  0008               	return
 16528  10D9                     __end_of_ALL_OFF:	
 16529                           
 16530                           	psect	text102
 16531  110C                     __ptext102:	
 16532 ;; *************** function _LED_OFF *****************
 16533 ;; Defined at:
 16534 ;;		line 24 in file "./LED.h"
 16535 ;; Parameters:    Size  Location     Type
 16536 ;;		None
 16537 ;; Auto vars:     Size  Location     Type
 16538 ;;		None
 16539 ;; Return value:  Size  Location     Type
 16540 ;;                  1    wreg      void 
 16541 ;; Registers used:
 16542 ;;		status,2, status,0, pclath, cstack
 16543 ;; Tracked objects:
 16544 ;;		On entry : 0/0
 16545 ;;		On exit  : 0/0
 16546 ;;		Unchanged: 0/0
 16547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16548 ;;      Params:         0       0       0       0       0       0       0       0
 16549 ;;      Locals:         0       0       0       0       0       0       0       0
 16550 ;;      Temps:          0       0       0       0       0       0       0       0
 16551 ;;      Totals:         0       0       0       0       0       0       0       0
 16552 ;;Total ram usage:        0 bytes
 16553 ;; Hardware stack levels used:    1
 16554 ;; Hardware stack levels required when called:    6
 16555 ;; This function calls:
 16556 ;;		_LED_DOWN_OFF
 16557 ;;		_LED_UP_OFF
 16558 ;; This function is called by:
 16559 ;;		_ALL_OFF
 16560 ;;		_main
 16561 ;; This function uses a non-reentrant model
 16562 ;;
 16563                           
 16564                           
 16565                           ;psect for function _LED_OFF
 16566  110C                     _LED_OFF:	
 16567  110C                     l1177:	
 16568                           ;incstack = 0
 16569                           ; Regs used in _LED_OFF: [status,2+status,0+pclath+cstack]
 16570                           ;./LED.h: 26:     do { LATAbits.LATA4 = 1; } while(0);
 16571                           
 16572  110C  0022               	movlb	2	; select bank2
 16573  110D  160C               	bsf	12,4	;volatile
 16574  110E                     l7057:	
 16575                           
 16576                           ;./LED.h: 27:     LED_UP_OFF();
 16577  110E  3190  20BB  3191   	fcall	_LED_UP_OFF
 16578                           
 16579                           ;./LED.h: 28:     LED_DOWN_OFF();
 16580  1111  3190  20B8  3191   	fcall	_LED_DOWN_OFF
 16581  1114                     l1179:	
 16582  1114  0008               	return
 16583  1115                     __end_of_LED_OFF:	
 16584                           
 16585                           	psect	text103
 16586  10BB                     __ptext103:	
 16587 ;; *************** function _LED_UP_OFF *****************
 16588 ;; Defined at:
 16589 ;;		line 12 in file "./LED.h"
 16590 ;; Parameters:    Size  Location     Type
 16591 ;;		None
 16592 ;; Auto vars:     Size  Location     Type
 16593 ;;		None
 16594 ;; Return value:  Size  Location     Type
 16595 ;;                  1    wreg      void 
 16596 ;; Registers used:
 16597 ;;		None
 16598 ;; Tracked objects:
 16599 ;;		On entry : 0/0
 16600 ;;		On exit  : 0/0
 16601 ;;		Unchanged: 0/0
 16602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16603 ;;      Params:         0       0       0       0       0       0       0       0
 16604 ;;      Locals:         0       0       0       0       0       0       0       0
 16605 ;;      Temps:          0       0       0       0       0       0       0       0
 16606 ;;      Totals:         0       0       0       0       0       0       0       0
 16607 ;;Total ram usage:        0 bytes
 16608 ;; Hardware stack levels used:    1
 16609 ;; Hardware stack levels required when called:    5
 16610 ;; This function calls:
 16611 ;;		Nothing
 16612 ;; This function is called by:
 16613 ;;		_LED_OFF
 16614 ;;		_LED_RUN
 16615 ;;		_myButtonReleasedCallback
 16616 ;; This function uses a non-reentrant model
 16617 ;;
 16618                           
 16619                           
 16620                           ;psect for function _LED_UP_OFF
 16621  10BB                     _LED_UP_OFF:	
 16622  10BB                     l1162:	
 16623                           ;incstack = 0
 16624                           ; Regs used in _LED_UP_OFF: []
 16625                           ;./LED.h: 14:     do { LATCbits.LATC6 = 0; } while(0);
 16626                           
 16627  10BB  0022               	movlb	2	; select bank2
 16628  10BC  130E               	bcf	14,6	;volatile
 16629  10BD                     l1164:	
 16630  10BD  0008               	return
 16631  10BE                     __end_of_LED_UP_OFF:	
 16632                           
 16633                           	psect	text104
 16634  10B8                     __ptext104:	
 16635 ;; *************** function _LED_DOWN_OFF *****************
 16636 ;; Defined at:
 16637 ;;		line 16 in file "./LED.h"
 16638 ;; Parameters:    Size  Location     Type
 16639 ;;		None
 16640 ;; Auto vars:     Size  Location     Type
 16641 ;;		None
 16642 ;; Return value:  Size  Location     Type
 16643 ;;                  1    wreg      void 
 16644 ;; Registers used:
 16645 ;;		None
 16646 ;; Tracked objects:
 16647 ;;		On entry : 0/0
 16648 ;;		On exit  : 0/0
 16649 ;;		Unchanged: 0/0
 16650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16651 ;;      Params:         0       0       0       0       0       0       0       0
 16652 ;;      Locals:         0       0       0       0       0       0       0       0
 16653 ;;      Temps:          0       0       0       0       0       0       0       0
 16654 ;;      Totals:         0       0       0       0       0       0       0       0
 16655 ;;Total ram usage:        0 bytes
 16656 ;; Hardware stack levels used:    1
 16657 ;; Hardware stack levels required when called:    5
 16658 ;; This function calls:
 16659 ;;		Nothing
 16660 ;; This function is called by:
 16661 ;;		_LED_OFF
 16662 ;;		_LED_RUN
 16663 ;;		_myButtonReleasedCallback
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667                           
 16668                           ;psect for function _LED_DOWN_OFF
 16669  10B8                     _LED_DOWN_OFF:	
 16670  10B8                     l1167:	
 16671                           ;incstack = 0
 16672                           ; Regs used in _LED_DOWN_OFF: []
 16673                           ;./LED.h: 18:     do { LATAbits.LATA5 = 0; } while(0);
 16674                           
 16675  10B8  0022               	movlb	2	; select bank2
 16676  10B9  128C               	bcf	12,5	;volatile
 16677  10BA                     l1169:	
 16678  10BA  0008               	return
 16679  10BB                     __end_of_LED_DOWN_OFF:	
 16680                           
 16681                           	psect	intentry
 16682  0004                     __pintentry:	
 16683 ;; *************** function _INTERRUPT_InterruptManager *****************
 16684 ;; Defined at:
 16685 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 16686 ;; Parameters:    Size  Location     Type
 16687 ;;		None
 16688 ;; Auto vars:     Size  Location     Type
 16689 ;;		None
 16690 ;; Return value:  Size  Location     Type
 16691 ;;                  1    wreg      void 
 16692 ;; Registers used:
 16693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16694 ;; Tracked objects:
 16695 ;;		On entry : 0/0
 16696 ;;		On exit  : 0/0
 16697 ;;		Unchanged: 0/0
 16698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16699 ;;      Params:         0       0       0       0       0       0       0       0
 16700 ;;      Locals:         0       0       0       0       0       0       0       0
 16701 ;;      Temps:          0       0       0       0       0       0       0       0
 16702 ;;      Totals:         0       0       0       0       0       0       0       0
 16703 ;;Total ram usage:        0 bytes
 16704 ;; Hardware stack levels used:    1
 16705 ;; Hardware stack levels required when called:    4
 16706 ;; This function calls:
 16707 ;;		Absolute function
 16708 ;;		_EUSART_Receive_ISR
 16709 ;;		_EUSART_Transmit_ISR
 16710 ;;		_INT_ISR
 16711 ;;		_ReceivedMessage
 16712 ;;		_TMR0_ISR
 16713 ;; This function is called by:
 16714 ;;		Interrupt level 1
 16715 ;; This function uses a non-reentrant model
 16716 ;;
 16717                           
 16718  0004                     _INTERRUPT_InterruptManager:	
 16719                           
 16720                           ;incstack = 0
 16721  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
 16722                           
 16723                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16724  0005  3180               	pagesel	$
 16725  0006                     i1l5783:	
 16726                           
 16727                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 16728  0006  1E8B               	btfss	11,5	;volatile
 16729  0007  2809               	goto	u505_21
 16730  0008  280A               	goto	u505_20
 16731  0009                     u505_21:	
 16732  0009  2812               	goto	i1l909
 16733  000A                     u505_20:	
 16734  000A                     i1l5785:	
 16735  000A  1D0B               	btfss	11,2	;volatile
 16736  000B  280D               	goto	u506_21
 16737  000C  280E               	goto	u506_20
 16738  000D                     u506_21:	
 16739  000D  2812               	goto	i1l909
 16740  000E                     u506_20:	
 16741  000E                     i1l5787:	
 16742                           
 16743                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 16744  000E  3188  205B  3180   	fcall	_TMR0_ISR
 16745                           
 16746                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 16747  0011  2844               	goto	i1l919
 16748  0012                     i1l909:	
 16749                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.INTE == 1 && INTCON
      +                          bits.INTF == 1)
 16750                           
 16751  0012  1E0B               	btfss	11,4	;volatile
 16752  0013  2815               	goto	u507_21
 16753  0014  2816               	goto	u507_20
 16754  0015                     u507_21:	
 16755  0015  281E               	goto	i1l911
 16756  0016                     u507_20:	
 16757  0016                     i1l5789:	
 16758  0016  1C8B               	btfss	11,1	;volatile
 16759  0017  2819               	goto	u508_21
 16760  0018  281A               	goto	u508_20
 16761  0019                     u508_21:	
 16762  0019  281E               	goto	i1l911
 16763  001A                     u508_20:	
 16764  001A                     i1l5791:	
 16765                           
 16766                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         INT_ISR();
 16767  001A  3190  20E1  3180   	fcall	_INT_ISR
 16768                           
 16769                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 16770  001D  2844               	goto	i1l919
 16771  001E                     i1l911:	
 16772                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.PEIE == 1)
 16773                           
 16774  001E  1F0B               	btfss	11,6	;volatile
 16775  001F  2821               	goto	u509_21
 16776  0020  2822               	goto	u509_20
 16777  0021                     u509_21:	
 16778  0021  2844               	goto	i1l918
 16779  0022                     u509_20:	
 16780  0022                     i1l5793:	
 16781                           
 16782                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 16783  0022  0021               	movlb	1	; select bank1
 16784  0023  1E11               	btfss	17,4	;volatile
 16785  0024  2826               	goto	u510_21
 16786  0025  2827               	goto	u510_20
 16787  0026                     u510_21:	
 16788  0026  2833               	goto	i1l914
 16789  0027                     u510_20:	
 16790  0027                     i1l5795:	
 16791  0027  0020               	movlb	0	; select bank0
 16792  0028  1E11               	btfss	17,4	;volatile
 16793  0029  282B               	goto	u511_21
 16794  002A  282C               	goto	u511_20
 16795  002B                     u511_21:	
 16796  002B  2833               	goto	i1l914
 16797  002C                     u511_20:	
 16798  002C                     i1l5797:	
 16799                           
 16800                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
 16801  002C  0021               	movlb	1	; select bank1
 16802  002D  0861               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 16803  002E  008A               	movwf	10
 16804  002F  0860               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 16805  0030  000A               	callw
 16806  0031  3180               	pagesel	$
 16807                           
 16808                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 16809  0032  2844               	goto	i1l919
 16810  0033                     i1l914:	
 16811                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 16812                           
 16813  0033  0021               	movlb	1	; select bank1
 16814  0034  1E91               	btfss	17,5	;volatile
 16815  0035  2837               	goto	u512_21
 16816  0036  2838               	goto	u512_20
 16817  0037                     u512_21:	
 16818  0037  2844               	goto	i1l918
 16819  0038                     u512_20:	
 16820  0038                     i1l5799:	
 16821  0038  0020               	movlb	0	; select bank0
 16822  0039  1E91               	btfss	17,5	;volatile
 16823  003A  283C               	goto	u513_21
 16824  003B  283D               	goto	u513_20
 16825  003C                     u513_21:	
 16826  003C  2844               	goto	i1l918
 16827  003D                     u513_20:	
 16828  003D                     i1l5801:	
 16829                           
 16830                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
 16831  003D  0021               	movlb	1	; select bank1
 16832  003E  085F               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 16833  003F  008A               	movwf	10
 16834  0040  085E               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 16835  0041  000A               	callw
 16836  0042  3180               	pagesel	$
 16837                           
 16838                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 16839  0043  2844               	goto	i1l919
 16840  0044                     i1l918:	
 16841                           ;mcc_generated_files/interrupt_manager.c: 79:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 81:     }
 16842                           
 16843  0044                     i1l919:	
 16844  0044  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 16845  0045  0009               	retfie
 16846  0046                     __end_of_INTERRUPT_InterruptManager:	
 16847                           
 16848                           	psect	text106
 16849  085B                     __ptext106:	
 16850 ;; *************** function _TMR0_ISR *****************
 16851 ;; Defined at:
 16852 ;;		line 110 in file "mcc_generated_files/tmr0.c"
 16853 ;; Parameters:    Size  Location     Type
 16854 ;;		None
 16855 ;; Auto vars:     Size  Location     Type
 16856 ;;		None
 16857 ;; Return value:  Size  Location     Type
 16858 ;;                  1    wreg      void 
 16859 ;; Registers used:
 16860 ;;		wreg, status,2, status,0, pclath, cstack
 16861 ;; Tracked objects:
 16862 ;;		On entry : 0/0
 16863 ;;		On exit  : 0/0
 16864 ;;		Unchanged: 0/0
 16865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16866 ;;      Params:         0       0       0       0       0       0       0       0
 16867 ;;      Locals:         0       0       0       0       0       0       0       0
 16868 ;;      Temps:          6       0       0       0       0       0       0       0
 16869 ;;      Totals:         6       0       0       0       0       0       0       0
 16870 ;;Total ram usage:        6 bytes
 16871 ;; Hardware stack levels used:    1
 16872 ;; Hardware stack levels required when called:    2
 16873 ;; This function calls:
 16874 ;;		Absolute function
 16875 ;;		_TMR0_CallBack
 16876 ;;		_TMR0_DefaultInterruptHandler
 16877 ;; This function is called by:
 16878 ;;		_INTERRUPT_InterruptManager
 16879 ;; This function uses a non-reentrant model
 16880 ;;
 16881                           
 16882                           
 16883                           ;psect for function _TMR0_ISR
 16884  085B                     _TMR0_ISR:	
 16885  085B                     i1l5461:	
 16886                           ;incstack = 0
 16887                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 16888                           
 16889                           
 16890                           ;mcc_generated_files/tmr0.c: 114:     INTCONbits.TMR0IF = 0;
 16891  085B  110B               	bcf	11,2	;volatile
 16892  085C                     i1l5463:	
 16893                           
 16894                           ;mcc_generated_files/tmr0.c: 116:     TMR0 = timer0ReloadVal;
 16895  085C  0021               	movlb	1	; select bank1
 16896  085D  0862               	movf	_timer0ReloadVal^(0+128),w	;volatile
 16897  085E  0020               	movlb	0	; select bank0
 16898  085F  0095               	movwf	21	;volatile
 16899  0860                     i1l5465:	
 16900                           
 16901                           ;mcc_generated_files/tmr0.c: 120:     static uint8_t tick_count = 0;;mcc_generated_files
      +                          /tmr0.c: 121:     if(triac_level_now.level == 0)
 16902  0860  0021               	movlb	1	; select bank1
 16903  0861  083E               	movf	_triac_level_now^(0+128),w
 16904  0862  390F               	andlw	15
 16905  0863  3A00               	xorlw	0
 16906  0864  1D03               	skipz
 16907  0865  2867               	goto	u454_21
 16908  0866  2868               	goto	u454_20
 16909  0867                     u454_21:	
 16910  0867  2882               	goto	i1l5479
 16911  0868                     u454_20:	
 16912  0868                     i1l5467:	
 16913                           
 16914                           ;mcc_generated_files/tmr0.c: 122:     {;mcc_generated_files/tmr0.c: 123:         tick_co
      +                          unt = 0;
 16915  0868  01C5               	clrf	TMR0_ISR@tick_count^(0+128)
 16916  0869                     i1l5469:	
 16917                           
 16918                           ;mcc_generated_files/tmr0.c: 124:         INTCONbits.TMR0IE = 0;
 16919  0869  128B               	bcf	11,5	;volatile
 16920  086A                     i1l5471:	
 16921  086A  0022               	movlb	2	; select bank2
 16922  086B  118E               	bcf	14,3	;volatile
 16923  086C                     i1l5473:	
 16924                           
 16925                           ;mcc_generated_files/tmr0.c: 126:         triac_level_now.level = triac_level.level;
 16926  086C  0020               	movlb	0	; select bank0
 16927  086D  0859               	movf	_triac_level,w
 16928  086E  390F               	andlw	15
 16929  086F  00F8               	movwf	??_TMR0_ISR
 16930  0870  0021               	movlb	1	; select bank1
 16931  0871  083E               	movf	_triac_level_now^(0+128),w
 16932  0872  0678               	xorwf	??_TMR0_ISR,w
 16933  0873  39F0               	andlw	-16
 16934  0874  0678               	xorwf	??_TMR0_ISR,w
 16935  0875  00BE               	movwf	_triac_level_now^(0+128)
 16936  0876                     i1l5475:	
 16937                           
 16938                           ;mcc_generated_files/tmr0.c: 127:         if(TMR0_InterruptHandler)
 16939  0876  0858               	movf	_TMR0_InterruptHandler^(0+128),w
 16940  0877  0459               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 16941  0878  1903               	btfsc	3,2
 16942  0879  287B               	goto	u455_21
 16943  087A  287C               	goto	u455_20
 16944  087B                     u455_21:	
 16945  087B  28A1               	goto	i1l1039
 16946  087C                     u455_20:	
 16947  087C                     i1l5477:	
 16948                           
 16949                           ;mcc_generated_files/tmr0.c: 128:         {;mcc_generated_files/tmr0.c: 129:            
      +                           TMR0_InterruptHandler();
 16950  087C  0859               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 16951  087D  008A               	movwf	10
 16952  087E  0858               	movf	_TMR0_InterruptHandler^(0+128),w
 16953  087F  000A               	callw
 16954  0880  3188               	pagesel	$
 16955  0881  28A1               	goto	i1l1039
 16956  0882                     i1l5479:	
 16957  0882  083E               	movf	_triac_level_now^(0+128),w
 16958  0883  390F               	andlw	15
 16959  0884  00F8               	movwf	??_TMR0_ISR
 16960  0885  3000               	movlw	0
 16961  0886  00FA               	movwf	??_TMR0_ISR+2
 16962  0887  0878               	movf	??_TMR0_ISR,w
 16963  0888  3C0F               	sublw	15
 16964  0889  00F9               	movwf	??_TMR0_ISR+1
 16965  088A  1C03               	skipc
 16966  088B  03FA               	decf	??_TMR0_ISR+2,f
 16967  088C  3001               	movlw	1
 16968  088D  00FB               	movwf	??_TMR0_ISR+3
 16969  088E  087B               	movf	??_TMR0_ISR+3,w
 16970  088F  07C5               	addwf	TMR0_ISR@tick_count^(0+128),f
 16971  0890  0845               	movf	TMR0_ISR@tick_count^(0+128),w
 16972  0891  00FC               	movwf	??_TMR0_ISR+4
 16973  0892  01FD               	clrf	??_TMR0_ISR+5
 16974  0893  087A               	movf	??_TMR0_ISR+2,w
 16975  0894  067D               	xorwf	??_TMR0_ISR+5,w
 16976  0895  1D03               	skipz
 16977  0896  2899               	goto	u456_25
 16978  0897  0879               	movf	??_TMR0_ISR+1,w
 16979  0898  067C               	xorwf	??_TMR0_ISR+4,w
 16980  0899                     u456_25:	
 16981  0899  1D03               	skipz
 16982  089A  289C               	goto	u456_21
 16983  089B  289D               	goto	u456_20
 16984  089C                     u456_21:	
 16985  089C  28A1               	goto	i1l1039
 16986  089D                     u456_20:	
 16987  089D                     i1l5481:	
 16988                           
 16989                           ;mcc_generated_files/tmr0.c: 133:     {;mcc_generated_files/tmr0.c: 134:         tick_co
      +                          unt = 0;
 16990  089D  01C5               	clrf	TMR0_ISR@tick_count^(0+128)
 16991  089E                     i1l5483:	
 16992                           
 16993                           ;mcc_generated_files/tmr0.c: 135:         TMR0_CallBack();
 16994  089E  3194  2480  3188   	fcall	_TMR0_CallBack
 16995  08A1                     i1l1039:	
 16996  08A1  0008               	return
 16997  08A2                     __end_of_TMR0_ISR:	
 16998                           
 16999                           	psect	text107
 17000  1480                     __ptext107:	
 17001 ;; *************** function _TMR0_CallBack *****************
 17002 ;; Defined at:
 17003 ;;		line 140 in file "mcc_generated_files/tmr0.c"
 17004 ;; Parameters:    Size  Location     Type
 17005 ;;		None
 17006 ;; Auto vars:     Size  Location     Type
 17007 ;;		None
 17008 ;; Return value:  Size  Location     Type
 17009 ;;                  1    wreg      void 
 17010 ;; Registers used:
 17011 ;;		wreg, status,2, status,0, pclath, cstack
 17012 ;; Tracked objects:
 17013 ;;		On entry : 0/0
 17014 ;;		On exit  : 0/0
 17015 ;;		Unchanged: 0/0
 17016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17017 ;;      Params:         0       0       0       0       0       0       0       0
 17018 ;;      Locals:         0       0       0       0       0       0       0       0
 17019 ;;      Temps:          1       0       0       0       0       0       0       0
 17020 ;;      Totals:         1       0       0       0       0       0       0       0
 17021 ;;Total ram usage:        1 bytes
 17022 ;; Hardware stack levels used:    1
 17023 ;; Hardware stack levels required when called:    1
 17024 ;; This function calls:
 17025 ;;		Absolute function
 17026 ;;		_TMR0_DefaultInterruptHandler
 17027 ;; This function is called by:
 17028 ;;		_TMR0_ISR
 17029 ;; This function uses a non-reentrant model
 17030 ;;
 17031                           
 17032                           
 17033                           ;psect for function _TMR0_CallBack
 17034  1480                     _TMR0_CallBack:	
 17035  1480                     i1l5297:	
 17036                           ;incstack = 0
 17037                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 17038                           
 17039                           
 17040                           ;mcc_generated_files/tmr0.c: 143:     INTCONbits.TMR0IE = 0;
 17041  1480  128B               	bcf	11,5	;volatile
 17042  1481                     i1l1042:	
 17043                           ;mcc_generated_files/tmr0.c: 144:     do { LATCbits.LATC3 = 1; } while(0);
 17044                           
 17045  1481  0022               	movlb	2	; select bank2
 17046  1482  158E               	bsf	14,3	;volatile
 17047  1483                     i1l5299:	
 17048                           
 17049                           ;mcc_generated_files/tmr0.c: 145:     _delay((unsigned long)((100)*(32000000/4000000.0))
      +                          );
 17050  1483  30A0               	movlw	160
 17051  1484                     u757_27:	
 17052  1484  3200               	nop2
 17053  1485  0B89               	decfsz	9,f
 17054  1486  2C84               	goto	u757_27
 17055  1487                     i1l5301:	
 17056  1487  0022               	movlb	2	; select bank2
 17057  1488  118E               	bcf	14,3	;volatile
 17058  1489                     i1l5303:	
 17059                           
 17060                           ;mcc_generated_files/tmr0.c: 147:     triac_level_now.level = triac_level.level;
 17061  1489  0020               	movlb	0	; select bank0
 17062  148A  0859               	movf	_triac_level,w
 17063  148B  390F               	andlw	15
 17064  148C  00F7               	movwf	??_TMR0_CallBack
 17065  148D  0021               	movlb	1	; select bank1
 17066  148E  083E               	movf	_triac_level_now^(0+128),w
 17067  148F  0677               	xorwf	??_TMR0_CallBack,w
 17068  1490  39F0               	andlw	-16
 17069  1491  0677               	xorwf	??_TMR0_CallBack,w
 17070  1492  00BE               	movwf	_triac_level_now^(0+128)
 17071  1493                     i1l5305:	
 17072                           
 17073                           ;mcc_generated_files/tmr0.c: 148:     if(TMR0_InterruptHandler)
 17074  1493  0858               	movf	_TMR0_InterruptHandler^(0+128),w
 17075  1494  0459               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 17076  1495  1903               	btfsc	3,2
 17077  1496  2C98               	goto	u431_21
 17078  1497  2C99               	goto	u431_20
 17079  1498                     u431_21:	
 17080  1498  2C9E               	goto	i1l1047
 17081  1499                     u431_20:	
 17082  1499                     i1l5307:	
 17083                           
 17084                           ;mcc_generated_files/tmr0.c: 149:     {;mcc_generated_files/tmr0.c: 150:         TMR0_In
      +                          terruptHandler();
 17085  1499  0859               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 17086  149A  008A               	movwf	10
 17087  149B  0858               	movf	_TMR0_InterruptHandler^(0+128),w
 17088  149C  000A               	callw
 17089  149D  3194               	pagesel	$
 17090  149E                     i1l1047:	
 17091  149E  0008               	return
 17092  149F                     __end_of_TMR0_CallBack:	
 17093                           
 17094                           	psect	text108
 17095  10AF                     __ptext108:	
 17096 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17097 ;; Defined at:
 17098 ;;		line 158 in file "mcc_generated_files/tmr0.c"
 17099 ;; Parameters:    Size  Location     Type
 17100 ;;		None
 17101 ;; Auto vars:     Size  Location     Type
 17102 ;;		None
 17103 ;; Return value:  Size  Location     Type
 17104 ;;                  1    wreg      void 
 17105 ;; Registers used:
 17106 ;;		None
 17107 ;; Tracked objects:
 17108 ;;		On entry : 0/0
 17109 ;;		On exit  : 0/0
 17110 ;;		Unchanged: 0/0
 17111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17112 ;;      Params:         0       0       0       0       0       0       0       0
 17113 ;;      Locals:         0       0       0       0       0       0       0       0
 17114 ;;      Temps:          0       0       0       0       0       0       0       0
 17115 ;;      Totals:         0       0       0       0       0       0       0       0
 17116 ;;Total ram usage:        0 bytes
 17117 ;; Hardware stack levels used:    1
 17118 ;; This function calls:
 17119 ;;		Nothing
 17120 ;; This function is called by:
 17121 ;;		_TMR0_Initialize
 17122 ;;		_TMR0_CallBack
 17123 ;;		_TMR0_ISR
 17124 ;; This function uses a non-reentrant model
 17125 ;;
 17126                           
 17127                           
 17128                           ;psect for function _TMR0_DefaultInterruptHandler
 17129  10AF                     _TMR0_DefaultInterruptHandler:	
 17130  10AF                     i1l1053:	
 17131                           ;incstack = 0
 17132                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 17133                           
 17134  10AF  0008               	return
 17135  10B0                     __end_of_TMR0_DefaultInterruptHandler:	
 17136                           
 17137                           	psect	text109
 17138  17C3                     __ptext109:	
 17139 ;; *************** function _EUSART_Receive_ISR *****************
 17140 ;; Defined at:
 17141 ;;		line 213 in file "mcc_generated_files/eusart.c"
 17142 ;; Parameters:    Size  Location     Type
 17143 ;;		None
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;		None
 17146 ;; Return value:  Size  Location     Type
 17147 ;;                  1    wreg      void 
 17148 ;; Registers used:
 17149 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17150 ;; Tracked objects:
 17151 ;;		On entry : 0/0
 17152 ;;		On exit  : 0/0
 17153 ;;		Unchanged: 0/0
 17154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17155 ;;      Params:         0       0       0       0       0       0       0       0
 17156 ;;      Locals:         0       0       0       0       0       0       0       0
 17157 ;;      Temps:          0       0       0       0       0       0       0       0
 17158 ;;      Totals:         0       0       0       0       0       0       0       0
 17159 ;;Total ram usage:        0 bytes
 17160 ;; Hardware stack levels used:    1
 17161 ;; Hardware stack levels required when called:    2
 17162 ;; This function calls:
 17163 ;;		Absolute function
 17164 ;;		_EUSART_DefaultErrorHandler
 17165 ;;		_EUSART_DefaultFramingErrorHandler
 17166 ;;		_EUSART_DefaultOverrunErrorHandler
 17167 ;;		_EUSART_RxDataHandler
 17168 ;; This function is called by:
 17169 ;;		_EUSART_Initialize
 17170 ;;		_ReceivedMessage
 17171 ;;		_INTERRUPT_InterruptManager
 17172 ;; This function uses a non-reentrant model
 17173 ;;
 17174                           
 17175                           
 17176                           ;psect for function _EUSART_Receive_ISR
 17177  17C3                     _EUSART_Receive_ISR:	
 17178  17C3                     i1l5215:	
 17179                           ;incstack = 0
 17180                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17181                           
 17182                           
 17183                           ;mcc_generated_files/eusart.c: 216:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 17184  17C3  0020               	movlb	0	; select bank0
 17185  17C4  086A               	movf	_eusartRxHead,w	;volatile
 17186  17C5  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 17187  17C6  0086               	movwf	6
 17188  17C7  0187               	clrf	7
 17189  17C8  0181               	clrf	1
 17190  17C9                     i1l5217:	
 17191                           
 17192                           ;mcc_generated_files/eusart.c: 218:     if(RCSTAbits.FERR){
 17193  17C9  0023               	movlb	3	; select bank3
 17194  17CA  1D1D               	btfss	29,2	;volatile
 17195  17CB  2FCD               	goto	u427_21
 17196  17CC  2FCE               	goto	u427_20
 17197  17CD                     u427_21:	
 17198  17CD  2FDA               	goto	i1l5223
 17199  17CE                     u427_20:	
 17200  17CE                     i1l5219:	
 17201                           
 17202                           ;mcc_generated_files/eusart.c: 219:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 17203  17CE  0020               	movlb	0	; select bank0
 17204  17CF  086A               	movf	_eusartRxHead,w	;volatile
 17205  17D0  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 17206  17D1  0086               	movwf	6
 17207  17D2  0187               	clrf	7
 17208  17D3  1481               	bsf	1,1
 17209  17D4                     i1l5221:	
 17210                           
 17211                           ;mcc_generated_files/eusart.c: 220:         EUSART_FramingErrorHandler();
 17212  17D4  0021               	movlb	1	; select bank1
 17213  17D5  085D               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 17214  17D6  008A               	movwf	10
 17215  17D7  085C               	movf	_EUSART_FramingErrorHandler^(0+128),w
 17216  17D8  000A               	callw
 17217  17D9  3197               	pagesel	$
 17218  17DA                     i1l5223:	
 17219                           
 17220                           ;mcc_generated_files/eusart.c: 223:     if(RCSTAbits.OERR){
 17221  17DA  0023               	movlb	3	; select bank3
 17222  17DB  1C9D               	btfss	29,1	;volatile
 17223  17DC  2FDE               	goto	u428_21
 17224  17DD  2FDF               	goto	u428_20
 17225  17DE                     u428_21:	
 17226  17DE  2FEB               	goto	i1l5229
 17227  17DF                     u428_20:	
 17228  17DF                     i1l5225:	
 17229                           
 17230                           ;mcc_generated_files/eusart.c: 224:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 17231  17DF  0020               	movlb	0	; select bank0
 17232  17E0  086A               	movf	_eusartRxHead,w	;volatile
 17233  17E1  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 17234  17E2  0086               	movwf	6
 17235  17E3  0187               	clrf	7
 17236  17E4  1501               	bsf	1,2
 17237  17E5                     i1l5227:	
 17238                           
 17239                           ;mcc_generated_files/eusart.c: 225:         EUSART_OverrunErrorHandler();
 17240  17E5  0022               	movlb	2	; select bank2
 17241  17E6  086E               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 17242  17E7  008A               	movwf	10
 17243  17E8  086D               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 17244  17E9  000A               	callw
 17245  17EA  3197               	pagesel	$
 17246  17EB                     i1l5229:	
 17247                           
 17248                           ;mcc_generated_files/eusart.c: 228:     if(eusartRxStatusBuffer[eusartRxHead].status){
 17249  17EB  0020               	movlb	0	; select bank0
 17250  17EC  086A               	movf	_eusartRxHead,w	;volatile
 17251  17ED  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 17252  17EE  0086               	movwf	6
 17253  17EF  0187               	clrf	7
 17254  17F0  0801               	movf	1,w
 17255  17F1  1903               	btfsc	3,2
 17256  17F2  2FF4               	goto	u429_21
 17257  17F3  2FF5               	goto	u429_20
 17258  17F4                     u429_21:	
 17259  17F4  2FFC               	goto	i1l5233
 17260  17F5                     u429_20:	
 17261  17F5                     i1l5231:	
 17262                           
 17263                           ;mcc_generated_files/eusart.c: 229:         EUSART_ErrorHandler();
 17264  17F5  0022               	movlb	2	; select bank2
 17265  17F6  086C               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 17266  17F7  008A               	movwf	10
 17267  17F8  086B               	movf	_EUSART_ErrorHandler^(0+256),w
 17268  17F9  000A               	callw
 17269  17FA  3197               	pagesel	$
 17270                           
 17271                           ;mcc_generated_files/eusart.c: 230:     } else {
 17272  17FB  2FFF               	goto	i1l758
 17273  17FC                     i1l5233:	
 17274                           
 17275                           ;mcc_generated_files/eusart.c: 231:         EUSART_RxDataHandler();
 17276  17FC  3193  2339  3197   	fcall	_EUSART_RxDataHandler
 17277  17FF                     i1l758:	
 17278  17FF  0008               	return
 17279  1800                     __end_of_EUSART_Receive_ISR:	
 17280                           
 17281                           	psect	text110
 17282  1789                     __ptext110:	
 17283 ;; *************** function _ReceivedMessage *****************
 17284 ;; Defined at:
 17285 ;;		line 28 in file "uart.c"
 17286 ;; Parameters:    Size  Location     Type
 17287 ;;		None
 17288 ;; Auto vars:     Size  Location     Type
 17289 ;;  readByte        1    3[COMMON] unsigned char 
 17290 ;; Return value:  Size  Location     Type
 17291 ;;                  1    wreg      void 
 17292 ;; Registers used:
 17293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17294 ;; Tracked objects:
 17295 ;;		On entry : 0/0
 17296 ;;		On exit  : 0/0
 17297 ;;		Unchanged: 0/0
 17298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17299 ;;      Params:         0       0       0       0       0       0       0       0
 17300 ;;      Locals:         1       0       0       0       0       0       0       0
 17301 ;;      Temps:          1       0       0       0       0       0       0       0
 17302 ;;      Totals:         2       0       0       0       0       0       0       0
 17303 ;;Total ram usage:        2 bytes
 17304 ;; Hardware stack levels used:    1
 17305 ;; Hardware stack levels required when called:    3
 17306 ;; This function calls:
 17307 ;;		_EUSART_Read
 17308 ;;		_EUSART_Receive_ISR
 17309 ;;		_EUSART_is_rx_ready
 17310 ;; This function is called by:
 17311 ;;		_INIT_SMART_LIGHT
 17312 ;;		_INTERRUPT_InterruptManager
 17313 ;; This function uses a non-reentrant model
 17314 ;;
 17315                           
 17316                           
 17317                           ;psect for function _ReceivedMessage
 17318  1789                     _ReceivedMessage:	
 17319  1789                     i1l5663:	
 17320                           ;incstack = 0
 17321                           ; Regs used in _ReceivedMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17322                           
 17323                           
 17324                           ;uart.c: 30:     uart[SML].RxDefaultISR();
 17325  1789  303A               	movlw	low ((_uart+10)| (0+32768))
 17326  178A  0084               	movwf	4
 17327  178B  3098               	movlw	high ((_uart+10)| (0+32768))
 17328  178C  0085               	movwf	5
 17329  178D  3F01               	moviw [1]fsr0
 17330  178E  008A               	movwf	10
 17331  178F  3F00               	moviw [0]fsr0
 17332  1790  000A               	callw
 17333  1791  3197               	pagesel	$
 17334                           
 17335                           ;uart.c: 31:     while (!uart[SML].DataReady()) {
 17336  1792  2F94               	goto	i1l5665
 17337  1793                     i1l1439:	
 17338                           
 17339                           ;uart.c: 32:         __nop();
 17340  1793  0000               	nop
 17341  1794                     i1l5665:	
 17342                           
 17343                           ;uart.c: 31:     while (!uart[SML].DataReady()) {
 17344  1794  3036               	movlw	low ((_uart+6)| (0+32768))
 17345  1795  0084               	movwf	4
 17346  1796  3098               	movlw	high ((_uart+6)| (0+32768))
 17347  1797  0085               	movwf	5
 17348  1798  3F01               	moviw [1]fsr0
 17349  1799  008A               	movwf	10
 17350  179A  3F00               	moviw [0]fsr0
 17351  179B  000A               	callw
 17352  179C  3197               	pagesel	$
 17353  179D  3A00               	xorlw	0
 17354  179E  1903               	skipnz
 17355  179F  2FA1               	goto	u480_21
 17356  17A0  2FA2               	goto	u480_20
 17357  17A1                     u480_21:	
 17358  17A1  2F93               	goto	i1l1439
 17359  17A2                     u480_20:	
 17360  17A2                     i1l5667:	
 17361                           
 17362                           ;uart.c: 34:     uint8_t readByte = uart[SML].Read();
 17363  17A2  3030               	movlw	low (_uart| (0+32768))
 17364  17A3  0084               	movwf	4
 17365  17A4  3098               	movlw	high (_uart| (0+32768))
 17366  17A5  0085               	movwf	5
 17367  17A6  3F01               	moviw [1]fsr0
 17368  17A7  008A               	movwf	10
 17369  17A8  3F00               	moviw [0]fsr0
 17370  17A9  000A               	callw
 17371  17AA  3197               	pagesel	$
 17372  17AB  00F9               	movwf	??_ReceivedMessage
 17373  17AC  0879               	movf	??_ReceivedMessage,w
 17374  17AD  00FA               	movwf	ReceivedMessage@readByte
 17375  17AE                     i1l5669:	
 17376                           
 17377                           ;uart.c: 35:     if ((ResponseIndex < 64) )
 17378  17AE  3040               	movlw	64
 17379  17AF  0020               	movlb	0	; select bank0
 17380  17B0  0260               	subwf	_ResponseIndex,w
 17381  17B1  1803               	skipnc
 17382  17B2  2FB4               	goto	u481_21
 17383  17B3  2FB5               	goto	u481_20
 17384  17B4                     u481_21:	
 17385  17B4  2FC2               	goto	i1l1442
 17386  17B5                     u481_20:	
 17387  17B5                     i1l5671:	
 17388                           
 17389                           ;uart.c: 36:         ResponseBuffer[ResponseIndex++] = readByte;
 17390  17B5  087A               	movf	ReceivedMessage@readByte,w
 17391  17B6  00F9               	movwf	??_ReceivedMessage
 17392  17B7  0860               	movf	_ResponseIndex,w
 17393  17B8  3EA0               	addlw	(low (_ResponseBuffer| (0+256)))& (0+255)
 17394  17B9  0086               	movwf	6
 17395  17BA  3001               	movlw	1	; select bank3/4
 17396  17BB  0087               	movwf	7
 17397  17BC  0879               	movf	??_ReceivedMessage,w
 17398  17BD  0081               	movwf	1
 17399  17BE                     i1l5673:	
 17400  17BE  3001               	movlw	1
 17401  17BF  00F9               	movwf	??_ReceivedMessage
 17402  17C0  0879               	movf	??_ReceivedMessage,w
 17403  17C1  07E0               	addwf	_ResponseIndex,f
 17404  17C2                     i1l1442:	
 17405  17C2  0008               	return
 17406  17C3                     __end_of_ReceivedMessage:	
 17407                           
 17408                           	psect	text111
 17409  10B4                     __ptext111:	
 17410 ;; *************** function _EUSART_is_rx_ready *****************
 17411 ;; Defined at:
 17412 ;;		line 134 in file "mcc_generated_files/eusart.c"
 17413 ;; Parameters:    Size  Location     Type
 17414 ;;		None
 17415 ;; Auto vars:     Size  Location     Type
 17416 ;;		None
 17417 ;; Return value:  Size  Location     Type
 17418 ;;                  1    wreg      unsigned char 
 17419 ;; Registers used:
 17420 ;;		wreg
 17421 ;; Tracked objects:
 17422 ;;		On entry : 0/0
 17423 ;;		On exit  : 0/0
 17424 ;;		Unchanged: 0/0
 17425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17426 ;;      Params:         0       0       0       0       0       0       0       0
 17427 ;;      Locals:         0       0       0       0       0       0       0       0
 17428 ;;      Temps:          0       0       0       0       0       0       0       0
 17429 ;;      Totals:         0       0       0       0       0       0       0       0
 17430 ;;Total ram usage:        0 bytes
 17431 ;; Hardware stack levels used:    1
 17432 ;; This function calls:
 17433 ;;		Nothing
 17434 ;; This function is called by:
 17435 ;;		_ReceivedMessage
 17436 ;; This function uses a non-reentrant model
 17437 ;;
 17438                           
 17439                           
 17440                           ;psect for function _EUSART_is_rx_ready
 17441  10B4                     _EUSART_is_rx_ready:	
 17442  10B4                     i1l5189:	
 17443                           ;incstack = 0
 17444                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 17445                           
 17446                           
 17447                           ;mcc_generated_files/eusart.c: 136:     return eusartRxCount;
 17448  10B4  0874               	movf	_eusartRxCount,w	;volatile
 17449  10B5                     i1l723:	
 17450  10B5  0008               	return
 17451  10B6                     __end_of_EUSART_is_rx_ready:	
 17452                           
 17453                           	psect	text112
 17454  10D1                     __ptext112:	
 17455 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 17456 ;; Defined at:
 17457 ;;		line 249 in file "mcc_generated_files/eusart.c"
 17458 ;; Parameters:    Size  Location     Type
 17459 ;;		None
 17460 ;; Auto vars:     Size  Location     Type
 17461 ;;		None
 17462 ;; Return value:  Size  Location     Type
 17463 ;;                  1    wreg      void 
 17464 ;; Registers used:
 17465 ;;		None
 17466 ;; Tracked objects:
 17467 ;;		On entry : 0/0
 17468 ;;		On exit  : 0/0
 17469 ;;		Unchanged: 0/0
 17470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17471 ;;      Params:         0       0       0       0       0       0       0       0
 17472 ;;      Locals:         0       0       0       0       0       0       0       0
 17473 ;;      Temps:          0       0       0       0       0       0       0       0
 17474 ;;      Totals:         0       0       0       0       0       0       0       0
 17475 ;;Total ram usage:        0 bytes
 17476 ;; Hardware stack levels used:    1
 17477 ;; This function calls:
 17478 ;;		Nothing
 17479 ;; This function is called by:
 17480 ;;		_EUSART_Initialize
 17481 ;;		_EUSART_Receive_ISR
 17482 ;; This function uses a non-reentrant model
 17483 ;;
 17484                           
 17485                           
 17486                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 17487  10D1                     _EUSART_DefaultOverrunErrorHandler:	
 17488  10D1                     i1l5101:	
 17489                           ;incstack = 0
 17490                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 17491                           
 17492                           
 17493                           ;mcc_generated_files/eusart.c: 252:     RCSTAbits.CREN = 0;
 17494  10D1  0023               	movlb	3	; select bank3
 17495  10D2  121D               	bcf	29,4	;volatile
 17496                           
 17497                           ;mcc_generated_files/eusart.c: 253:     RCSTAbits.CREN = 1;
 17498  10D3  161D               	bsf	29,4	;volatile
 17499  10D4                     i1l768:	
 17500  10D4  0008               	return
 17501  10D5                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 17502                           
 17503                           	psect	text113
 17504  10AE                     __ptext113:	
 17505 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 17506 ;; Defined at:
 17507 ;;		line 247 in file "mcc_generated_files/eusart.c"
 17508 ;; Parameters:    Size  Location     Type
 17509 ;;		None
 17510 ;; Auto vars:     Size  Location     Type
 17511 ;;		None
 17512 ;; Return value:  Size  Location     Type
 17513 ;;                  1    wreg      void 
 17514 ;; Registers used:
 17515 ;;		None
 17516 ;; Tracked objects:
 17517 ;;		On entry : 0/0
 17518 ;;		On exit  : 0/0
 17519 ;;		Unchanged: 0/0
 17520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17521 ;;      Params:         0       0       0       0       0       0       0       0
 17522 ;;      Locals:         0       0       0       0       0       0       0       0
 17523 ;;      Temps:          0       0       0       0       0       0       0       0
 17524 ;;      Totals:         0       0       0       0       0       0       0       0
 17525 ;;Total ram usage:        0 bytes
 17526 ;; Hardware stack levels used:    1
 17527 ;; This function calls:
 17528 ;;		Nothing
 17529 ;; This function is called by:
 17530 ;;		_EUSART_Initialize
 17531 ;;		_EUSART_Receive_ISR
 17532 ;; This function uses a non-reentrant model
 17533 ;;
 17534                           
 17535                           
 17536                           ;psect for function _EUSART_DefaultFramingErrorHandler
 17537  10AE                     _EUSART_DefaultFramingErrorHandler:	
 17538  10AE                     i1l765:	
 17539                           ;incstack = 0
 17540                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 17541                           
 17542  10AE  0008               	return
 17543  10AF                     __end_of_EUSART_DefaultFramingErrorHandler:	
 17544                           
 17545                           	psect	text114
 17546  10CD                     __ptext114:	
 17547 ;; *************** function _EUSART_DefaultErrorHandler *****************
 17548 ;; Defined at:
 17549 ;;		line 257 in file "mcc_generated_files/eusart.c"
 17550 ;; Parameters:    Size  Location     Type
 17551 ;;		None
 17552 ;; Auto vars:     Size  Location     Type
 17553 ;;		None
 17554 ;; Return value:  Size  Location     Type
 17555 ;;                  1    wreg      void 
 17556 ;; Registers used:
 17557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17558 ;; Tracked objects:
 17559 ;;		On entry : 0/0
 17560 ;;		On exit  : 0/0
 17561 ;;		Unchanged: 0/0
 17562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17563 ;;      Params:         0       0       0       0       0       0       0       0
 17564 ;;      Locals:         0       0       0       0       0       0       0       0
 17565 ;;      Temps:          0       0       0       0       0       0       0       0
 17566 ;;      Totals:         0       0       0       0       0       0       0       0
 17567 ;;Total ram usage:        0 bytes
 17568 ;; Hardware stack levels used:    1
 17569 ;; Hardware stack levels required when called:    1
 17570 ;; This function calls:
 17571 ;;		_EUSART_RxDataHandler
 17572 ;; This function is called by:
 17573 ;;		_EUSART_Initialize
 17574 ;;		_EUSART_Receive_ISR
 17575 ;; This function uses a non-reentrant model
 17576 ;;
 17577                           
 17578                           
 17579                           ;psect for function _EUSART_DefaultErrorHandler
 17580  10CD                     _EUSART_DefaultErrorHandler:	
 17581  10CD                     i1l5103:	
 17582                           ;incstack = 0
 17583                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17584                           
 17585                           
 17586                           ;mcc_generated_files/eusart.c: 258:     EUSART_RxDataHandler();
 17587  10CD  3193  2339  3190   	fcall	_EUSART_RxDataHandler
 17588  10D0                     i1l771:	
 17589  10D0  0008               	return
 17590  10D1                     __end_of_EUSART_DefaultErrorHandler:	
 17591                           
 17592                           	psect	text115
 17593  1339                     __ptext115:	
 17594 ;; *************** function _EUSART_RxDataHandler *****************
 17595 ;; Defined at:
 17596 ;;		line 237 in file "mcc_generated_files/eusart.c"
 17597 ;; Parameters:    Size  Location     Type
 17598 ;;		None
 17599 ;; Auto vars:     Size  Location     Type
 17600 ;;		None
 17601 ;; Return value:  Size  Location     Type
 17602 ;;                  1    wreg      void 
 17603 ;; Registers used:
 17604 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17605 ;; Tracked objects:
 17606 ;;		On entry : 0/0
 17607 ;;		On exit  : 0/0
 17608 ;;		Unchanged: 0/0
 17609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17610 ;;      Params:         0       0       0       0       0       0       0       0
 17611 ;;      Locals:         0       0       0       0       0       0       0       0
 17612 ;;      Temps:          1       0       0       0       0       0       0       0
 17613 ;;      Totals:         1       0       0       0       0       0       0       0
 17614 ;;Total ram usage:        1 bytes
 17615 ;; Hardware stack levels used:    1
 17616 ;; This function calls:
 17617 ;;		Nothing
 17618 ;; This function is called by:
 17619 ;;		_EUSART_Receive_ISR
 17620 ;;		_EUSART_DefaultErrorHandler
 17621 ;; This function uses a non-reentrant model
 17622 ;;
 17623                           
 17624                           
 17625                           ;psect for function _EUSART_RxDataHandler
 17626  1339                     _EUSART_RxDataHandler:	
 17627  1339                     i1l4961:	
 17628                           ;incstack = 0
 17629                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 17630                           
 17631                           
 17632                           ;mcc_generated_files/eusart.c: 239:     eusartRxBuffer[eusartRxHead++] = RCREG;
 17633  1339  0023               	movlb	3	; select bank3
 17634  133A  0819               	movf	25,w	;volatile
 17635  133B  00F7               	movwf	??_EUSART_RxDataHandler
 17636  133C  0020               	movlb	0	; select bank0
 17637  133D  086A               	movf	_eusartRxHead,w
 17638  133E  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 17639  133F  0086               	movwf	6
 17640  1340  0187               	clrf	7
 17641  1341  0877               	movf	??_EUSART_RxDataHandler,w
 17642  1342  0081               	movwf	1
 17643  1343                     i1l4963:	
 17644  1343  3001               	movlw	1
 17645  1344  00F7               	movwf	??_EUSART_RxDataHandler
 17646  1345  0877               	movf	??_EUSART_RxDataHandler,w
 17647  1346  07EA               	addwf	_eusartRxHead,f	;volatile
 17648  1347                     i1l4965:	
 17649                           
 17650                           ;mcc_generated_files/eusart.c: 240:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 17651  1347  3008               	movlw	8
 17652  1348  026A               	subwf	_eusartRxHead,w	;volatile
 17653  1349  1C03               	skipc
 17654  134A  2B4C               	goto	u404_21
 17655  134B  2B4D               	goto	u404_20
 17656  134C                     u404_21:	
 17657  134C  2B4E               	goto	i1l4969
 17658  134D                     u404_20:	
 17659  134D                     i1l4967:	
 17660                           
 17661                           ;mcc_generated_files/eusart.c: 241:     {;mcc_generated_files/eusart.c: 242:         eus
      +                          artRxHead = 0;
 17662  134D  01EA               	clrf	_eusartRxHead	;volatile
 17663  134E                     i1l4969:	
 17664                           
 17665                           ;mcc_generated_files/eusart.c: 244:     eusartRxCount++;
 17666  134E  3001               	movlw	1
 17667  134F  00F7               	movwf	??_EUSART_RxDataHandler
 17668  1350  0877               	movf	??_EUSART_RxDataHandler,w
 17669  1351  07F4               	addwf	_eusartRxCount,f	;volatile
 17670  1352                     i1l762:	
 17671  1352  0008               	return
 17672  1353                     __end_of_EUSART_RxDataHandler:	
 17673                           
 17674                           	psect	text116
 17675  15C6                     __ptext116:	
 17676 ;; *************** function _EUSART_Read *****************
 17677 ;; Defined at:
 17678 ;;		line 148 in file "mcc_generated_files/eusart.c"
 17679 ;; Parameters:    Size  Location     Type
 17680 ;;		None
 17681 ;; Auto vars:     Size  Location     Type
 17682 ;;  readValue       1    1[COMMON] unsigned char 
 17683 ;; Return value:  Size  Location     Type
 17684 ;;                  1    wreg      unsigned char 
 17685 ;; Registers used:
 17686 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17692 ;;      Params:         0       0       0       0       0       0       0       0
 17693 ;;      Locals:         1       0       0       0       0       0       0       0
 17694 ;;      Temps:          1       0       0       0       0       0       0       0
 17695 ;;      Totals:         2       0       0       0       0       0       0       0
 17696 ;;Total ram usage:        2 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; This function calls:
 17699 ;;		Nothing
 17700 ;; This function is called by:
 17701 ;;		_ReceivedMessage
 17702 ;; This function uses a non-reentrant model
 17703 ;;
 17704                           
 17705                           
 17706                           ;psect for function _EUSART_Read
 17707  15C6                     _EUSART_Read:	
 17708  15C6                     i1l5193:	
 17709                           ;incstack = 0
 17710                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 17711                           
 17712  15C6                     i1l5195:	
 17713                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 17714                           
 17715                           
 17716                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 17717  15C6  0874               	movf	_eusartRxCount,w	;volatile
 17718  15C7  1903               	btfsc	3,2
 17719  15C8  2DCA               	goto	u425_21
 17720  15C9  2DCB               	goto	u425_20
 17721  15CA                     u425_21:	
 17722  15CA  2DC6               	goto	i1l5195
 17723  15CB                     u425_20:	
 17724  15CB                     i1l5197:	
 17725                           
 17726                           ;mcc_generated_files/eusart.c: 156:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 17727  15CB  0875               	movf	_eusartRxTail,w	;volatile
 17728  15CC  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 17729  15CD  0086               	movwf	6
 17730  15CE  0187               	clrf	7
 17731  15CF  0801               	movf	1,w
 17732  15D0  00F7               	movwf	??_EUSART_Read
 17733  15D1  0877               	movf	??_EUSART_Read,w
 17734  15D2  0021               	movlb	1	; select bank1
 17735  15D3  00CB               	movwf	_eusartRxLastError^(0+128)	;volatile
 17736                           
 17737                           ;mcc_generated_files/eusart.c: 158:     readValue = eusartRxBuffer[eusartRxTail++];
 17738  15D4  0875               	movf	_eusartRxTail,w
 17739  15D5  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 17740  15D6  0086               	movwf	6
 17741  15D7  0187               	clrf	7
 17742  15D8  0801               	movf	1,w
 17743  15D9  00F7               	movwf	??_EUSART_Read
 17744  15DA  0877               	movf	??_EUSART_Read,w
 17745  15DB  00F8               	movwf	EUSART_Read@readValue
 17746  15DC                     i1l5199:	
 17747  15DC  3001               	movlw	1
 17748  15DD  00F7               	movwf	??_EUSART_Read
 17749  15DE  0877               	movf	??_EUSART_Read,w
 17750  15DF  07F5               	addwf	_eusartRxTail,f	;volatile
 17751  15E0                     i1l5201:	
 17752                           
 17753                           ;mcc_generated_files/eusart.c: 159:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 17754  15E0  3008               	movlw	8
 17755  15E1  0275               	subwf	_eusartRxTail,w	;volatile
 17756  15E2  1C03               	skipc
 17757  15E3  2DE5               	goto	u426_21
 17758  15E4  2DE6               	goto	u426_20
 17759  15E5                     u426_21:	
 17760  15E5  2DE7               	goto	i1l5205
 17761  15E6                     u426_20:	
 17762  15E6                     i1l5203:	
 17763                           
 17764                           ;mcc_generated_files/eusart.c: 160:     {;mcc_generated_files/eusart.c: 161:         eus
      +                          artRxTail = 0;
 17765  15E6  01F5               	clrf	_eusartRxTail	;volatile
 17766  15E7                     i1l5205:	
 17767                           
 17768                           ;mcc_generated_files/eusart.c: 163:     PIE1bits.RCIE = 0;
 17769  15E7  1291               	bcf	17,5	;volatile
 17770  15E8                     i1l5207:	
 17771                           
 17772                           ;mcc_generated_files/eusart.c: 164:     eusartRxCount--;
 17773  15E8  3001               	movlw	1
 17774  15E9  02F4               	subwf	_eusartRxCount,f	;volatile
 17775  15EA                     i1l5209:	
 17776                           
 17777                           ;mcc_generated_files/eusart.c: 165:     PIE1bits.RCIE = 1;
 17778  15EA  1691               	bsf	17,5	;volatile
 17779  15EB                     i1l5211:	
 17780                           
 17781                           ;mcc_generated_files/eusart.c: 167:     return readValue;
 17782  15EB  0878               	movf	EUSART_Read@readValue,w
 17783  15EC                     i1l736:	
 17784  15EC  0008               	return
 17785  15ED                     __end_of_EUSART_Read:	
 17786                           
 17787                           	psect	text117
 17788  10E1                     __ptext117:	
 17789 ;; *************** function _INT_ISR *****************
 17790 ;; Defined at:
 17791 ;;		line 39 in file "mcc_generated_files/ext_int.c"
 17792 ;; Parameters:    Size  Location     Type
 17793 ;;		None
 17794 ;; Auto vars:     Size  Location     Type
 17795 ;;		None
 17796 ;; Return value:  Size  Location     Type
 17797 ;;                  1    wreg      void 
 17798 ;; Registers used:
 17799 ;;		wreg, status,2, status,0, pclath, cstack
 17800 ;; Tracked objects:
 17801 ;;		On entry : 0/0
 17802 ;;		On exit  : 0/0
 17803 ;;		Unchanged: 0/0
 17804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17805 ;;      Params:         0       0       0       0       0       0       0       0
 17806 ;;      Locals:         0       0       0       0       0       0       0       0
 17807 ;;      Temps:          0       0       0       0       0       0       0       0
 17808 ;;      Totals:         0       0       0       0       0       0       0       0
 17809 ;;Total ram usage:        0 bytes
 17810 ;; Hardware stack levels used:    1
 17811 ;; Hardware stack levels required when called:    2
 17812 ;; This function calls:
 17813 ;;		_INT_CallBack
 17814 ;; This function is called by:
 17815 ;;		_INTERRUPT_InterruptManager
 17816 ;; This function uses a non-reentrant model
 17817 ;;
 17818                           
 17819                           
 17820                           ;psect for function _INT_ISR
 17821  10E1                     _INT_ISR:	
 17822  10E1                     i1l5457:	
 17823                           ;incstack = 0
 17824                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 17825                           
 17826                           
 17827                           ;mcc_generated_files/ext_int.c: 41:     (INTCONbits.INTF = 0);
 17828  10E1  108B               	bcf	11,1	;volatile
 17829  10E2                     i1l5459:	
 17830                           
 17831                           ;mcc_generated_files/ext_int.c: 44:     INT_CallBack();
 17832  10E2  3192  2224  3190   	fcall	_INT_CallBack
 17833  10E5                     i1l877:	
 17834  10E5  0008               	return
 17835  10E6                     __end_of_INT_ISR:	
 17836                           
 17837                           	psect	text118
 17838  1224                     __ptext118:	
 17839 ;; *************** function _INT_CallBack *****************
 17840 ;; Defined at:
 17841 ;;		line 48 in file "mcc_generated_files/ext_int.c"
 17842 ;; Parameters:    Size  Location     Type
 17843 ;;		None
 17844 ;; Auto vars:     Size  Location     Type
 17845 ;;		None
 17846 ;; Return value:  Size  Location     Type
 17847 ;;                  1    wreg      void 
 17848 ;; Registers used:
 17849 ;;		wreg, status,2, status,0, pclath, cstack
 17850 ;; Tracked objects:
 17851 ;;		On entry : 0/0
 17852 ;;		On exit  : 0/0
 17853 ;;		Unchanged: 0/0
 17854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17855 ;;      Params:         0       0       0       0       0       0       0       0
 17856 ;;      Locals:         0       0       0       0       0       0       0       0
 17857 ;;      Temps:          0       0       0       0       0       0       0       0
 17858 ;;      Totals:         0       0       0       0       0       0       0       0
 17859 ;;Total ram usage:        0 bytes
 17860 ;; Hardware stack levels used:    1
 17861 ;; Hardware stack levels required when called:    1
 17862 ;; This function calls:
 17863 ;;		Absolute function
 17864 ;;		_INT_DefaultInterruptHandler
 17865 ;; This function is called by:
 17866 ;;		_INT_ISR
 17867 ;; This function uses a non-reentrant model
 17868 ;;
 17869                           
 17870                           
 17871                           ;psect for function _INT_CallBack
 17872  1224                     _INT_CallBack:	
 17873  1224                     i1l5243:	
 17874                           ;incstack = 0
 17875                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 17876                           
 17877                           
 17878                           ;mcc_generated_files/ext_int.c: 60:     TMR0 = 0xF0;
 17879  1224  30F0               	movlw	240
 17880  1225  0020               	movlb	0	; select bank0
 17881  1226  0095               	movwf	21	;volatile
 17882  1227                     i1l5245:	
 17883                           
 17884                           ;mcc_generated_files/ext_int.c: 61:     INTCONbits.TMR0IF = 0;
 17885  1227  110B               	bcf	11,2	;volatile
 17886  1228                     i1l5247:	
 17887                           
 17888                           ;mcc_generated_files/ext_int.c: 62:     INTCONbits.TMR0IE = 1;
 17889  1228  168B               	bsf	11,5	;volatile
 17890  1229                     i1l5249:	
 17891                           
 17892                           ;mcc_generated_files/ext_int.c: 63:     if(INT_InterruptHandler)
 17893  1229  0021               	movlb	1	; select bank1
 17894  122A  085A               	movf	_INT_InterruptHandler^(0+128),w
 17895  122B  045B               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 17896  122C  1903               	btfsc	3,2
 17897  122D  2A2F               	goto	u430_21
 17898  122E  2A30               	goto	u430_20
 17899  122F                     u430_21:	
 17900  122F  2A35               	goto	i1l881
 17901  1230                     u430_20:	
 17902  1230                     i1l5251:	
 17903                           
 17904                           ;mcc_generated_files/ext_int.c: 64:     {;mcc_generated_files/ext_int.c: 65:         INT
      +                          _InterruptHandler();
 17905  1230  085B               	movf	(_INT_InterruptHandler+1)^(0+128),w
 17906  1231  008A               	movwf	10
 17907  1232  085A               	movf	_INT_InterruptHandler^(0+128),w
 17908  1233  000A               	callw
 17909  1234  3192               	pagesel	$
 17910  1235                     i1l881:	
 17911  1235  0008               	return
 17912  1236                     __end_of_INT_CallBack:	
 17913                           
 17914                           	psect	text119
 17915  10AD                     __ptext119:	
 17916 ;; *************** function _INT_DefaultInterruptHandler *****************
 17917 ;; Defined at:
 17918 ;;		line 73 in file "mcc_generated_files/ext_int.c"
 17919 ;; Parameters:    Size  Location     Type
 17920 ;;		None
 17921 ;; Auto vars:     Size  Location     Type
 17922 ;;		None
 17923 ;; Return value:  Size  Location     Type
 17924 ;;                  1    wreg      void 
 17925 ;; Registers used:
 17926 ;;		None
 17927 ;; Tracked objects:
 17928 ;;		On entry : 0/0
 17929 ;;		On exit  : 0/0
 17930 ;;		Unchanged: 0/0
 17931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17932 ;;      Params:         0       0       0       0       0       0       0       0
 17933 ;;      Locals:         0       0       0       0       0       0       0       0
 17934 ;;      Temps:          0       0       0       0       0       0       0       0
 17935 ;;      Totals:         0       0       0       0       0       0       0       0
 17936 ;;Total ram usage:        0 bytes
 17937 ;; Hardware stack levels used:    1
 17938 ;; This function calls:
 17939 ;;		Nothing
 17940 ;; This function is called by:
 17941 ;;		_EXT_INT_Initialize
 17942 ;;		_INT_CallBack
 17943 ;; This function uses a non-reentrant model
 17944 ;;
 17945                           
 17946                           
 17947                           ;psect for function _INT_DefaultInterruptHandler
 17948  10AD                     _INT_DefaultInterruptHandler:	
 17949  10AD                     i1l887:	
 17950                           ;incstack = 0
 17951                           ; Regs used in _INT_DefaultInterruptHandler: []
 17952                           
 17953  10AD  0008               	return
 17954  10AE                     __end_of_INT_DefaultInterruptHandler:	
 17955                           
 17956                           	psect	text120
 17957  157E                     __ptext120:	
 17958 ;; *************** function _EUSART_Transmit_ISR *****************
 17959 ;; Defined at:
 17960 ;;		line 194 in file "mcc_generated_files/eusart.c"
 17961 ;; Parameters:    Size  Location     Type
 17962 ;;		None
 17963 ;; Auto vars:     Size  Location     Type
 17964 ;;		None
 17965 ;; Return value:  Size  Location     Type
 17966 ;;                  1    wreg      void 
 17967 ;; Registers used:
 17968 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17969 ;; Tracked objects:
 17970 ;;		On entry : 0/0
 17971 ;;		On exit  : 0/0
 17972 ;;		Unchanged: 0/0
 17973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17974 ;;      Params:         0       0       0       0       0       0       0       0
 17975 ;;      Locals:         0       0       0       0       0       0       0       0
 17976 ;;      Temps:          1       0       0       0       0       0       0       0
 17977 ;;      Totals:         1       0       0       0       0       0       0       0
 17978 ;;Total ram usage:        1 bytes
 17979 ;; Hardware stack levels used:    1
 17980 ;; This function calls:
 17981 ;;		Nothing
 17982 ;; This function is called by:
 17983 ;;		_EUSART_Initialize
 17984 ;;		_INTERRUPT_InterruptManager
 17985 ;; This function uses a non-reentrant model
 17986 ;;
 17987                           
 17988                           
 17989                           ;psect for function _EUSART_Transmit_ISR
 17990  157E                     _EUSART_Transmit_ISR:	
 17991  157E                     i1l5445:	
 17992                           ;incstack = 0
 17993                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 17994                           
 17995                           
 17996                           ;mcc_generated_files/eusart.c: 198:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 17997  157E  3008               	movlw	8
 17998  157F  0021               	movlb	1	; select bank1
 17999  1580  0263               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 18000  1581  1803               	skipnc
 18001  1582  2D84               	goto	u452_21
 18002  1583  2D85               	goto	u452_20
 18003  1584                     u452_21:	
 18004  1584  2D9F               	goto	i1l748
 18005  1585                     u452_20:	
 18006  1585                     i1l5447:	
 18007                           
 18008                           ;mcc_generated_files/eusart.c: 199:     {;mcc_generated_files/eusart.c: 200:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 18009  1585  0020               	movlb	0	; select bank0
 18010  1586  086B               	movf	_eusartTxTail,w
 18011  1587  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 18012  1588  0086               	movwf	6
 18013  1589  0187               	clrf	7
 18014  158A  0801               	movf	1,w
 18015  158B  0023               	movlb	3	; select bank3
 18016  158C  009A               	movwf	26	;volatile
 18017  158D                     i1l5449:	
 18018  158D  3001               	movlw	1
 18019  158E  00F7               	movwf	??_EUSART_Transmit_ISR
 18020  158F  0877               	movf	??_EUSART_Transmit_ISR,w
 18021  1590  0020               	movlb	0	; select bank0
 18022  1591  07EB               	addwf	_eusartTxTail,f	;volatile
 18023  1592                     i1l5451:	
 18024                           
 18025                           ;mcc_generated_files/eusart.c: 201:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 18026  1592  3008               	movlw	8
 18027  1593  026B               	subwf	_eusartTxTail,w	;volatile
 18028  1594  1C03               	skipc
 18029  1595  2D97               	goto	u453_21
 18030  1596  2D98               	goto	u453_20
 18031  1597                     u453_21:	
 18032  1597  2D99               	goto	i1l5455
 18033  1598                     u453_20:	
 18034  1598                     i1l5453:	
 18035                           
 18036                           ;mcc_generated_files/eusart.c: 202:         {;mcc_generated_files/eusart.c: 203:        
      +                               eusartTxTail = 0;
 18037  1598  01EB               	clrf	_eusartTxTail	;volatile
 18038  1599                     i1l5455:	
 18039                           
 18040                           ;mcc_generated_files/eusart.c: 205:         eusartTxBufferRemaining++;
 18041  1599  3001               	movlw	1
 18042  159A  00F7               	movwf	??_EUSART_Transmit_ISR
 18043  159B  0877               	movf	??_EUSART_Transmit_ISR,w
 18044  159C  0021               	movlb	1	; select bank1
 18045  159D  07E3               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 18046                           
 18047                           ;mcc_generated_files/eusart.c: 206:     }
 18048  159E  2DA0               	goto	i1l751
 18049  159F                     i1l748:	
 18050                           ;mcc_generated_files/eusart.c: 207:     else
 18051                           
 18052                           
 18053                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         PIE
      +                          1bits.TXIE = 0;
 18054  159F  1211               	bcf	17,4	;volatile
 18055  15A0                     i1l751:	
 18056  15A0  0008               	return
 18057  15A1                     __end_of_EUSART_Transmit_ISR:	
 18058  007E                     btemp	set	126	;btemp
 18059  007E                     int$flags	set	126
 18060  007E                     wtemp0	set	126


Data Sizes:
    Strings     41
    Constant    77
    Data        40
    BSS         329
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     53      80
    BANK1            80      0      80
    BANK2            80      0      79
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0      64
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2997$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service$2997	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    S2200$4$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S2200$6$0	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 64
		 -> Storage(BANK4[64]), NULL(NULL[0]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 64
		 -> Storage(BANK4[64]), NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 64
		 -> Storage(BANK4[64]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 64
		 -> Storage(BANK4[64]), NULL(NULL[0]), 

    strstr@h	PTR const unsigned char  size(1) Largest target is 64
		 -> Storage(BANK4[64]), NULL(NULL[0]), 

    strstr@n	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 64
		 -> Storage2(BANK1[9]), Storage(BANK4[64]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> Storage2(BANK1[9]), Storage(BANK4[64]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 64
		 -> ResponseBuffer(BANK3[64]), Storage(BANK4[64]), NULL(NULL[0]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> ResponseBuffer(BANK3[64]), Storage(BANK4[64]), NULL(NULL[0]), 

    memset@dest	PTR void  size(1) Largest target is 9
		 -> Num_Char(BANK1[3]), Storage2(BANK1[9]), 

    memset@s	PTR unsigned char  size(1) Largest target is 9
		 -> Num_Char(BANK1[3]), Storage2(BANK1[9]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 3
		 -> Num_Char(BANK1[3]), 

    SendString@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[17]), STR_2(CODE[18]), 

    S2200$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    uart.Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S2200$TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    uart.TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S2200$TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    uart.TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    S2200$SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    uart.SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    S2200$RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    uart.RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S2200$SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    uart.SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    S2200$DataReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    uart.DataReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    S2200$TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    uart.TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    S2200$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    uart.Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    S2200$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    uart.Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    sp__memset	PTR void  size(1) Largest target is 9
		 -> Num_Char(BANK1[3]), Storage2(BANK1[9]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 64
		 -> Storage(BANK4[64]), NULL(NULL[0]), 

    main@s	PTR unsigned char  size(1) Largest target is 64
		 -> Storage(BANK4[64]), NULL(NULL[0]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 64
		 -> Storage2(BANK1[9]), Storage(BANK4[64]), 

    sp__GetResponse	PTR unsigned char  size(1) Largest target is 64
		 -> ResponseBuffer(BANK3[64]), 

    rxData	PTR unsigned char  size(1) Largest target is 64
		 -> ResponseBuffer(BANK3[64]), NULL(NULL[0]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    S113$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    S113$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    callback_sampled	PTR FTN(enum E2878,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_TMR0_ISR
    _TMR0_ISR->_TMR0_CallBack
    _ReceivedMessage->_EUSART_Read
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _strstr->_strncmp
    _atoi->___wmul
    _atoi->_isdigit
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _myButtonPressedCallback->_check_on_off
    _myButtonPressedCallback->_check_up_down
    _check_up_down->_MTOUCH_Button_Buttonmask_Get
    _check_on_off->_MTOUCH_Button_Buttonmask_Get
    _MTOUCH_Button_Buttonmask_Get->_MTOUCH_Button_isPressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _INIT_SMART_LIGHT->_SendString
    _SendString->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   37203
                                             52 BANK0      1     1      0
                            _ALL_OFF
                             _ALL_ON
                        _GetResponse
                   _INIT_SMART_LIGHT
                        _LED_DOWN_ON
                            _LED_OFF
                             _LED_ON
                            _LED_RUN
       _MTOUCH_Button_Buttonmask_Get
        _MTOUCH_Button_InitializeAll
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                 _ReadyReceiveBuffer
                  _SYSTEM_Initialize
                               _atoi
                       _blockingWait
                             _memset
                             _strcpy
                             _strstr
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _strstr                                               8     6      2    1268
                                              9 BANK0      8     6      2
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              9     5      4     410
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _strlen                                               5     3      2     166
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _strchr                                               3     1      2     250
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _strcpy                                              12     8      4     397
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 (1) _memset                                              10     6      4    1089
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (1) _blockingWait                                         5     3      2     122
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _atoi                                                16    14      2    2953
                                              6 BANK0     16    14      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (2) _isspace                                              5     3      2     207
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              6     4      2     161
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2076
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3998
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     121
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3086
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    1829
                                              8 BANK0      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    1730
                                              6 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     526
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1055
                                             10 BANK0      2     2      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     328
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     121
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     670
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ReadyReceiveBuffer                                   2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23405
                                             51 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              3 BANK0      2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     202
                                              1 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0     103
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   15801
                                             49 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   15702
                                             42 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0     103
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              4 BANK0      3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     130
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   14407
                                             38 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1396
                                              4 BANK0      5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      67
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      67
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    6288
                                             25 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5745
                                             10 BANK0     15    14      1
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1    1226
                                              1 BANK0      8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     211
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     170
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1697
                                              4 BANK0      6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     134
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     134
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0     103
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    7179
                                             22 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    7080
                                             18 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     504
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     526
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1164
                                             13 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     130
                                              7 BANK0      1     0      1
                       _LED_DOWN_OFF
                         _LED_UP_OFF
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1796
                                             13 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     381
                                              7 BANK0      1     0      1
                       _check_on_off
                      _check_up_down
 ---------------------------------------------------------------------------------
 (6) _check_up_down                                        1     1      0     158
                                              6 BANK0      1     1      0
                        _LED_DOWN_ON
                          _LED_UP_ON
       _MTOUCH_Button_Buttonmask_Get
 ---------------------------------------------------------------------------------
 (6) _check_on_off                                         1     1      0     158
                                              6 BANK0      1     1      0
       _MTOUCH_Button_Buttonmask_Get
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_Button_Buttonmask_Get                         4     4      0     158
                                              2 BANK0      4     4      0
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (8) _MTOUCH_Button_isPressed                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     659
                                              6 BANK0      4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     526
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              7 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1092
                                             13 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     634
                                              8 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0     844
                                             11 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0     746
                                              8 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     526
                                              4 BANK0      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     482
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              0 BANK0     15    15      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LED_RUN                                              3     1      2    1893
                                              0 BANK0      3     1      2
                       _LED_DOWN_OFF
                        _LED_DOWN_ON
                         _LED_UP_OFF
                          _LED_UP_ON
 ---------------------------------------------------------------------------------
 (7) _LED_UP_ON                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_DOWN_ON                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_ON                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _INIT_SMART_LIGHT                                     0     0      0     511
       _EUSART_SetRxInterruptHandler *
                         _SendString
 ---------------------------------------------------------------------------------
 (2) _SendString                                           3     1      2     325
                                              2 BANK0      3     1      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     1      1     150
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     186
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _GetResponse                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ALL_ON                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ALL_OFF                                              0     0      0       0
                            _LED_OFF
 ---------------------------------------------------------------------------------
 (1) _LED_OFF                                              0     0      0       0
                       _LED_DOWN_OFF
                         _LED_UP_OFF
 ---------------------------------------------------------------------------------
 (6) _LED_UP_OFF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _LED_DOWN_OFF                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0      47
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _INT_ISR
                    _ReceivedMessage *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            6     6      0       0
                                              1 COMMON     6     6      0
                   Absolute function *
                      _TMR0_CallBack
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR0_CallBack                                       1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _ReceivedMessage                                     2     2      0      47
                                              2 COMMON     2     2      0
                        _EUSART_Read *
                 _EUSART_Receive_ISR *
                 _EUSART_is_rx_ready *
 ---------------------------------------------------------------------------------
 (11) _EUSART_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Read                                         2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _INT_ISR                                             0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (11) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (12) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ALL_OFF
     _LED_OFF
       _LED_DOWN_OFF
       _LED_UP_OFF
   _ALL_ON
   _GetResponse
   _INIT_SMART_LIGHT
     _EUSART_SetRxInterruptHandler *
     _SendString *
       _EUSART_Write *
   _LED_DOWN_ON
   _LED_OFF
     _LED_DOWN_OFF
     _LED_UP_OFF
   _LED_ON
   _LED_RUN
     _LED_DOWN_OFF
     _LED_DOWN_ON
     _LED_UP_OFF
     _LED_UP_ON
   _MTOUCH_Button_Buttonmask_Get
     _MTOUCH_Button_isPressed
   _MTOUCH_Button_InitializeAll
     _MTOUCH_Button_Initialize
       _MTOUCH_Sensor_Calibrate
         ___bmul
     _memcpy
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _check_on_off
               _MTOUCH_Button_Buttonmask_Get
                 _MTOUCH_Button_isPressed
             _check_up_down
               _LED_DOWN_ON
               _LED_UP_ON
               _MTOUCH_Button_Buttonmask_Get
                 _MTOUCH_Button_isPressed
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _LED_DOWN_OFF
             _LED_UP_OFF
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _ReadyReceiveBuffer
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
     _isspace
   _blockingWait
   _memset
   _strcpy
   _strstr
     _strchr
     _strlen
     _strncmp
   _update_state

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _ReceivedMessage *
     _EUSART_Read *
     _EUSART_Receive_ISR *
       Absolute function(Fake) *
       _EUSART_DefaultErrorHandler *
         _EUSART_RxDataHandler
       _EUSART_DefaultFramingErrorHandler *
       _EUSART_DefaultOverrunErrorHandler *
       _EUSART_RxDataHandler *
     _EUSART_is_rx_ready *
   _TMR0_ISR *
     Absolute function(Fake) *
     _TMR0_CallBack *
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
     _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     1BD       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     35      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4F      10       98.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      40      14       80.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      40      16       80.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     1BD      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Nov 05 21:34:44 2019

                       ?_EUSART_SetRxInterruptHandler 0020                       Sensor_loadADCSettings@adc_index 0021  
                        ?_MTOUCH_Sensor_RawSample_Get 0024                                           _triac_level 0059  
                                                   _i 00C6                                          _update_state 10B2  
                                      ___bmul@product 0022                                           ?_LED_UP_OFF 0077  
                                         __CFG_CP$OFF 0000                                                    l40 11C4  
                             ?_Sensor_autoCalibration 0077                                                    l52 0003  
                                                  l45 147F                                                    l49 10DC  
                          __end_of_Sensor_setInactive 1142                                   ___wmul@multiplicand 0022  
                                     _timer0ReloadVal 00E2                             _Sensor_setCalibratAcqTime 11F2  
                                         __CFG_LVP$ON 0000                                                   l223 1750  
                                                 l303 0606                                                   l321 0EB1  
                                                 l305 0621                                                   l217 0E0C  
                                                 l402 1201                                                   l410 153B  
                                                 l340 1444                                                   l228 0BD1  
                                                 l180 126B                                                   l413 1212  
                                                 l405 1193                                                   l253 074D  
                                                 l501 14FB                                                   l270 067B  
                                                 l334 0C52                                                   l246 085A  
                                                 l511 0A32                                                   l183 11F1  
                                                 l175 1306                                                   l416 1153  
                                                 l360 12D5                                                   l257 0690  
                                                 l522 07D5                                                   l506 1259  
                                                 l290 0542                                                   l266 04A3  
                                                 l346 1690                                                   l259 0738  
                                                 l419 114A                                                   l612 09D7  
                                                 l620 0D6F                                                   l532 0B60  
                                                 l380 1223                                                   l517 0AF4  
                                                 l293 0549                                                   l373 1138  
                                                 l349 10B1                                                   l189 1386  
                                                 l526 07FA                                                   l286 0544  
                                                 l542 16BC                                                   l607 1247  
                                                 l615 16EB                                                   l295 054D  
                                                 l392 136C                                                   l288 053E  
                                                 l376 1141                                                   l369 127F  
                                                 l537 13A0                                                   l642 1126  
                                                 l802 10C9                                                   l388 12BF  
                                                 l636 10B0                                                   l396 119E  
                                                 l741 1641                                                   l805 10CC  
                                                 l717 08E8                                                   l742 164A  
                                                 l814 07FF                                                   l639 112F  
                                                 l591 0CDD                                                   l575 14DC  
                                                 l399 11E1                                                   l496 1788  
                                                 l745 1664                                                   l596 15B9  
                                                 l780 115C                                                   l597 15C5  
                                                 l774 1165                                                   l783 1177  
                                                 l951 10F0                                                   l777 116E  
                                                 l786 111D                                                   l890 11B7  
                                                 l954 10E0                                                   l884 1180  
                                                 l948 131F                                                   l983 1427  
                                                 l799 110B                                                   _GIE 005F  
                                                 _PR2 001B                                  __end_of_check_on_off 11D3  
                                                 _abs 13F0                                ??_EUSART_RxDataHandler 0077  
                      ?_EUSART_SetFramingErrorHandler 0020                               ?_Sensor_loadADCSettings 0021  
                                     _TMR2_Initialize 1104                                          __CFG_BORV$LO 0000  
                                                 wreg 0009                      ??_MTOUCH_Sensor_Sampled_ResetAll 0021  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0077                                       __end_of_ALL_OFF 10D9  
                    __size_of_MTOUCH_Sensor_SampleAll 001A                        Sensor_getScanGroupIndex@sensor 0022  
                   __size_of_MTOUCH_Sensor_Initialize 0019                             ?_MTOUCH_Sensor_Initialize 0077  
                                        ?_EUSART_Read 0077                                       __end_of_LED_OFF 1115  
                                     __end_of_LED_RUN 1614                                                  l1200 1604  
                                                l1050 1189                                                  l1019 0817  
                                                ?_abs 0020                                                  l1204 1613  
                                                l2012 0FFF                                                  l1302 0935  
                                                l2015 1338                                                  l2023 157D  
                                                l1152 10C4                                                  l2032 171B  
                                                l1232 0443                                                  l1162 10BB  
                                                l1154 10C6                                                  l1307 10B2  
                                                l1164 10BD                                                  l1172 10BE  
                                                l2036 0F56                                                  l1157 10C1  
                                                l2061 0983                                                  l1182 10E6  
                                                l1174 10C0                                                  l1167 10B8  
                                                l1191 10D8                                                  l1159 10C3  
                                                l1184 10E8                                                  l2048 163A  
                                                l1256 02A6                                                  l1169 10BA  
                                                l1177 110C                                                  l2073 13A3  
                                                l1186 10E9                                                  l1450 10B7  
                                                l1426 151B                                                  l2082 13D4  
                                                l1179 1114                                                  l1435 14BD  
                                                l1291 12ED                                                  l2075 13BA  
                                                l1188 10EA                                                  l1524 1547  
                                                l1197 1601                                                  l1453 1457  
                                                l1550 12A9                                                  l1286 1103  
                                                l1526 155B                                                  l2086 0A8E  
                                                l1295 11D2                                                  l1447 1293  
                                                l1456 1461                                                  l1298 0935  
                                                l5013 1389                                                  l5015 1395  
                                                l5007 1387                                                  l4321 126E  
                                                l5017 139A                                                  l4411 15AD  
                                                l4403 15A1                                                  l4323 1273  
                                                l4421 1297                                                  l4413 15BE  
                                                l5311 14FC                                                  l4423 129B  
                                                l4263 14DB                                                  l4255 14C0  
                                                l4415 15C4                                                  l5313 14FD  
                                                l4425 129F                                                  l4433 12AC  
                                                l4257 14C6                                                  l4409 15A4  
                                                l4281 1743                                                  l4273 171F  
                                                l4329 127E                                                  l7001 08E5  
                                                l5091 1654                                                  l5083 163B  
                                                l5315 150E                                                  l4427 12A1  
                                                l4419 1296                                                  l4435 12B2  
                                                l4275 1730                                                  l4267 171E  
                                                l7003 08E6                                                  l7011 1109  
                                                l5093 1658                                                  l5085 163B  
                                                l5317 1513                                                  l4429 12A8  
                                                l4285 1745                                                  l1981 140B  
                                                l7101 147B                                                  l7013 11AB  
                                                l7021 140F                                                  l7005 1104  
                                                l5341 1576                                                  l5333 155C  
                                                l5095 165E                                                  l5087 1645  
                                                l4287 1749                                                  l4279 1732  
                                                l7103 147E                                                  l5511 1280  
                                                l7015 11AE                                                  l7031 1419  
                                                l7023 1410                                                  l7007 1107  
                                                l5335 155F                                                  l5351 13C1  
                                                l7121 10D5                                                  l5097 165F  
                                                l5089 164B                                                  l7113 1127  
                                                l4297 13F0                                                  l6401 070D  
                                                l5521 128D                                                  l7017 11B6  
                                                l7041 10EE                                                  l7033 141C  
                                                l7025 1412                                                  l7009 1108  
                                                l5345 1320                                                  l5337 1566  
                                                l5601 0EB4                                                  l5353 13C5  
                                                l5361 0A3D                                                  l1978 140B  
                                                l5099 1662                                                  l7131 1606  
                                                l7123 15EF                                                  l7115 111E  
                                                l4651 1442                                                  l4643 142A  
                                                l4299 13FE                                                  l6403 0716  
                                                l6411 10CA                                                  l7035 141E  
                                                l7027 1415                                                  l7019 140C  
                                                l7051 080D                                                  l7043 10DD  
                                                l5339 1575                                                  l7203 0FE3  
                                                l5523 1445                                                  l5611 0ED1  
                                                l5603 0EB8                                                  l5355 13CE  
                                                l5371 0A54                                                  l5363 0A49  
                                                l7141 14B5                                                  l7133 160C  
                                                l7125 15F4                                                  l4901 0C55  
                                                l4645 1430                                                  l6421 0E4F  
                                                l6413 0E0F                                                  l6405 072B  
                                                l6501 04ED                                                  l5517 1283  
                                                l7037 1423                                                  l7029 1417  
                                                l7053 080E                                                  l7045 0800  
                                                l7117 1307                                                  l7061 153F  
                                                l7205 0FE9                                                  l5525 1449  
                                                l5621 0EF5                                                  l5349 13BB  
                                                l5381 0A80                                                  l5373 0A58  
                                                l7301 0192                                                  l7143 10B6  
                                                l7135 1610                                                  l7127 15F8  
                                                l4911 0CD4                                                  l4903 0CA5  
                                                l4655 11C5                                                  l6351 11F4  
                                                l6431 0E90                                                  l6423 0E54  
                                                l6415 0E17                                                  l6343 1196  
                                                l6407 07FD                                                  l6511 0503  
                                                l6503 04F3                                                  l5519 1289  
                                                l7039 10EB                                                  l7055 080F  
                                                l7047 0805                                                  l7119 131C  
                                                l7063 1543                                                  l7207 0FEF  
                                                l5623 0F00                                                  l5615 0EDB  
                                                l5607 0EBF                                                  l5375 0A61  
                                                l5367 0A4C                                                  l5359 0A35  
                                                l7151 0938                                                  l7311 01A8  
                                                l7303 0196                                                  l7231 00A3  
                                                l7057 110E                                                  l7137 149F  
                                                l7129 15FB                                                  l4905 0CB6  
                                                l4761 1765                                                  l4657 11CD  
                                                l4921 0AB6                                                  l4913 0A8F  
                                                l6361 11E9                                                  l6353 11D5  
                                                l6433 0EA4                                                  l6417 0E20  
                                                l6425 0E59                                                  l6409 10C7  
                                                l6521 0517                                                  l6505 04FD  
                                                l6513 0506                                                  l6441 0454  
                                                l7049 0808                                                  l7065 154C  
                                                l7209 0FFB                                                  l5641 0F48  
                                                l5633 0F27                                                  l5617 0EE2  
                                                l5609 0EC6                                                  l7081 13B9  
                                                l7073 13A3                                                  l5377 0A6A  
                                                l5369 0A50                                                  l7161 0960  
                                                l7153 093E                                                  l7217 10B2  
                                                l7321 01CC                                                  l7305 019B  
                                                l7313 01B0                                                  l7241 00B9  
                                                l7233 00A4                                                  l7139 14AD  
                                                l4907 0CBE                                                  l4771 16DB  
                                                l4763 1770                                                  l4923 0AC8  
                                                l4915 0AA2                                                  l6363 11EC  
                                                l6355 11E2                                                  l6347 118C  
                                                l6435 0EAD                                                  l6427 0E82  
                                                l6419 0E40                                                  l6611 063D  
                                                l6603 0627                                                  l6531 0529  
                                                l6515 0510                                                  l6523 0519  
                                                l6507 04FE                                                  l6451 0474  
                                                l6443 0459                                                  l4851 166F  
                                                l7091 146C                                                  l7067 1551  
                                                l7059 153C                                                  l7171 0F59  
                                                l5643 0F4C                                                  l5635 0F38  
                                                l5627 0F0A                                                  l5619 0EEA  
                                                l7147 1614                                                  l7075 13AD  
                                                l5379 0A70                                                  l7155 094B  
                                                l7163 0974                                                  l7411 02B6  
                                                l7331 01E5                                                  l7323 01D3  
                                                l7307 01A4                                                  l7315 01B4  
                                                l7251 00C9                                                  l7243 00BC  
                                                l7235 00AC                                                  l7227 009F  
                                                l4909 0CCC                                                  l4781 0D2B  
                                                l4773 0CE0                                                  l4765 1778  
                                                l4757 1753                                                  l4917 0AA7  
                                                l6365 11EE                                                  l6357 11E5  
                                                l6429 0E8B                                                  l6373 121C  
                                                l6381 0684                                                  l6621 0669  
                                                l6613 0646                                                  l6605 062C  
                                                l6541 0539                                                  l6533 052A  
                                                l6525 051F                                                  l6517 0512  
                                                l6509 0501                                                  l6461 0498  
                                                l6453 047D                                                  l6445 0462  
                                                l6437 0448                                                  l4853 1673  
                                                l7085 1462                                                  l4693 12C2  
                                                l7069 1557                                                  l7181 0F80  
                                                l7173 0F5E                                                  l5645 0F50  
                                                l5637 0F3C                                                  l5629 0F1D  
                                                l7149 161D                                                  l7165 0979  
                                                l7157 095E                                                  l7501 03C0  
                                                l7421 02D9                                                  l7413 02BB  
                                                l7405 02A6                                                  l7341 01F6  
                                                l7333 01E8                                                  l7325 01D8  
                                                l7317 01BA                                                  l7309 01A6  
                                                l7261 00FA                                                  l7253 00D0  
                                                l7245 00BD                                                  l7237 00B4  
                                                l7229 00A2                                                  l4783 0986  
                                                l4775 0CE4                                                  l4767 1780  
                                                l4759 175F                                                  l4919 0AAB  
                                                l4871 136B                                                  l4863 1355  
                                                l6359 11E7                                                  l6367 1215  
                                                l6391 06B9                                                  l6383 0689  
                                                l6631 0676                                                  l6623 066E  
                                                l6615 0650                                                  l6607 0632  
                                                l6551 056A                                                  l6543 053D  
                                                l6535 052E                                                  l6527 0526  
                                                l6519 0514                                                  l6471 04A9  
                                                l6463 04A1                                                  l6455 0486  
                                                l6447 046B                                                  l6439 044F  
                                                l6711 0C00                                                  l4855 1674  
                                                l7095 146E                                                  l7087 1464  
                                                l4695 12C8                                                  l7191 0F93  
                                                l7183 0F81                                                  l7175 0F62  
                                                l5639 0F41                                                  l7079 13AF  
                                                l7167 0982                                                  l7511 03ED  
                                                l7503 03CD                                                  l7431 02FA  
                                                l7423 02DD                                                  l7415 02C8  
                                                l7407 02AC                                                  l7351 020D  
                                                l7343 01FD                                                  l7335 01EF  
                                                l7319 01C8                                                  l7327 01DB  
                                                l7271 0135                                                  l7263 0107  
                                                l7255 00D8                                                  l7247 00C0  
                                                l7239 00B7                                                  l4785 0990  
                                                l6801 1241                                                  l4769 16BF  
                                                l4777 0CE5                                                  l4865 135B  
                                                l6369 121A                                                  l6393 06C5  
                                                l6385 068C                                                  l6377 067E  
                                                l6633 0678                                                  l6625 0670  
                                                l6617 0655                                                  l6609 0637  
                                                l6561 05AC                                                  l6553 057A  
                                                l6545 0548                                                  l6537 0531  
                                                l6529 0528                                                  l6473 04AE  
                                                l6481 04B8                                                  l6457 048C  
                                                l6449 0471                                                  l6721 0C13  
                                                l6713 0C04                                                  l6705 0BEF  
                                                l6641 113B                                                  l4857 1681  
                                                l4849 1667                                                  l7601 0DF9  
                                                l7097 1471                                                  l7089 1464  
                                                l4881 16F7                                                  l7193 0F98  
                                                l7177 0F64                                                  l7521 0406  
                                                l7513 03F6                                                  l7505 03CF  
                                                l7441 0316                                                  l7433 0300  
                                                l7425 02E3                                                  l7417 02CA  
                                                l7409 02B1                                                  l7361 0222  
                                                l7353 0211                                                  l7337 01F0  
                                                l7329 01E0                                                  l7345 01FF  
                                                l7273 013A                                                  l7265 010E  
                                                l7257 00E8                                                  l7281 015C  
                                                l7249 00C3                                                  l4787 09A8  
                                                l6803 1243                                                  l4779 0D29  
                                                l6651 0900                                                  l6643 08E9  
                                                l6811 0788                                                  l4875 1204  
                                                l6395 06CF                                                  l6387 0694  
                                                l6627 0672                                                  l6619 065F  
                                                l6571 05E5                                                  l6555 057F  
                                                l6563 05B5                                                  l6547 054E  
                                                l6539 0534                                                  l6483 04BD  
                                                l6459 048F                                                  l6731 0C45  
                                                l6723 0C20                                                  l6715 0C09  
                                                l4859 1683                                                  l4955 1693  
                                                l7099 1478                                                  l4883 16FF  
                                                l7195 0FAB                                                  l7187 0F88  
                                                l7179 0F6D                                                  l7531 042C  
                                                l7523 040B                                                  l7507 03D8  
                                                l7515 03F7                                                  l7451 032D  
                                                l7435 0307                                                  l7427 02EB  
                                                l7419 02D3                                                  l7443 0319  
                                                l7363 0223                                                  l7355 0214  
                                                l7347 0206                                                  l7339 01F3  
                                                l7291 0173                                                  l7283 0162  
                                                l7267 0114                                                  l7275 0142  
                                                l7259 00F5                                                  l4789 09C5  
                                                l6661 0920                                                  l6653 090A  
                                                l6645 08ED                                                  l6741 12E1  
                                                l6821 07EE                                                  l6813 0791  
                                                l6805 074E                                                  l6901 09F3  
                                                l6397 06D8                                                  l6389 06A6  
                                                l6629 0674                                                  l6581 0600  
                                                l6565 05C5                                                  l6557 0591  
                                                l6549 0565                                                  l6485 04C2  
                                                l6493 04CC                                                  l6469 04A4  
                                                l6725 0C2B                                                  l6717 0C11  
                                                l6709 0BFA                                                  l4957 169E  
                                                l4885 1703                                                  l7189 0F8F  
                                                l7533 0438                                                  l7525 0418  
                                                l7517 03FC                                                  l7509 03E1  
                                                l7461 034B                                                  l7453 0332  
                                                l7445 0320                                                  l7437 030D  
                                                l7429 02F2                                                  l7381 0249  
                                                l7357 021C                                                  l7365 0228  
                                                l7349 0209                                                  l7373 0230  
                                                l7293 0179                                                  l7285 0163  
                                                l7277 014D                                                  l7269 011A  
                                                l6911 1115                                                  l6663 0927  
                                                l6655 0913                                                  l6647 08F5  
                                                l6743 12E8                                                  l6735 10FD  
                                                l6831 0B3A                                                  l6823 07F6  
                                                l6815 07AB                                                  l6807 0764  
                                                l6903 0A01                                                  l6399 0700  
                                                l6591 0616                                                  l6583 0604  
                                                l6567 05CA                                                  l6575 05F8  
                                                l6559 059A                                                  l6495 04D5  
                                                l6727 0C3B                                                  l6639 1132  
                                                l6751 0B63                                                  l4959 16B3  
                                                l4887 170B                                                  l4879 16EE  
                                                l4991 14EC                                                  l4983 14DD  
                                                l7199 0FC8                                                  l7535 0441  
                                                l7527 041A                                                  l7519 0401  
                                                l7471 0369                                                  l7463 0354  
                                                l7455 0337                                                  l7447 0321  
                                                l7439 0313                                                  l7391 0276  
                                                l7383 0251                                                  l7375 0235  
                                                l7367 022B                                                  l7359 021F  
                                                l7295 017E                                                  l7287 0166  
                                                l7279 0159                                                  l6665 092A  
                                                l6657 0914                                                  l6649 08FD  
                                                l6745 12EB                                                  l6737 12D6  
                                                l6833 0B52                                                  l6825 0AF5  
                                                l6817 07BD                                                  l6809 0780  
                                                l6905 0A0B                                                  l6593 061A  
                                                l6585 060B                                                  l6577 05FD  
                                                l6569 05DC                                                  l6497 04D8  
                                                l6729 0C3F                                                  l6681 082B  
                                                l6761 0B73                                                  l6753 0B67  
                                                l6913 116F                                                  l6921 1178  
                                                l4889 170F                                                  l4993 14F0  
                                                l4985 14EA                                                  l6841 125C  
                                                l7529 0423                                                  l7481 038B  
                                                l7473 0370                                                  l7465 035A  
                                                l7457 033C                                                  l7449 0327  
                                                l7385 0259                                                  l7393 027A  
                                                l7377 0242                                                  l7369 022E  
                                                l7297 0185                                                  l7289 016E  
                                                l6659 0918                                                  l6739 12DE  
                                                l6827 0B08                                                  l6819 07CC  
                                                l6907 0A17                                                  l6595 061F  
                                                l6587 060E                                                  l6579 05FE  
                                                l6499 04EA                                                  l6691 0BD4  
                                                l6683 0845                                                  l6771 0B90  
                                                l6763 0B7B                                                  l6755 0B6C  
                                                l6675 114D                                                  l6851 152A  
                                                l6915 115D                                                  l4995 14F5  
                                                l6747 12F0                                                  l6843 1260  
                                                l6835 125A                                                  l6931 11C1  
                                                l6923 1181                                                  l7491 03A4  
                                                l7483 0391                                                  l7475 0378  
                                                l7467 035B                                                  l7459 0349  
                                                l7395 0282                                                  l7387 0263  
                                                l7379 0245                                                  l7299 0189  
                                                l6829 0B20                                                  l6909 0A1F  
                                                l6589 0612                                                  l6693 0BE2  
                                                l6685 0848                                                  l6677 081A  
                                                l6781 0BB2                                                  l6773 0B94  
                                                l6757 0B71                                                  l6861 0D9D  
                                                l6941 1378                                                  l6933 136D  
                                                l6853 152E                                                  l6917 1166  
                                                l6845 1265                                                  l6925 11B8  
                                                l7485 0394                                                  l7477 037E  
                                                l7469 0361                                                  l7493 03AB  
                                                l7397 0289                                                  l7389 0275  
                                                l6599 0625                                                  l6695 0BE6  
                                                l6687 0851                                                  l6679 0822  
                                                l6783 0BBC                                                  l6775 0B9A  
                                                l6767 0B7D                                                  l6863 0DA6  
                                                l6871 0DC1                                                  l6855 1533  
                                                l6847 151C                                                  l6919 1154  
                                                l6927 11BB                                                  l7495 03B1  
                                                l7479 0385                                                  l7487 0399  
                                                l7399 0293                                                  l6961 124E  
                                                l6953 1248                                                  l6697 0BEA  
                                                l6689 0856                                                  l6785 0BC6  
                                                l6777 0B9E                                                  l6769 0B8A  
                                                l6793 1144                                                  l6873 0DCB  
                                                l6865 0DAC                                                  l6857 0D72  
                                                l6945 137A                                                  l6929 11BE  
                                                l7497 03B6                                                  l7489 03A3  
                                                l6795 1238                                                  l6963 1253  
                                                l6699 0BEE                                                  l6779 0BA8  
                                                l6875 0DD1                                                  l6867 0DB0  
                                                l6883 0DE7                                                  l6859 0D90  
                                                l6947 137F                                                  l6939 136F  
                                                l6971 10D9                                                  l7499 03BB  
                                                l6797 123C                                                  l6789 0BD0  
                                                l6877 0DD5                                                  l6885 0E0A  
                                                l6869 0DB5                                                  l6949 1385  
                                                l6965 0002                                                  l6981 08B9  
                                                l6973 08A2                                                  l7597 0FA3  
                                                l6799 123D                                                  l6959 124A  
                                                l7599 0DF4                                                  l6879 0DDA  
                                                l6967 0002                                                  l6991 08C8  
                                                l6983 08BB                                                  l6975 08A4  
                                                l6897 09DA                                                  l6993 08D0  
                                                l6985 08BD                                                  l6977 08AC  
                                                l6899 09E6                                                  l6995 08DD  
                                                l6987 08BF                                                  l6979 08B6  
                                                l6997 08E2                                                  l6989 08C0  
                                                l6999 08E4                                                  STR_1 1867  
                                                STR_2 1844                                                  STR_3 1856  
                       ?_Button_Reading_Update_Helper 0077                                                  _LATA 010C  
                                                u3110 15AD                                                  _LATB 010D  
                                     __end_of_INT_ISR 10E6                                                  u3111 15AC  
                                                _LATC 010E                                                  u3130 15C4  
                                                u3131 15C3                                                  u3140 129B  
                                                u3124 15B3                                                  u4020 169E  
                                                u4100 13A0                                                  u3141 129A  
                                                u3125 15B2                                                  u4021 169D  
                                                u4101 139F                                                  u3150 12A8  
                                                u4030 16B3                                                  u3151 12A7  
                                                u4031 16B2                                                  u4200 1645  
                                                u3160 12B2                                                  u4201 1644  
                                                u3161 12B1                                                  u4210 165E  
                                                u4211 165D                                                  u4060 14FB  
                                                u4061 14FA                                                  u4320 151B  
                                                u3520 1430                                                  u6000 04B7  
                                                u4400 1332                                                  u4321 151A  
                                                u3521 142F                                                  u6001 04B6  
                                                u3530 11CD                                                  u6010 04BD  
                                                u4410 13CE                                                  u3531 11CC  
                                                u6011 04BC                                                  u4411 13CD  
                                                u3700 0CF7                                                  u2900 14C6  
                                                u6100 054D                                                  u6020 04C2  
                                                u4420 0A49                                                  u2901 14C5  
                                                u6101 054C                                                  u6021 04C1  
                                                u4421 0A48                                                  u4190 1641  
                                                u3710 0D3D                                                  u6110 056A  
                                                u6030 04CB                                                  u4430 0A61  
                                                u4191 1640                                                  u6111 0569  
                                                u6031 04CA                                                  u4095 138C  
                                                u4431 0A60                                                  u3720 0990  
                                                u2920 14D9                                                  u6200 0637  
                                                u6120 057F                                                  u6040 04D5  
                                                u4600 1293                                                  u4440 0A6A  
                                                u7000 0185                                                  u3721 098F  
                                                u3705 0CF3                                                  u2921 14D7  
                                                u6201 0636                                                  u6121 057E  
                                                u6041 04D4                                                  u4601 1292  
                                                u4441 0A69                                                  u7001 0184  
                                                u2930 14DA                                                  u6210 0646  
                                                u6130 05CA                                                  u6050 04F3  
                                                u4370 1566                                                  u4610 1461  
                                                u4450 0A70                                                  u7010 0192  
                                                u3715 0D39                                                  u2915 14C9  
                                                u6211 0645                                                  u6131 05C9  
                                                u6051 04F2                                                  u4371 1565  
                                                u4611 1460                                                  u4451 0A6F  
                                                u7011 0191                                                  u3900 0C9B  
                                                u2940 1730                                                  u6220 0650  
                                                u6140 05FD                                                  u6060 0539  
                                                u6300 082B                                                  u4380 1575  
                                                u4460 0A80                                                  u7100 0206  
                                                u7020 0196                                                  u2941 172F  
                                                u6221 064F                                                  u6141 05FC  
                                                u6061 0538                                                  u6301 082A  
                                                u4381 1574                                                  u4461 0A7F  
                                                u7101 0205                                                  u7021 0195  
                                                u3910 0CB6                                                  u2950 1743  
                                                u6230 065F                                                  u6150 0604  
                                                u6070 053D                                                  u6310 0851  
                                                u3590 12C8                                                  u4390 1331  
                                                u7110 0211                                                  u7030 01A4  
                                                u3911 0CB5                                                  u2951 1742  
                                                u6231 065E                                                  u6151 0603  
                                                u6071 053C                                                  u6311 0850  
                                                u3591 12C7                                                  u4391 132F  
                                                u4615 145D                                                  u7111 0210  
                                                u7031 01A3                                                  u3920 0CCC  
                                                u2960 174F                                                  u6240 0669  
                                                u6160 060B                                                  u6080 0542  
                                                u6320 0C00                                                  u6400 0B71  
                                                u7200 0289                                                  u7120 021C  
                                                u7040 01BA                                                  u3921 0CCB  
                                                u3905 0C97                                                  u2961 174E  
                                                u6241 0668                                                  u6161 060A  
                                                u6081 0541                                                  u6321 0BFF  
                                                u6401 0B70                                                  u7201 0288  
                                                u7121 021B                                                  u7041 01B9  
                                                u3690 0CE4                                                  u6250 08ED  
                                                u3930 0AA2                                                  u2970 13FE  
                                                u6170 061F                                                  u6090 0548  
                                                u6330 0C11                                                  u6410 0B7B  
                                                u3850 1673                                                  u7210 0293  
                                                u7130 0235                                                  u7050 01C8  
                                                u3691 0CE3                                                  u3675 1756  
                                                u6251 08EC                                                  u3931 0AA1  
                                                u2971 13FD                                                  u6171 061E  
                                                u6091 0547                                                  u6331 0C10  
                                                u6411 0B7A                                                  u3851 1672  
                                                u7211 0292                                                  u7131 0234  
                                                u7051 01C7                                                  u6260 08F5  
                                                u3940 0AC8                                                  u6500 0764  
                                                u3860 135B                                                  u2980 1273  
                                                u6180 0625                                                  u6340 0C20  
                                                u6420 0B8A                                                  u4740 0EBE  
                                                u7300 0300                                                  u7220 02AC  
                                                u7140 0242                                                  u7060 01D3  
                                                u3685 16E1                                                  u6261 08F4  
                                                u3941 0AC7                                                  u6501 0763  
                                                u3861 135A                                                  u2981 1272  
                                                u6181 0624                                                  u6341 0C1F  
                                                u6421 0B89                                                  u4741 0EBD  
                                                u7301 02FF                                                  u7221 02AB  
                                                u7141 0241                                                  u7061 01D2  
                                                u6270 08FD                                                  u3950 0ADA  
                                                u6510 0780                                                  u6190 062C  
                                                u6350 0C2B                                                  u6430 0B90  
                                                u3870 171B                                                  u4750 0EDA  
                                                u7310 030D                                                  u7230 02B1  
                                                u7150 0249                                                  u7070 01E5  
                                                u6271 08FC                                                  u6511 077F  
                                                u2975 13FA                                                  u6191 062B  
                                                u6351 0C2A                                                  u6431 0B8F  
                                                u3871 171A                                                  u4751 0ED9  
                                                u7311 030C                                                  u7231 02B0  
                                                u7151 0248                                                  u7071 01E4  
                                                u6280 0920                                                  u6520 07AB  
                                                u5800 0689                                                  u6360 0C45  
                                                u6440 0B9A                                                  u6600 0DAC  
                                                u4760 0F09                                                  u7400 0370  
                                                u7320 0320                                                  u7240 02B6  
                                                u7160 0251                                                  u7080 01EF  
                                                u6281 091F                                                  u6521 07AA  
                                                u5801 0688                                                  u6361 0C44  
                                                u6441 0B99                                                  u6601 0DAB  
                                                u4761 0F08                                                  u7401 036F  
                                                u7321 031F                                                  u7241 02B5  
                                                u7161 0250                                                  u7081 01EE  
                                                u3890 0C67                                                  u6290 0927  
                                                u6370 12DE                                                  u6530 07EE  
                                                u5810 06D8                                                  u6450 0BA8  
                                                u6610 0DCB                                                  u4770 0F26  
                                                u7410 037E                                                  u7330 032D  
                                                u7250 02BB                                                  u7170 0259  
                                                u7090 01FD                                                  u6291 0926  
                                                u6371 12DD                                                  u3955 0AD6  
                                                u6531 07ED                                                  u5811 06D7  
                                                u6355 0C27                                                  u6451 0BA7  
                                                u6611 0DCA                                                  u4771 0F25  
                                                u7411 037D                                                  u7331 032C  
                                                u7251 02BA                                                  u7171 0258  
                                                u7091 01FC                                                  u6380 12E8  
                                                u6540 0B08                                                  u5820 0716  
                                                u5900 0454                                                  u6460 0BB2  
                                                u6620 0DD1                                                  u6700 1543  
                                                u4780 0F56                                                  u7500 03FC  
                                                u7420 038B                                                  u7340 0332  
                                                u7260 02C8                                                  u7180 0263  
                                                u6381 12E7                                                  u6541 0B07  
                                                u6525 07A7                                                  u5821 0715  
                                                u5901 0453                                                  u6461 0BB1  
                                                u6621 0DD0                                                  u6701 1542  
                                                u4781 0F55                                                  u7501 03FB  
                                                u7421 038A                                                  u7341 0331  
                                                u7261 02C7                                                  u7181 0262  
                                                u6550 0B3A                                                  u5910 0459  
                                                u6470 0BBC                                                  u6390 0B6C  
                                                u7510 0401                                                  u7430 03A3  
                                                u7350 0337                                                  u7270 02D9  
                                                u7190 0282                                                  u3895 0C63  
                                                u6551 0B39                                                  u5911 0458  
                                                u6471 0BBB                                                  u6391 0B6B  
                                                u7511 0400                                                  u7431 03A2  
                                                u7351 0336                                                  u7271 02D8  
                                                u7191 0281                                                  u6640 09F3  
                                                u5840 0E20                                                  u5920 0462  
                                                u6480 0BC6                                                  u6560 126B  
                                                u6800 163A                                                  u7520 0406  
                                                u7440 03B1                                                  u7360 033C  
                                                u7280 02E3                                                  u6641 09F2  
                                                u5841 0E1F                                                  u5921 0461  
                                                u6481 0BC5                                                  u6561 126A  
                                                u6801 1639                                                  u7521 0405  
                                                u7441 03B0                                                  u7361 033B  
                                                u7281 02E2                                                  u6490 123C  
                                                u6650 0A01                                                  u5930 046B  
                                                u6570 1529                                                  u6730 1557  
                                                u6810 093E                                                  u7530 040B  
                                                u7450 03B6                                                  u7370 0349  
                                                u7290 02F2                                                  u6491 123B  
                                                u6651 0A00                                                  u6635 09DD  
                                                u5835 0741                                                  u5931 046A  
                                                u6571 1528                                                  u6731 1556  
                                                u6715 1548                                                  u6811 093D  
                                                u7531 040A                                                  u7451 03B5  
                                                u7371 0348                                                  u7291 02F1  
                                                u6660 0A17                                                  u5860 0E40  
                                                u5780 121A                                                  u5940 047D  
                                                u6580 153B                                                  u6900 0FE9  
                                                u6740 13AD                                                  u6820 095E  
                                                u7540 0418                                                  u7460 03BB  
                                                u7380 035A                                                  u6661 0A16  
                                                u5861 0E3F                                                  u5781 1219  
                                                u5941 047C                                                  u6581 153A  
                                                u6725 154D                                                  u6901 0FE8  
                                                u6741 13AC                                                  u6821 095D  
                                                u7541 0417                                                  u7461 03BA  
                                                u7381 0359                                                  u5870 0E4F  
                                                u5790 0683                                                  u5950 0486  
                                                u6590 0DA6                                                  u6670 1378  
                                                u6910 0FEF                                                  u6750 13B9  
                                                u6830 0979                                                  u7550 0438  
                                                u7470 03C0                                                  u7390 0361  
                                                u5871 0E4E                                                  u5855 0E32  
                                                u5791 0682                                                  u5951 0485  
                                                u6591 0DA5                                                  u6671 1377  
                                                u6911 0FEE                                                  u6751 13B8  
                                                u6831 0978                                                  u7551 0437  
                                                u7471 03BF                                                  u7391 0360  
                                                u5880 0E82                                                  u5960 0498  
                                                u6680 1385                                                  u6760 146C  
                                                u6840 0982                                                  u7480 03CD  
                                                u5881 0E81                                                  u5865 0E3C  
                                                u5961 0497                                                  u6681 1384  
                                                u6761 146B                                                  u6841 0981  
                                                u7481 03CC                                                  u6770 15F4  
                                                u6690 1259                                                  u5890 0EA4  
                                                u5970 04A1                                                  u6850 0F6D  
                                                u7490 03ED                                                  u6930 00C9  
                                                u6771 15F3                                                  u6691 1258  
                                                u5891 0EA3                                                  u5971 04A0  
                                                u6851 0F6C                                                  u7491 03EC  
                                                u6931 00C8                                                  u6780 1601  
                                                u5980 04A9                                                  u6860 0F80  
                                                u6940 00FA                                                  u6781 1600  
                                                u5885 0E7E                                                  u5981 04A8  
                                                u6861 0F7F                                                  u6941 00F9  
                                 __end_of_GetResponse 10B8                                                  u6790 160C  
                                                u5990 04AE                                                  u6870 0F8E  
                                                u6950 0135                                                  u6791 160B  
                                                u5991 04AD                                                  u6871 0F8D  
                                                u7567 144D                                                  u6951 0134  
                                                u6880 0FDC                                                  u6960 0162  
                                                u6881 0FDA                                                  u6961 0161  
                                                u6890 0FDD                                                  u6970 016E  
                                                u6971 016D                                                  u6955 0131  
                                                u6980 0173                                                  u6981 0172  
                                                u6990 0179                                                  u6991 0178  
                          Button_State_Pressed@button 002D                                                  _TMR0 0015  
                                                _TMR2 001A                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 0236  
                            _Sensor_getScanGroupIndex 171C                             ?_Sensor_Acq_ExecutePacket 002A  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0020                                                  _atoi 0F57  
                                                _main 009F                  __size_of_MTOUCH_Button_InitializeAll 001F  
                                                _uart 1830                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                  __size_of_MTOUCH_Sensor_InitializeAll 0012  
                                                btemp 007E                                 __end_of_check_up_down 0936  
                 __end_of_INT_DefaultInterruptHandler 10AE                           _INT_DefaultInterruptHandler 10AD  
                                  __size_of_LED_UP_ON 0003                                                  start 0046  
                                    _INIT_SMART_LIGHT 149F                                        ??_LED_DOWN_OFF 0020  
                     __end_of_INT_SetInterruptHandler 1181                                     ___bmul@multiplier 0023  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0077  
                  MTOUCH_Button_Buttonmask_Get@output 0024                        __end_of_Sensor_autoCalibration 0EB2  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1872          Sensor_Scanfrequency_Evaluation@frequency_hop 186D  
                                       __CFG_LPBOR$ON 0000                              _myButtonReleasedCallback 12D6  
                            ?_MTOUCH_Service_Mainloop 0077                      __size_of_MTOUCH_Button_isPressed 001F  
                       __size_of_Button_State_Pressed 006C                                                 ??_abs 0022  
                         ?_Button_Baseline_Initialize 0077                                       _ReceivedMessage 1789  
               Sensor_postAcquisitionProcess@adcIndex 0025                               __end_of_TMR0_Initialize 0818  
                       ??_MTOUCH_Sensor_RawSample_Get 0026                         Sensor_RawSample_Update@sensor 0026  
                       myButtonPressedCallback@button 0027                        ??_TMR0_DefaultInterruptHandler 0077  
                           __size_of_Sensor_isEnabled 0014                                         ?_EUSART_Write 0020  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 10F1  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0041                   __end_of_Sensor_isCalibratingAcqTime 1194  
                         _Sensor_isCalibratingAcqTime 118A                                                 ?_atoi 0026  
                                               ?_main 0077                                         __CFG_WDTE$OFF 0000  
                      __end_of_Sensor_loadADCSettings 074E                                                 _T2CON 001C  
                             __size_of_Button_Service 005B                                                 i1l723 10B5  
                                               i1l751 15A0                                                 i1l911 001E  
                                               i1l736 15EC                                                 i1l762 1352  
                                               i1l914 0033                                                 i1l771 10D0  
                                               i1l748 159F                                                 i1l765 10AE  
                                               i1l909 0012                                                 i1l758 17FF  
                                               i1l918 0044                                                 i1l919 0044  
                                               i1l768 10D4                                                 i1l881 1235  
                                               i1l877 10E5                                                 i1l887 10AD  
                                               _RCREG 0199                                                 _RCSTA 019D  
                                     _triac_level_now 00BE                                                 _TRISA 008C  
                                               _TRISB 008D                                                 _TRISC 008E  
                                               _TXREG 019A                                                 _TXSTA 019E  
                   __size_of_TMR0_SetInterruptHandler 0009                       __size_of_Button_DefaultCallback 0001  
                           ?_TMR0_SetInterruptHandler 0020                                  ??_MTOUCH_needReburst 0020  
                                    __end_of_TMR0_ISR 08A2                       __size_of_Sensor_DefaultCallback 0001  
                                               _blink 0072                               __size_of_Sensor_Service 009D  
               __end_of_MTOUCH_Sensor_Scan_Initialize 11F2                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 11E2                                        _WDT_Initialize 10DD  
                             Sensor_setSampled@sensor 0020                                       __end_of_isdigit 1339  
                                               atoi@n 0033                                                 atoi@s 0035  
                    __size_of_Button_State_NotPressed 00AD                                                 main@s 005F  
                                     __end_of_isspace 157E                                                 pclath 000A  
                                 __size_of_LED_UP_OFF 0003                                  _Sensor_Sampled_Reset 114B  
                                               status 0003                                          LED_RUN@LED_1 0022  
                                        LED_RUN@LED_2 0020                                          LED_RUN@LED_3 0021  
                                               wtemp0 007E                                       _TMR2_StartTimer 10C7  
                    __size_of_TMR2_LoadPeriodRegister 0005                                       __end_of_strncmp 0A8F  
                           __size_of_Sensor_setActive 0009                                Sensor_isEnabled@sensor 0021  
                                     __initialization 0048                                          __end_of_atoi 1000  
                                        __end_of_main 0446                                          __end_of_uart 1844  
                                _Sensor_setCalibrated 11D3                                        ??_EUSART_Write 0021  
                             __end_of_TMR2_Initialize 110C                           ?_INTERRUPT_InterruptManager 0077  
                                __end_of_blockingWait 1462                        ??_EUSART_SetRxInterruptHandler 0022  
                    __end_of_MTOUCH_Button_Initialize 1789                                                ??_atoi 0028  
                                           ??_ALL_OFF 0020                                                ??_main 0054  
                                       _counter_PRESS 0068                               _MTOUCH_Sensor_Calibrate 12AA  
                           Sensor_Service@sensor_adc1 004F                             Sensor_Service@sensor_adc2 0050  
                                           ??_LED_OFF 0020                                     __end_of_LED_UP_ON 10C7  
                                           ??_LED_RUN 0022                               ??_Button_Reading_Update 002B  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0022                              ?_Button_Deviation_Update 0077  
                                         _GetResponse 10B6                                __end_of_WDT_Initialize 10E1  
                                           ??_INT_ISR 0077                                          ?_MTOUCH_Tick 0077  
                        Button_Baseline_Update@button 0026             __end_of_EUSART_DefaultFramingErrorHandler 10AF  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0077  
                  ?_EUSART_DefaultFramingErrorHandler 0077                     _EUSART_DefaultFramingErrorHandler 10AE  
                          _EUSART_OverrunErrorHandler 016D                  __size_of_MTOUCH_Sensor_RawSample_Get 001D  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              _ANSELB 018D                                                _ANSELC 018E  
                                              _ALL_ON 10E6                            __end_of_EUSART_is_rx_ready 10B6  
                                              _BORCON 0116                                                i1l1042 1481  
                                              i1l1053 10AF                                                i1l1047 149E  
                                              i1l1039 08A1                                                i1l1442 17C2  
                                              i1l1439 1793                                                _LED_ON 10BE  
                                  _ReadyReceiveBuffer 1280                                                i1l5101 10D1  
                                              i1l5103 10CD                                                i1l5201 15E0  
                                              i1l5211 15EB                                                i1l5203 15E6  
                                              i1l5205 15E7                                                i1l5221 17D4  
                                              i1l5301 1487                                                i1l5207 15E8  
                                              i1l5231 17F5                                                i1l5223 17DA  
                                              i1l5215 17C3                                                i1l5303 1489  
                                              i1l5209 15EA                                                i1l5233 17FC  
                                              i1l5225 17DF                                                i1l5217 17C9  
                                              i1l5305 1493                                                i1l5251 1230  
                                              i1l5243 1224                                                i1l5227 17E5  
                                              i1l5219 17CE                                                i1l5307 1499  
                                              i1l5245 1227                                                i1l5229 17EB  
                                              i1l5247 1228                                            _SendString 14FC  
                                              i1l5249 1229                                                i1l5193 15C6  
                                              i1l5451 1592                                                i1l5195 15C6  
                                              i1l5453 1598                                                i1l5445 157E  
                                              i1l5197 15CB                                                i1l5189 10B4  
                                              i1l5461 085B                                                i1l5455 1599  
                                              i1l5447 1585                                                i1l5199 15DC  
                                              i1l5471 086A                                                i1l5463 085C  
                                              i1l5449 158D                                                i1l5457 10E1  
                                              i1l5297 1480                                                i1l5481 089D  
                                              i1l5473 086C                                                i1l5465 0860  
                                              i1l5801 003D                                                i1l5459 10E2  
                                              i1l5299 1483                                                i1l5483 089E  
                                              i1l5475 0876                                                i1l5467 0868  
                                              i1l5477 087C                                                i1l5469 0869  
                                              i1l5671 17B5                                                i1l5663 1789  
                                              i1l5479 0882                                                i1l4961 1339  
                                              i1l5673 17BE                                                i1l5665 1794  
                                              i1l4963 1343                                                i1l5667 17A2  
                                              i1l4965 1347                                                i1l5669 17AE  
                                              i1l4967 134D                                                i1l5791 001A  
                                              i1l5783 0006                                                i1l4969 134E  
                                              i1l5793 0022                                                i1l5785 000A  
                                              i1l5795 0027                                                i1l5787 000E  
                                              i1l5797 002C                                                i1l5789 0016  
                                              i1l5799 0038                                 ?_Sensor_Sampled_Reset 0077  
                                              u404_20 134D                                                u404_21 134C  
                                              u430_20 1230                                                u510_20 0027  
                                              u430_21 122F                                                u510_21 0026  
                                              u431_20 1499                                                u511_20 002C  
                                              u431_21 1498                                                u511_21 002B  
                                              u512_20 0038                                                u512_21 0037  
                                              u425_20 15CB                                                u513_20 003D  
                                              u505_20 000A                                                u425_21 15CA  
                                              u513_21 003C                                                u505_21 0009  
                                              u426_20 15E6                                                u506_20 000E  
                                              u426_21 15E5                                                u506_21 000D  
                                              u427_20 17CE                                                u507_20 0016  
                                              u427_21 17CD                                                u507_21 0015  
                                              u452_20 1585                                                u428_20 17DF  
                                              u508_20 001A                                                u452_21 1584  
                                              u428_21 17DE                                                u508_21 0019  
                                              u453_20 1598                                                u429_20 17F5  
                                              u509_20 0022                                                u453_21 1597  
                                              u429_21 17F4                                                u509_21 0021  
                                              u454_20 0868                                                u454_21 0867  
                                              u455_20 087C                                                u455_21 087B  
                                              u480_20 17A2                                                u456_20 089D  
                                              u480_21 17A1                                                u456_21 089C  
                                              u456_25 0899                                                u481_20 17B5  
                                              u481_21 17B4                                                _OSCCON 0099  
                                              u757_27 1484                                                _SPBRGH 019C  
                                              _SPBRGL 019B                                                _WDTCON 0097  
                   MTOUCH_Button_InitializeAll@button 002B                        ??_Button_Reading_Update_Helper 0028  
                              _Button_DefaultCallback 10B0                       __end_of_MTOUCH_Service_Mainloop 1480  
                                      __CFG_PWRTE$OFF 0000                               __end_of_ReceivedMessage 17C3  
                                 ?_ReadyReceiveBuffer 0077                                   _Sensor_isCalibrated 1194  
                              _Sensor_DefaultCallback 10B1                                         _packet_sample 0055  
                                              ___bmul 1294                                 ?_Sensor_setCalibrated 0077  
                                              ___wmul 153C                          Sensor_DefaultCallback@sensor 0020  
                    __size_of_myButtonPressedCallback 0007                                  __size_of_LED_DOWN_ON 0003  
                               __size_of_check_on_off 000E                                   _EUSART_Transmit_ISR 157E  
                                              _memcpy 16EC                                      ?_TMR0_Initialize 0077  
                                              _memset 0EB2                                                _rxData 00C4  
                    __end_of_MTOUCH_Button_ServiceAll 125A                          Sensor_autoCalibration@sensor 0029  
                                              _strchr 13A1                                         ?_INT_CallBack 0077  
                                              _strcpy 1614                                                _strlen 13BB  
                                              _strstr 0936                                             ??_isdigit 0022  
                                ??_ReadyReceiveBuffer 0020                               _MTOUCH_Sensor_SampleAll 136D  
                        Button_DefaultCallback@button 0027                                             ??_isspace 0022  
                                ?_Sensor_isCalibrated 0077                                       ?_WDT_Initialize 0077  
                                __end_of_LED_DOWN_OFF 10BB                              ?_Sensor_RawSample_Update 0077  
                          __end_of_Sensor_Acquisition 0BD2                                 __end_of_TMR0_CallBack 149F  
                    __size_of_INT_SetInterruptHandler 0009                               ?_Button_Baseline_Update 0077  
                 Sensor_postAcquisitionProcess@sensor 0028                               __end_of_TMR2_StartTimer 10CA  
            TMR0_SetInterruptHandler@InterruptHandler 0020               INT_SetInterruptHandler@InterruptHandler 0020  
                  __size_of_Sensor_setCalibratAcqTime 0010              __end_of_MTOUCH_Button_SetPressedCallback 1130  
           __size_of_MTOUCH_Button_SetPressedCallback 0009                    ??_MTOUCH_Button_SetPressedCallback 0022  
                   ?_MTOUCH_Button_SetPressedCallback 0020                      _MTOUCH_Button_SetPressedCallback 1127  
                                           ??_strncmp 0024                              __size_of_Sensor_isActive 0011  
                                ?_EUSART_Transmit_ISR 0077                       MTOUCH_Sensor_RawSample_Get@name 0027  
                 Sensor_getScanGroupIndex@sensorGroup 0023                                  __size_of_EUSART_Read 0027  
                                   _SYSTEM_Initialize 1307                               __end_of__initialization 009B  
                 __size_of_Button_Baseline_Initialize 002F                        ?_MTOUCH_Sensor_Scan_Initialize 0077  
                     ??_Sensor_postAcquisitionProcess 0024                                    ?_SYSTEM_Initialize 0077  
                                 _Button_StateMachine 00E4                            __end_of_Button_Tick_helper 16BD  
                                        _check_on_off 11C5                                     _update_state_flag 00C8  
                       MTOUCH_Sensor_Calibrate@sensor 0025                  __end_of_EUSART_SetTxInterruptHandler 1178  
               __size_of_EUSART_SetTxInterruptHandler 0009                          _EUSART_SetTxInterruptHandler 116F  
         Sensor_Acq_ExecutePacket@sensor1ForceEnabled 002F                                   ___bmul@multiplicand 0020  
                             ReceivedMessage@readByte 007A                                        __pcstackCOMMON 0077  
                             _MTOUCH_Button_isPressed 14BE                                          __pidataBANK0 10B3  
                                        __pidataBANK1 119F                                          __pidataBANK2 13D5  
         __end_of_MTOUCH_Button_SetNotPressedCallback 1127          __size_of_MTOUCH_Button_SetNotPressedCallback 0009  
               ??_MTOUCH_Button_SetNotPressedCallback 0022                  ?_MTOUCH_Button_SetNotPressedCallback 0020  
                 _MTOUCH_Button_SetNotPressedCallback 111E                                   ??_SYSTEM_Initialize 002C  
                                           ?_TMR0_ISR 0077                            __end_of_MTOUCH_Button_Tick 13A1  
                                        ??_LED_UP_OFF 0020                      __end_of_MTOUCH_Sensor_Initialize 1307  
                           ??_MTOUCH_Sensor_Calibrate 0024                                      _Sensor_isEnabled 126C  
                                    ?_TMR2_Initialize 0077                       __end_of_Button_Deviation_Update 0CDE  
                                      ??_INT_CallBack 0077                              Sensor_setInactive@sensor 0020  
                                      _Button_Service 09D8                                           _ReadStorage 02A0  
                    __end_of_Sensor_Acq_ExecutePacket 067C                            ?_Button_State_Initializing 002D  
                         __size_of_EXT_INT_Initialize 000D                                  Button_Service@button 0035  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0020  
                          ??_Sensor_getScanGroupIndex 0020                                  _eusartRxStatusBuffer 00A0  
                            __end_of_INIT_SMART_LIGHT 14BE                        __end_of_Button_Baseline_Update 0D70  
                 Sensor_Acq_ExecutePacket@sensor_adc1 0038                   Sensor_Acq_ExecutePacket@sensor_adc2 002A  
                            _MTOUCH_Button_Initialize 1751                       ??_EUSART_SetOverrunErrorHandler 0022  
                                      _Sensor_Service 0D70                               _Button_State_NotPressed 074E  
                       __size_of_MTOUCH_Sensor_Enable 0016                                    _Sensor_setInactive 1139  
                                   _sensor_scan_group 1872                                        _count_down_off 00CA  
                           __end_of_SYSTEM_Initialize 1320                                     _lowpowerActivated 006E  
                               ??_EUSART_Transmit_ISR 0077                      MTOUCH_Sensor_isCalibrated@sensor 0025  
                              ??_Sensor_Sampled_Reset 0020                                               ?_ALL_ON 0077  
                                      _ResponseBuffer 01A0                                        _counter_ON_OFF 0069  
                                          __pbssBANK0 0055                                            __pbssBANK1 00A0  
                                          __pbssBANK2 0120                                            __pbssBANK3 01A0  
                                          __pbssBANK4 0220                                            __pbssBANK5 02A0  
                                         ?_SendString 0022                                               ?_LED_ON 0077  
                                __end_of_EUSART_Write 1665                               _TMR2_LoadPeriodRegister 07FB  
                                  __end_of_LED_UP_OFF 10BE                            ??_myButtonReleasedCallback 0028  
                        Sensor_loadADCSettings@sensor 0028                                   ?_Sensor_setInactive 0077  
                                    _Sensor_setActive 1130                           __size_of_EUSART_Receive_ISR 003D  
                          __end_of_mtouch_button_init 1830                                     _last_touch_status 0070  
                                    ?_ReceivedMessage 0077           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0030  
                              ??_Sensor_setCalibrated 0020                                            __pmaintext 009F  
                               __size_of_blockingWait 001D                                               ?___bmul 0020  
                       ?_EUSART_SetTxInterruptHandler 0020                      _EUSART_TxDefaultInterruptHandler 00E0  
                    __end_of_TMR0_SetInterruptHandler 118A                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                                             ?___wmul 0020                                            ??_TMR0_ISR 0078  
                      MTOUCH_Sensor_wasSampled@sensor 0025                                            __pintentry 0004  
                              __end_of_Button_Service 0A33                                               ?_memcpy 0020  
                                             _BAUDCON 019F                                               ?_memset 0020  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 14FC  
                         _MTOUCH_Button_InitializeAll 14DD                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0078                   __end_of_MTOUCH_Sensor_InitializeAll 126C  
                         _MTOUCH_Sensor_InitializeAll 125A                             ??_MTOUCH_Sensor_SampleAll 0051  
                                             _ALL_OFF 10D5                       __end_of_Sensor_RawSample_Update 1691  
                                             ?_strchr 0020                                  ??_Sensor_setInactive 0020  
                                             ?_strcpy 0020                                               ?_strlen 0020  
                   __size_of_MTOUCH_Sensor_wasSampled 0011                                               ?_strstr 0029  
                           ?_MTOUCH_Sensor_wasSampled 0077                                         _eusartRxCount 0074  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0020  
                                             _LED_OFF 110C                                             _AD2PRECON 0796  
                                             _LED_RUN 15ED                     __end_of_Button_State_Initializing 0AF5  
                              __end_of_Sensor_Service 0E0D                               Sensor_Service@scanGroup 004D  
                            _MTOUCH_Button_ServiceAll 1248                                               _INT_ISR 10E1  
                           __end_of_sensor_scan_group 1876                         __size_of_EUSART_RxDataHandler 001A  
                    __size_of_MTOUCH_Service_Mainloop 001E                          __end_of_Button_State_Pressed 0B61  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0022  
                                    ?_TMR2_StartTimer 0077                      Button_Baseline_Initialize@button 002C  
                     Sensor_setCalibratAcqTime@sensor 0020                                  __size_of_MTOUCH_Tick 0004  
                                     __size_of_ALL_ON 0005                   Sensor_loadADCSettings@addressOffset 0027  
                __size_of_Sensor_isCalibratingAcqTime 000A                                     SendString@command 0022  
                                     __size_of_LED_ON 0003                                          _blockingWait 1445  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 002C                             ??_MTOUCH_Button_isPressed 0020  
                                          _count_conf 00C2                                            _counter_1s 005B  
                                   ??_Sensor_isActive 0020                   __size_of_EUSART_DefaultErrorHandler 0004  
                       MTOUCH_Button_Buttonmask_Get@i 0025                 __end_of_Sensor_postAcquisitionProcess 085B  
              __size_of_Sensor_postAcquisitionProcess 0043                         _Sensor_postAcquisitionProcess 0818  
                             _myButtonPressedCallback 10FD                               Sensor_Acquisition@retry 0048  
                                     __size_of___bmul 0016                                           _AD1CON0bits 0711  
                                             _Storage 0220                        MTOUCH_Button_Initialize@button 0029  
                                     __size_of___wmul 0020                                           _AD2CON0bits 0791  
                                     ?_Button_Service 0077                                       __CFG_STVREN$OFF 0000  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 003C            Sensor_Scanfrequency_Evaluation@sensor_adc2 0039  
                                     __size_of_memcpy 0030                                       __size_of_memset 00A5  
                                 __size_of_SendString 0020                                 __size_of_LED_DOWN_OFF 0003  
                                             __ptext1 10B2                                               __ptext2 0936  
                                             __ptext3 0A33                                               __ptext4 13BB  
                                             __ptext5 13A1                                               __ptext6 1614  
                                             __ptext7 0EB2                                               __ptext8 1445  
                                             __ptext9 0F57                           Button_Reading_Update@button 002B  
                                     __size_of_strchr 001A                                       __size_of_strcpy 0027  
                                     __size_of_strlen 001A                                       __size_of_strstr 004E  
                            _MTOUCH_Sensor_Initialize 12EE                                 _OSCILLATOR_Initialize 10EB  
                                           _T2CONbits 001C                                          __size_of_abs 001C  
                                             _isdigit 1320                             ??_Button_State_NotPressed 002E  
                              __size_of_check_up_down 004D                                               _prcData 00C9  
                                     ?_Sensor_Service 0077                                          ?_GetResponse 0077  
                            ??_PIN_MANAGER_Initialize 0020                                               _isspace 155C  
                             _INT_SetInterruptHandler 1178                        __size_of_Button_Reading_Update 0012  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 1248  
                   MTOUCH_Sensor_InitializeAll@sensor 0029                                               atoi@neg 002C  
                            _Sensor_Acq_ExecutePacket 0446                                               _triac_c 00BA  
                                    _callback_sampled 00EE                                             _LED_UP_ON 10C4  
                           ??_TMR2_LoadPeriodRegister 0020                       Sensor_RawSample_Update@adcIndex 0025  
                          __size_of_SYSTEM_Initialize 0019                                               clrloop0 10F2  
                                             main@num 00B8                                               _strncmp 0A33  
                                    _callback_pressed 00EC                        MTOUCH_Sensor_Initialize@sensor 0027  
                                end_of_initialization 009B                                               _turn_on 0066  
                                             _turn_up 0065                               ?_Button_DefaultCallback 0027  
               __end_of_EUSART_SetOverrunErrorHandler 116F                __size_of_EUSART_SetOverrunErrorHandler 0009  
                       _EUSART_SetOverrunErrorHandler 1166                                               memcpy@d 0029  
                                             memcpy@n 0022                                               memcpy@s 0025  
                                             init_ram 10F7                                               memset@c 0020  
                                             memset@k 0026                                               memset@n 0022  
                                             memset@s 0029                                               initloop 10F8  
                                __end_of_INT_CallBack 1236                               ?_Sensor_DefaultCallback 0020  
                       Sensor_Acquisition@sensor_adc1 0049                         Sensor_Acquisition@sensor_adc2 0046  
                    __size_of_Button_Deviation_Update 008B                                     _EUSART_Initialize 08A2  
                        ??_MTOUCH_Sensor_isCalibrated 0024                                    ?_EUSART_Initialize 0077  
                                        _LED_DOWN_OFF 10B8                   __end_of_MTOUCH_Sensor_RawSample_Get 1445  
                         _MTOUCH_Sensor_RawSample_Get 1428                                             _RCSTAbits 019D  
                                  _EUSART_is_rx_ready 10B4                                    _EUSART_is_tx_ready 0000  
                                             strchr@c 0020                                               strchr@s 0022  
                                             strcpy@d 002A                                               strlen@a 0023  
                                             strcpy@s 0028                                               strlen@s 0020  
                                 ??_EUSART_Initialize 0022                                      ??_WDT_Initialize 0020  
                      ??_EUSART_SetTxInterruptHandler 0022                                               strstr@h 0030  
                            _TMR0_SetInterruptHandler 1181                                               strstr@n 0029  
                                 ?_EUSART_is_rx_ready 0077                                Sensor_setActive@sensor 0020  
                                           _ZCD_STATE 00C7                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 003F                         Button_Deviation_Update@button 002A  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 002D                                 __size_of_EUSART_Write 002A  
            MTOUCH_Button_SetPressedCallback@callback 0020                            MTOUCH_Sensor_Enable@sensor 0025  
                                          ?_LED_UP_ON 0077                  Sensor_Acq_ExecutePacket@AD2CON2_temp 002E  
                                 _callback_notPressed 00EA                   __size_of_MTOUCH_Sensor_isCalibrated 001A  
                      __end_of_Button_DefaultCallback 10B1                       __size_of_EUSART_SetErrorHandler 0009  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 003D                                    _sensor_globalFlags 006D  
                            __end_of_Sensor_isEnabled 1280                            Sensor_setCalibrated@sensor 0020  
                      __end_of_Sensor_DefaultCallback 10B2                      __end_of_myButtonReleasedCallback 12EE  
                                      __end_of_ALL_ON 10EB                             __end_of_EUSART_Initialize 08E9  
                                ??_EUSART_is_rx_ready 0077                                        __end_of_LED_ON 10C1  
                          _Sensor_loadADCSettings$562 0025                              ??_Sensor_autoCalibration 0024  
                                           _TXSTAbits 019E                                         _check_request 0063  
                                       _check_up_down 08E9                             ??_myButtonPressedCallback 0028  
                    __size_of_Sensor_RawSample_Update 002C                                    _Sensor_Acquisition 0B61  
                                       ??_LED_DOWN_ON 0020                              ??_Sensor_loadADCSettings 0022  
                                       ?_update_state 0077                                  _Button_State_Pressed 0AF5  
                                      __end_of___bmul 12AA                    __end_of_EUSART_DefaultErrorHandler 10D1  
                          _EUSART_DefaultErrorHandler 10CD                                   ?_Sensor_Acquisition 0046  
                                      __end_of___wmul 155C                            ??_MTOUCH_Button_Initialize 0026  
         MTOUCH_Button_SetNotPressedCallback@callback 0020                       ??_MTOUCH_Sensor_Scan_Initialize 0020  
                      ?_Sensor_postAcquisitionProcess 0077                                          _EUSART_Write 163B  
                                   __size_of_TMR0_ISR 0047                                    _Button_Tick_helper 1691  
                                      __end_of_memcpy 171C                                ?_OSCILLATOR_Initialize 0077  
                                      __end_of_memset 0F57                             ??_INT_SetInterruptHandler 0022  
                                 MTOUCH_Button_Tick@i 0024                              __end_of_Sensor_setActive 1139  
                    TMR2_LoadPeriodRegister@periodVal 0020                           ??_Button_State_Initializing 002E  
                                      __end_of_strchr 13BB                                        __end_of_strcpy 163B  
                                      __end_of_strlen 13D5                                        __end_of_strstr 0984  
                                 start_initialization 0048                           __size_of_ReadyReceiveBuffer 0014  
                             _MTOUCH_Service_Mainloop 1462                                     ?_INIT_SMART_LIGHT 0077  
                            __size_of_TMR0_Initialize 0018                       __size_of_PIN_MANAGER_Initialize 001C  
                                  _MTOUCH_Button_Tick 1387                                   ?_Button_Tick_helper 0077  
                                         __end_of_abs 140C                                        _TMR2_StopTimer 10CA  
                                       ??_EUSART_Read 0077          EUSART_SetRxInterruptHandler@interruptHandler 0020  
        EUSART_SetTxInterruptHandler@interruptHandler 0020                                    ??_INIT_SMART_LIGHT 0025  
                                            ??_ALL_ON 0020                                  ??_Sensor_Acquisition 0047  
                                        ??_SendString 0024                                              ??_LED_ON 0020  
                                 ?_MTOUCH_Button_Tick 0077                       Button_State_Initializing@button 002D  
                                      ?_check_up_down 0077                        Sensor_autoCalibration@adcIndex 0028  
                        ?_INT_DefaultInterruptHandler 0077                        ?_EUSART_SetOverrunErrorHandler 0020  
                    __end_of_MTOUCH_Sensor_wasSampled 1213                                  ??_Button_Tick_helper 0020  
                        __end_of_MTOUCH_Sensor_Enable 12D6                                          _packet_noise 005D  
                                      ??_update_state 0020                            _EUSART_FramingErrorHandler 00DC  
                                            ??___bmul 0021                                 ?_Button_State_Pressed 002D  
                                            ??___wmul 0024                                _EUSART_SetErrorHandler 1154  
                              __size_of_TMR0_CallBack 001F                            ??_MTOUCH_Button_ServiceAll 0036  
                                         __pdataBANK0 006F                                           __pdataBANK1 00E4  
                                         __pdataBANK2 0150                                              ??_memcpy 0024  
                                            ??_memset 0024                           __end_of_Sensor_isCalibrated 119F  
                        ??_Button_Baseline_Initialize 0028                            __end_of_EXT_INT_Initialize 11B8  
                                       _sample_period 006F                                  ??_MTOUCH_Button_Tick 0023  
                                 __end_of_LED_DOWN_ON 10C4                                            memset@dest 0028  
                                  _mtouch_button_init 1800                            Sensor_Sampled_Reset@sensor 0020  
                                            ?_ALL_OFF 0077                                              ??_strchr 0022  
                                            ??_strcpy 0024                                              ??_strlen 0022  
                                  __end_of_SendString 151C                                              ??_strstr 002B  
                        ?_Sensor_isCalibratingAcqTime 0077                                              ?_LED_OFF 0077  
                     __end_of_myButtonPressedCallback 1104                           __end_of_EUSART_Transmit_ISR 15A1  
                                            ?_LED_RUN 0020                                __end_of_TMR2_StopTimer 10CD  
                                         __pbssCOMMON 0070                                             ___latbits 0002  
                                            ?_INT_ISR 0077                                         __pcstackBANK0 0020  
                            __size_of_TMR2_Initialize 0008                                    TMR0_ISR@tick_count 00C5  
                                         ??_LED_UP_ON 0020                                       _Sensor_isActive 1213  
                                __size_of_GetResponse 0002                                 __size_of_INT_CallBack 0012  
                          ReadyReceiveBuffer@position 0021                        MTOUCH_Button_ServiceAll@button 0037  
                                 Sensor_Service@error 004E                            __end_of_EUSART_Receive_ISR 1800  
                       __size_of_Sensor_Sampled_Reset 0009                            __size_of_EUSART_Initialize 0047  
                             _Button_Deviation_Update 0C53                            ?_Sensor_setCalibratAcqTime 0077  
                    _EUSART_RxDefaultInterruptHandler 00DE                                   __end_of_EUSART_Read 15ED  
                           _Button_State_Initializing 0A8F                                         _ResponseIndex 0060  
                  __end_of_MTOUCH_Sensor_isCalibrated 136D                            _MTOUCH_Sensor_isCalibrated 1353  
                                           _atoi$2607 002E                                             _atoi$2608 0032  
                                           _atoi$2609 0030                                 _TMR0_InterruptHandler 00D8  
                                           __pnvBANK1 00D8                                             __pnvBANK2 016B  
                     __size_of_Sensor_autoCalibration 00A5                     __size_of_Sensor_getScanGroupIndex 0035  
                                   _Sensor_setSampled 1142                             ?_Sensor_getScanGroupIndex 0077  
                        __end_of_EUSART_RxDataHandler 1353                                _PIN_MANAGER_Initialize 140C  
                                    ??_Button_Service 0032                         ??_INT_DefaultInterruptHandler 0077  
                            ?_MTOUCH_Sensor_Calibrate 0077                                  EUSART_Read@readValue 0078  
                                  ?_Sensor_setSampled 0077                    Button_Reading_Update_Helper@button 002A  
                          ??_MTOUCH_Sensor_Initialize 0026                         __size_of_Sensor_setCalibrated 000F  
                                           __ptext100 10E6                                             __ptext101 10D5  
                                           __ptext110 1789                                             __ptext102 110C  
                                           __ptext111 10B4                                             __ptext103 10BB  
                                           __ptext120 157E                                             __ptext112 10D1  
                                           __ptext104 10B8                                             __ptext113 10AE  
                                           __ptext114 10CD                                             __ptext106 085B  
                                           __ptext115 1339                                             __ptext107 1480  
                                           __ptext116 15C6                                             __ptext108 10AF  
                                           __ptext117 10E1                                             __ptext109 17C3  
                                           __ptext118 1224                                             __ptext119 10AD  
                     __size_of_Sensor_loadADCSettings 00D2                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 006A  
                                            _AAD2RES0 079A                                          _eusartTxHead 006C  
                                        _eusartRxTail 0075                                          _eusartTxTail 006B  
                                    ??_Sensor_Service 004A                              __size_of_ReceivedMessage 003A  
                          ??_Sensor_Acq_ExecutePacket 002B                          ??_INTERRUPT_InterruptManager 007E  
                                 ??_Sensor_setSampled 0020                     __size_of_myButtonReleasedCallback 0018  
                                         _blink_count 0062                             ?_myButtonReleasedCallback 0027  
                           ??_MTOUCH_Service_Mainloop 0053                                              _ADCOMCON 0712  
                             _eusartTxBufferRemaining 00E3                                          _INT_CallBack 1224  
                         __size_of_Sensor_setInactive 0009                        Sensor_Acq_ExecutePacket@last_a 0033  
                      Sensor_Acq_ExecutePacket@last_b 0035                                              ?_isdigit 0020  
                __end_of_MTOUCH_Button_Buttonmask_Get 15C6                 __size_of_MTOUCH_Button_Buttonmask_Get 0025  
                        _MTOUCH_Button_Buttonmask_Get 15A1                                       ?_TMR2_StopTimer 0077  
                       ??_Sensor_isCalibratingAcqTime 0020                                              ?_isspace 0020  
                                       ??_MTOUCH_Tick 0025                                         _TMR0_CallBack 1480  
                                            ?_strncmp 0020                                        _eusartRxBuffer 00A8  
                                     ??_check_up_down 0026                                     ??_TMR0_Initialize 0022  
                                      _eusartTxBuffer 00B0                             __end_of_Sensor_setSampled 114B  
                                      ___wmul@product 0024                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0020                                              _LATCbits 010E  
                             _Sensor_RawSample_Update 1665                     __end_of_Sensor_setCalibratAcqTime 1202  
                                           clear_ram0 10F1                                              _PIE1bits 0091  
                                   _eusartRxLastError 00CB                                   blockingWait@counter 0023  
                            __size_of_TMR2_StartTimer 0003                   __size_of_INTERRUPT_InterruptManager 0042  
                          ??_TMR0_SetInterruptHandler 0022                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0022                Sensor_Acq_ExecutePacket@packet_counter 0037  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 002E  
                                         _LED_DOWN_ON 10C1                                     _EUSART_is_tx_done 0000  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 153C               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0020  
                      _MTOUCH_Sensor_Sampled_ResetAll 151C                              ?_MTOUCH_Sensor_SampleAll 0077  
                                            _TMR0_ISR 085B             __end_of_EUSART_DefaultOverrunErrorHandler 10D5  
          __size_of_EUSART_DefaultOverrunErrorHandler 0004                   ??_EUSART_DefaultOverrunErrorHandler 0077  
                  ?_EUSART_DefaultOverrunErrorHandler 0077                     _EUSART_DefaultOverrunErrorHandler 10D1  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 0031                              _MTOUCH_Sensor_wasSampled 1202  
                                  _mtouch_time_toScan 0076                              ??_Button_Baseline_Update 0020  
                                   ___wmul@multiplier 0020                               __end_of_Sensor_isActive 1224  
                              _Sensor_autoCalibration 0E0D                                      __size_of_ALL_OFF 0004  
                          __end_of_MTOUCH_needReburst 0004                  __size_of_INT_DefaultInterruptHandler 0001  
                                    __size_of_LED_OFF 0009                                      __size_of_LED_RUN 0027  
                      myButtonReleasedCallback@button 0027                         ?_MTOUCH_Button_Buttonmask_Get 0077  
                                        _isspace$2625 0024                                      __size_of_INT_ISR 0005  
                                      ?_TMR0_CallBack 0077                                _Sensor_loadADCSettings 067C  
                                _MTOUCH_Sensor_Enable 12C0                                           _EUSART_Read 15C6  
                                __end_of_update_state 10B3                                             _turn_down 0064  
                            Button_Tick_helper@button 0022                             ??_Button_Deviation_Update 0020  
                               _Button_Reading_Update 1236                              ?_MTOUCH_Button_isPressed 0077  
                                   ?_Sensor_isEnabled 0077                                     ??_TMR2_Initialize 0020  
                                 __end_of_MTOUCH_Tick 10DD                                     _MTOUCH_Initialize 11B8  
                     __end_of_MTOUCH_Sensor_Calibrate 12C0                                         ?_check_on_off 0077  
                                         _counter_led 0061                                    ??_Sensor_isEnabled 0020  
                                  ?_MTOUCH_Initialize 0077                                              _Num_Char 00D5  
              Sensor_postAcquisitionProcess@deviation 0026                                             memcpy@tmp 0027  
                                          _APFCONbits 011D                               ??_OSCILLATOR_Initialize 0020  
                  __end_of_Button_Baseline_Initialize 16EC                            _Button_Baseline_Initialize 16BD  
                                 _EUSART_ErrorHandler 016B                                   ??_MTOUCH_Initialize 002C  
                         ?_EUSART_DefaultErrorHandler 0077                                              _Storage2 00CC  
                            ?_Button_State_NotPressed 002D                                    Button_Service@name 0034  
                                   ?_Sensor_setActive 0077                              ?_TMR2_LoadPeriodRegister 0077  
                               Sensor_isActive@sensor 0020                                      __size_of_isdigit 0019  
                Sensor_Scanfrequency_Evaluation@retry 0040                                     ??_ReceivedMessage 0079  
                                  ??_Sensor_setActive 0020                                  _EUSART_RxDataHandler 1339  
                                    __size_of_isspace 0022                                 ?_MTOUCH_Sensor_Enable 0077  
                                            __ptext10 155C                                              __ptext11 1320  
                                            __ptext20 11B8                                              __ptext12 153C  
                                            __ptext21 125A                                              __ptext13 1307  
                                            __ptext30 1166                                              __ptext22 12EE  
                                            __ptext14 10DD                                              __ptext31 115D  
                                            __ptext23 12C0                                              __ptext15 1104  
                                            __ptext40 114B                                              __ptext32 1154  
                                            __ptext24 14DD                                              __ptext16 0800  
                                            __ptext41 136D                                              __ptext33 1280  
                                            __ptext25 16EC                                              __ptext17 1181  
                                            __ptext50 0BD2                                              __ptext42 0D70  
                                            __ptext34 1462                                              __ptext26 11AB  
                                            __ptext18 140C                                              __ptext51 0446  
                                            __ptext43 1142                                              __ptext35 0002  
                                            __ptext27 1178                                              __ptext19 10EB  
                                            __ptext60 13F0                                              __ptext52 10CA  
                                            __ptext44 1665                                              __ptext36 10D9  
                                            __ptext28 08A2                                              __ptext61 11D3  
                                            __ptext53 10C7                                              __ptext45 10B1  
                                            __ptext37 1387                                              __ptext29 116F  
                                            __ptext70 074E                                              __ptext62 11F2  
                                            __ptext54 07FB                                              __ptext46 0B61  
                                            __ptext38 1691                                              __ptext71 0A8F  
                                            __ptext63 118A                                              __ptext55 067C  
                                            __ptext47 0818                                              __ptext39 151C  
                                            __ptext80 1751                                              __ptext72 0AF5  
                                            __ptext64 171C                                              __ptext56 1194  
                                            __ptext48 1139                                              __ptext81 12AA  
                                            __ptext73 10FD                                              __ptext65 11E2  
                                            __ptext57 126C                                              __ptext49 1130  
                                            __ptext90 111E                                              __ptext82 0CDE  
                                            __ptext74 10B0                                              __ptext66 1248  
                                            __ptext58 1213                                              __ptext91 15ED  
                                            __ptext83 16BD                                              __ptext75 12D6  
                                            __ptext67 09D8                                              __ptext59 0E0D  
                                            __ptext92 10C4                                              __ptext84 1236  
                                            __ptext76 08E9                                              __ptext68 1202  
                                            __ptext93 10C1                                              __ptext85 0984  
                                            __ptext77 11C5                                              __ptext69 1353  
                                            __ptext94 10BE                                              __ptext86 1428  
                                            __ptext78 15A1                                              __ptext95 149F  
                                            __ptext87 1294                                              __ptext79 14BE  
                                            __ptext96 14FC                                              __ptext88 0C53  
                                            __ptext97 163B                                              __ptext89 1127  
                                            __ptext98 1115                                              __ptext99 10B6  
                           __end_of_MTOUCH_Initialize 11C5                             ??_Sensor_RawSample_Update 0024  
                                          strcpy@dest 0020                                      __size_of_strncmp 005C  
                          __size_of_Sensor_setSampled 0009                           __size_of_EUSART_is_rx_ready 0002  
                                       __size_of_atoi 00A9                                         __size_of_main 03A7  
                                      ??_check_on_off 0026                                              _rc_level 00BC  
                     __end_of_MTOUCH_Sensor_SampleAll 1387                  __end_of_TMR0_DefaultInterruptHandler 10B0  
               __size_of_TMR0_DefaultInterruptHandler 0001                          _TMR0_DefaultInterruptHandler 10AF  
                    Sensor_Scanfrequency_Evaluation@i 0045                               ?_EUSART_SetErrorHandler 0020  
                           __size_of_INIT_SMART_LIGHT 001F         EUSART_SetOverrunErrorHandler@interruptHandler 0020  
                                            int$flags 007E                                            _LED_UP_OFF 10BB  
                  __size_of_Button_State_Initializing 0066                                     ??_TMR2_StartTimer 0020  
                  __end_of_INTERRUPT_InterruptManager 0046                            _INTERRUPT_InterruptManager 0004  
               __end_of_EUSART_SetFramingErrorHandler 1166                __size_of_EUSART_SetFramingErrorHandler 0009  
                       _EUSART_SetFramingErrorHandler 115D                       __size_of_Button_Baseline_Update 0092  
                        ?_MTOUCH_Button_InitializeAll 0077                          MTOUCH_Sensor_SampleAll@group 0052  
                          __end_of_ReadyReceiveBuffer 1294                          ?_MTOUCH_Sensor_InitializeAll 0077  
                                            _turn_off 0067                                      ?_Sensor_isActive 0077  
                                       _mtouch_button 0120                                            _INTCONbits 000B  
                                     ??_TMR0_CallBack 0077                                 ?_EUSART_RxDataHandler 0077  
                                       _mtouch_sensor 0150                                              memcpy@d1 0028  
                                            memcpy@s1 0020                                  _INT_InterruptHandler 00DA  
                     __end_of_MTOUCH_Button_isPressed 14DD                      __end_of_Sensor_getScanGroupIndex 1751  
                                   __CFG_BOREN$NSLEEP 0000                                              isdigit@c 0020  
                                         _MTOUCH_Tick 10D9                                ?_Button_Reading_Update 0077  
                                  _EXT_INT_Initialize 11AB                      Button_Deviation_Update@deviation 002B  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0028  
                   __size_of_MTOUCH_Button_Initialize 0038                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0077                           __size_of_Sensor_Acquisition 0071  
                      ??_MTOUCH_Button_Buttonmask_Get 0022                              ?_myButtonPressedCallback 0027  
                                       ?_blockingWait 0020                                              isspace@c 0020  
             __end_of_Sensor_Scanfrequency_Evaluation 0C53              __size_of_Sensor_Scanfrequency_Evaluation 0081  
                   ??_Sensor_Scanfrequency_Evaluation 003A                      ?_Sensor_Scanfrequency_Evaluation 0039  
                     _Sensor_Scanfrequency_Evaluation 0BD2                               ?_PIN_MANAGER_Initialize 0077  
                                       _timeout_count 00C0                           ??_Sensor_setCalibratAcqTime 0020  
                      __end_of_EUSART_SetErrorHandler 115D                                     __CFG_CLKOUTEN$OFF 0000  
                                 ?_EXT_INT_Initialize 0077                                             strcpy@src 0022  
                         ?_MTOUCH_Sensor_isCalibrated 0077                                             strncmp@_l 0025  
                                           strncmp@_r 0020                  __end_of_EUSART_SetRxInterruptHandler 111E  
               __size_of_EUSART_SetRxInterruptHandler 0009                          _EUSART_SetRxInterruptHandler 1115  
                                   blockingWait@limit 0020                         ?_TMR0_DefaultInterruptHandler 0077  
                                       _config_status 0073                           __size_of_Button_Tick_helper 002C  
                     __end_of_Button_State_NotPressed 07FB                                    _EUSART_Receive_ISR 17C3  
       EUSART_SetFramingErrorHandler@interruptHandler 0020                              ?_INT_SetInterruptHandler 0020  
                        __end_of_Sensor_Sampled_Reset 1154                                      ??_TMR2_StopTimer 0020  
                     __end_of_TMR2_LoadPeriodRegister 0800                           __size_of_MTOUCH_Button_Tick 001A  
                                       __pstringtext1 1830                                         __pstringtext2 186D  
                                       __pstringtext3 1872                                         __pstringtext4 1800  
                                       __pstringtext5 1844                                         __pstringtext6 1856  
                                       __pstringtext7 1867                                         __pstringtext8 0000  
                                ??_EXT_INT_Initialize 0022                                            _OPTION_REG 0095  
                                 ?_EUSART_Receive_ISR 0077                                 __size_of_update_state 0001  
                       ??_MTOUCH_Button_InitializeAll 002A                              ??_Button_DefaultCallback 0028  
                       ??_MTOUCH_Sensor_InitializeAll 0028                  Sensor_Acq_ExecutePacket@activeSensor 0032  
                                       ??_GetResponse 0020                                       _TMR0_Initialize 0800  
                    __size_of_MTOUCH_Sensor_Calibrate 0016                                ??_MTOUCH_Sensor_Enable 0024  
                                            strncmp@l 0028                                              strncmp@n 0022  
                                            strncmp@r 0026                     Sensor_isCalibratingAcqTime@sensor 0020  
                        __size_of_Sensor_isCalibrated 000B                              ??_Sensor_DefaultCallback 0021  
                        __end_of_Sensor_setCalibrated 11E2                                              strstr@nl 002E  
                __end_of_Button_Reading_Update_Helper 09D8                 __size_of_Button_Reading_Update_Helper 0054  
                        _Button_Reading_Update_Helper 0984                     __size_of_MTOUCH_Button_ServiceAll 0012  
                           ?_MTOUCH_Button_ServiceAll 0077                         Button_State_NotPressed@button 002D  
                                  EUSART_Write@txData 0020                          __size_of_EUSART_Transmit_ISR 0023  
                          __size_of_MTOUCH_Initialize 000D                                        ??_blockingWait 0022  
                      __end_of_PIN_MANAGER_Initialize 1428                                _Button_Baseline_Update 0CDE  
                         MTOUCH_Button_isPressed@name 0021                                  ??_EUSART_Receive_ISR 0078  
                          ??_MTOUCH_Sensor_wasSampled 0024                                         ?_LED_DOWN_OFF 0077  
                                        ?_LED_DOWN_ON 0077  
